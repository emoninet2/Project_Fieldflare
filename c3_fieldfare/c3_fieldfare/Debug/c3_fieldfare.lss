
c3_fieldfare.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e0c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000077c  00802000  00001e0c  00001ea0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000040a  0080277c  0080277c  0000261c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000261c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002678  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000428  00000000  00000000  000026b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005a23  00000000  00000000  00002ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ec  00000000  00000000  00008503  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001156  00000000  00000000  00008bef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e18  00000000  00000000  00009d48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002b3e  00000000  00000000  0000ab60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003fff  00000000  00000000  0000d69e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000418  00000000  00000000  0001169d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 02 01 	jmp	0x204	; 0x204 <__ctors_end>
       4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
       8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
       c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      10:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      14:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      18:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      1c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      20:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      24:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      28:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__vector_10>
      2c:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__vector_11>
      30:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      34:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      38:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      3c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      40:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      44:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      48:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      4c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      50:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      54:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      58:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      5c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      60:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      64:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      68:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      6c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      70:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      74:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      78:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      7c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      80:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      84:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      88:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      8c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      90:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      94:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      98:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      9c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      a0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      a4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      a8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      ac:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      b0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      b4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      b8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      bc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      c0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      c4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      c8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      cc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      d0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      d4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      d8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      dc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      e0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      e4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      e8:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__vector_58>
      ec:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      f0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      f4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      f8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      fc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     100:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     104:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     108:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     10c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     110:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     114:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     118:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     11c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     120:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     124:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     128:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     12c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     130:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     134:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     138:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     13c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     140:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     144:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     148:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     14c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     150:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     154:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     158:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     15c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     160:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     164:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     168:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     16c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     170:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     174:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     178:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     17c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     180:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     184:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     188:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     18c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     190:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     194:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     198:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     19c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1a0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1a4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1a8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1ac:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1b0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1b4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1b8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1bc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1c0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1c4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1c8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1cc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1d0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1d4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1d8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1dc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1e0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1e4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1e8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1ec:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1f0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1f4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1f8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 0b 02 	jmp	0x416	; 0x416 <USARTC0_putchar>
     200:	0c 94 23 02 	jmp	0x446	; 0x446 <USARTC0_getchar>

00000204 <__ctors_end>:
     204:	11 24       	eor	r1, r1
     206:	1f be       	out	0x3f, r1	; 63
     208:	cf ef       	ldi	r28, 0xFF	; 255
     20a:	cd bf       	out	0x3d, r28	; 61
     20c:	df e9       	ldi	r29, 0x9F	; 159
     20e:	de bf       	out	0x3e, r29	; 62
     210:	00 e0       	ldi	r16, 0x00	; 0
     212:	0c bf       	out	0x3c, r16	; 60

00000214 <__do_copy_data>:
     214:	17 e2       	ldi	r17, 0x27	; 39
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	ec e0       	ldi	r30, 0x0C	; 12
     21c:	fe e1       	ldi	r31, 0x1E	; 30
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	ac 37       	cpi	r26, 0x7C	; 124
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>

0000022e <__do_clear_bss>:
     22e:	2b e2       	ldi	r18, 0x2B	; 43
     230:	ac e7       	ldi	r26, 0x7C	; 124
     232:	b7 e2       	ldi	r27, 0x27	; 39
     234:	01 c0       	rjmp	.+2      	; 0x238 <.do_clear_bss_start>

00000236 <.do_clear_bss_loop>:
     236:	1d 92       	st	X+, r1

00000238 <.do_clear_bss_start>:
     238:	a6 38       	cpi	r26, 0x86	; 134
     23a:	b2 07       	cpc	r27, r18
     23c:	e1 f7       	brne	.-8      	; 0x236 <.do_clear_bss_loop>
     23e:	0e 94 a6 09 	call	0x134c	; 0x134c <main>
     242:	0c 94 04 0f 	jmp	0x1e08	; 0x1e08 <_exit>

00000246 <__bad_interrupt>:
     246:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024a <tokenize>:
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>

static void tokenize(char * command, int * arg_count, const char *delim, int max_tokens, char *arg_strings[]){
     24a:	af 92       	push	r10
     24c:	bf 92       	push	r11
     24e:	cf 92       	push	r12
     250:	df 92       	push	r13
     252:	ef 92       	push	r14
     254:	ff 92       	push	r15
     256:	0f 93       	push	r16
     258:	1f 93       	push	r17
     25a:	cf 93       	push	r28
     25c:	df 93       	push	r29
     25e:	5b 01       	movw	r10, r22
     260:	7a 01       	movw	r14, r20
     262:	69 01       	movw	r12, r18

	int arg_index = 0;
	char *pch;
	pch = strtok(command,delim);
     264:	ba 01       	movw	r22, r20
     266:	0e 94 b2 0b 	call	0x1764	; 0x1764 <strtok>
	while(pch != NULL){
     26a:	00 97       	sbiw	r24, 0x00	; 0
     26c:	d9 f0       	breq	.+54     	; 0x2a4 <tokenize+0x5a>
		arg_strings[arg_index++] = pch;
     26e:	f8 01       	movw	r30, r16
     270:	80 83       	st	Z, r24
     272:	91 83       	std	Z+1, r25	; 0x01
		//arg_index++;
		if(arg_index >max_tokens)break;
     274:	1c 14       	cp	r1, r12
     276:	1d 04       	cpc	r1, r13
     278:	c4 f4       	brge	.+48     	; 0x2aa <tokenize+0x60>
     27a:	0e 5f       	subi	r16, 0xFE	; 254
     27c:	1f 4f       	sbci	r17, 0xFF	; 255
     27e:	c1 e0       	ldi	r28, 0x01	; 1
     280:	d0 e0       	ldi	r29, 0x00	; 0
     282:	08 c0       	rjmp	.+16     	; 0x294 <tokenize+0x4a>

	int arg_index = 0;
	char *pch;
	pch = strtok(command,delim);
	while(pch != NULL){
		arg_strings[arg_index++] = pch;
     284:	21 96       	adiw	r28, 0x01	; 1
     286:	f8 01       	movw	r30, r16
     288:	81 93       	st	Z+, r24
     28a:	91 93       	st	Z+, r25
     28c:	8f 01       	movw	r16, r30
		//arg_index++;
		if(arg_index >max_tokens)break;
     28e:	cc 16       	cp	r12, r28
     290:	dd 06       	cpc	r13, r29
     292:	6c f0       	brlt	.+26     	; 0x2ae <tokenize+0x64>
		pch = strtok(NULL,delim);
     294:	b7 01       	movw	r22, r14
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0e 94 b2 0b 	call	0x1764	; 0x1764 <strtok>
static void tokenize(char * command, int * arg_count, const char *delim, int max_tokens, char *arg_strings[]){

	int arg_index = 0;
	char *pch;
	pch = strtok(command,delim);
	while(pch != NULL){
     29e:	00 97       	sbiw	r24, 0x00	; 0
     2a0:	89 f7       	brne	.-30     	; 0x284 <tokenize+0x3a>
     2a2:	05 c0       	rjmp	.+10     	; 0x2ae <tokenize+0x64>
#include <math.h>
#include <string.h>

static void tokenize(char * command, int * arg_count, const char *delim, int max_tokens, char *arg_strings[]){

	int arg_index = 0;
     2a4:	c0 e0       	ldi	r28, 0x00	; 0
     2a6:	d0 e0       	ldi	r29, 0x00	; 0
     2a8:	02 c0       	rjmp	.+4      	; 0x2ae <tokenize+0x64>
	char *pch;
	pch = strtok(command,delim);
	while(pch != NULL){
		arg_strings[arg_index++] = pch;
     2aa:	c1 e0       	ldi	r28, 0x01	; 1
     2ac:	d0 e0       	ldi	r29, 0x00	; 0
		//arg_index++;
		if(arg_index >max_tokens)break;
		pch = strtok(NULL,delim);
	}
	*arg_count = arg_index;
     2ae:	f5 01       	movw	r30, r10
     2b0:	c0 83       	st	Z, r28
     2b2:	d1 83       	std	Z+1, r29	; 0x01
}
     2b4:	df 91       	pop	r29
     2b6:	cf 91       	pop	r28
     2b8:	1f 91       	pop	r17
     2ba:	0f 91       	pop	r16
     2bc:	ff 90       	pop	r15
     2be:	ef 90       	pop	r14
     2c0:	df 90       	pop	r13
     2c2:	cf 90       	pop	r12
     2c4:	bf 90       	pop	r11
     2c6:	af 90       	pop	r10
     2c8:	08 95       	ret

000002ca <rtc_init>:
/*
 *	initialize the rtc
 */
void rtc_init(){
	//enabling interrupt all three level, high, mid, and low
	PMIC_CTRL |= (7<<0);
     2ca:	e2 ea       	ldi	r30, 0xA2	; 162
     2cc:	f0 e0       	ldi	r31, 0x00	; 0
     2ce:	80 81       	ld	r24, Z
     2d0:	87 60       	ori	r24, 0x07	; 7
     2d2:	80 83       	st	Z, r24
	//selecting clock source 32.768kHz from 32.768kHz crystal oscillator on TOSC, enabling RTC clock source
	CLK_RTCCTRL = (5<<1) | (1<<0);//crystal oscillator on TOSC| enabling clock
     2d4:	8b e0       	ldi	r24, 0x0B	; 11
     2d6:	80 93 43 00 	sts	0x0043, r24
	//enabling interrupts for overflow
	RTC_INTCTRL	|= (0b00000001);
     2da:	e2 e0       	ldi	r30, 0x02	; 2
     2dc:	f4 e0       	ldi	r31, 0x04	; 4
     2de:	80 81       	ld	r24, Z
     2e0:	81 60       	ori	r24, 0x01	; 1
     2e2:	80 83       	st	Z, r24
	RTC_PER = RTC_PER_VAL; //period_val  = 2
     2e4:	80 e2       	ldi	r24, 0x20	; 32
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	80 93 0a 04 	sts	0x040A, r24
     2ec:	90 93 0b 04 	sts	0x040B, r25
	//selecting clock prescaling
	RTC_CTRL = (1<<0);//no prescaling
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	80 93 00 04 	sts	0x0400, r24
	sei();
     2f6:	78 94       	sei
     2f8:	08 95       	ret

000002fa <rtc_ms_delay>:


/*
 *	ms wait until
 */
void rtc_ms_delay(int ms){
     2fa:	0f 93       	push	r16
     2fc:	1f 93       	push	r17
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	00 d0       	rcall	.+0      	; 0x304 <rtc_ms_delay+0xa>
     304:	1f 92       	push	r1
     306:	cd b7       	in	r28, 0x3d	; 61
     308:	de b7       	in	r29, 0x3e	; 62
     30a:	bc 01       	movw	r22, r24
	rtctick_t tempsnap = rtc_tick;
     30c:	80 91 86 29 	lds	r24, 0x2986
     310:	90 91 87 29 	lds	r25, 0x2987
     314:	a0 91 88 29 	lds	r26, 0x2988
     318:	b0 91 89 29 	lds	r27, 0x2989
     31c:	89 83       	std	Y+1, r24	; 0x01
     31e:	9a 83       	std	Y+2, r25	; 0x02
     320:	ab 83       	std	Y+3, r26	; 0x03
     322:	bc 83       	std	Y+4, r27	; 0x04
	while(rtc_tick-tempsnap < rtc_ms_ticks(ms));
     324:	cb 01       	movw	r24, r22
     326:	77 0f       	add	r23, r23
     328:	aa 0b       	sbc	r26, r26
     32a:	bb 0b       	sbc	r27, r27
     32c:	bc 01       	movw	r22, r24
     32e:	cd 01       	movw	r24, r26
     330:	05 2e       	mov	r0, r21
     332:	5f e0       	ldi	r21, 0x0F	; 15
     334:	66 0f       	add	r22, r22
     336:	77 1f       	adc	r23, r23
     338:	88 1f       	adc	r24, r24
     33a:	99 1f       	adc	r25, r25
     33c:	5a 95       	dec	r21
     33e:	d1 f7       	brne	.-12     	; 0x334 <rtc_ms_delay+0x3a>
     340:	50 2d       	mov	r21, r0
     342:	20 e0       	ldi	r18, 0x00	; 0
     344:	3d e7       	ldi	r19, 0x7D	; 125
     346:	40 e0       	ldi	r20, 0x00	; 0
     348:	50 e0       	ldi	r21, 0x00	; 0
     34a:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__divmodsi4>
     34e:	89 01       	movw	r16, r18
     350:	9a 01       	movw	r18, r20
     352:	80 91 86 29 	lds	r24, 0x2986
     356:	90 91 87 29 	lds	r25, 0x2987
     35a:	a0 91 88 29 	lds	r26, 0x2988
     35e:	b0 91 89 29 	lds	r27, 0x2989
     362:	49 81       	ldd	r20, Y+1	; 0x01
     364:	5a 81       	ldd	r21, Y+2	; 0x02
     366:	6b 81       	ldd	r22, Y+3	; 0x03
     368:	7c 81       	ldd	r23, Y+4	; 0x04
     36a:	84 1b       	sub	r24, r20
     36c:	95 0b       	sbc	r25, r21
     36e:	a6 0b       	sbc	r26, r22
     370:	b7 0b       	sbc	r27, r23
     372:	80 17       	cp	r24, r16
     374:	91 07       	cpc	r25, r17
     376:	a2 07       	cpc	r26, r18
     378:	b3 07       	cpc	r27, r19
     37a:	58 f3       	brcs	.-42     	; 0x352 <rtc_ms_delay+0x58>
	
}
     37c:	24 96       	adiw	r28, 0x04	; 4
     37e:	cd bf       	out	0x3d, r28	; 61
     380:	de bf       	out	0x3e, r29	; 62
     382:	df 91       	pop	r29
     384:	cf 91       	pop	r28
     386:	1f 91       	pop	r17
     388:	0f 91       	pop	r16
     38a:	08 95       	ret

0000038c <__vector_10>:

/*
 *	interrupt service routine for overflow interrupt event
 */
ISR(RTC_OVF_vect)
{
     38c:	1f 92       	push	r1
     38e:	0f 92       	push	r0
     390:	0f b6       	in	r0, 0x3f	; 63
     392:	0f 92       	push	r0
     394:	11 24       	eor	r1, r1
     396:	8f 93       	push	r24
     398:	9f 93       	push	r25
     39a:	af 93       	push	r26
     39c:	bf 93       	push	r27
	rtc_tick++;	
     39e:	80 91 86 29 	lds	r24, 0x2986
     3a2:	90 91 87 29 	lds	r25, 0x2987
     3a6:	a0 91 88 29 	lds	r26, 0x2988
     3aa:	b0 91 89 29 	lds	r27, 0x2989
     3ae:	01 96       	adiw	r24, 0x01	; 1
     3b0:	a1 1d       	adc	r26, r1
     3b2:	b1 1d       	adc	r27, r1
     3b4:	80 93 86 29 	sts	0x2986, r24
     3b8:	90 93 87 29 	sts	0x2987, r25
     3bc:	a0 93 88 29 	sts	0x2988, r26
     3c0:	b0 93 89 29 	sts	0x2989, r27
}
     3c4:	bf 91       	pop	r27
     3c6:	af 91       	pop	r26
     3c8:	9f 91       	pop	r25
     3ca:	8f 91       	pop	r24
     3cc:	0f 90       	pop	r0
     3ce:	0f be       	out	0x3f, r0	; 63
     3d0:	0f 90       	pop	r0
     3d2:	1f 90       	pop	r1
     3d4:	18 95       	reti

000003d6 <__vector_11>:

/*
 *	interrupt service routine for compare interrupt event
 */
ISR(RTC_COMP_vect)
{
     3d6:	1f 92       	push	r1
     3d8:	0f 92       	push	r0
     3da:	0f b6       	in	r0, 0x3f	; 63
     3dc:	0f 92       	push	r0
     3de:	11 24       	eor	r1, r1


}
     3e0:	0f 90       	pop	r0
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	0f 90       	pop	r0
     3e6:	1f 90       	pop	r1
     3e8:	18 95       	reti

000003ea <enable_oscillator>:
		OSC_RC32KEN_bm	-> 32.768 KHz internal RC oscillator
		OSC_XOSCEN_bm	-> External Oscillator
		OSC_PLLEN_bm	-> PLL
 */
void enable_oscillator(OSC_options_t osc_type){
	OSC.CTRL |= (osc_type);
     3ea:	e0 e5       	ldi	r30, 0x50	; 80
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
     3ee:	90 81       	ld	r25, Z
     3f0:	89 2b       	or	r24, r25
     3f2:	80 83       	st	Z, r24
     3f4:	08 95       	ret

000003f6 <sysclk_source>:
		CLK_SCLKSEL_RC32K_gc	-> 32.768 KHz internal RC oscillator
		CLK_SCLKSEL_XOSC_gc	-> External Oscillator
		CLK_SCLKSEL_PLL_gc	-> PLL		
 */
void sysclk_source(CLK_SCLKSEL_t clk_src){
	while(!(OSC.STATUS&clk_src));
     3f6:	e0 e5       	ldi	r30, 0x50	; 80
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	91 81       	ldd	r25, Z+1	; 0x01
     3fc:	98 23       	and	r25, r24
     3fe:	e9 f3       	breq	.-6      	; 0x3fa <sysclk_source+0x4>
	ccp_ioreg();
     400:	98 ed       	ldi	r25, 0xD8	; 216
     402:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL = clk_src;
     404:	80 93 40 00 	sts	0x0040, r24
     408:	08 95       	ret

0000040a <usart_transmit_by_val>:

/**
 * transmit data over usart by value
 @param data value of the data to be sent
 */
void usart_transmit_by_val(USART_t *usart_unit, uint8_t data){
     40a:	fc 01       	movw	r30, r24
	while(!(usart_unit->STATUS&USART_DREIF_bm));
     40c:	91 81       	ldd	r25, Z+1	; 0x01
     40e:	95 ff       	sbrs	r25, 5
     410:	fd cf       	rjmp	.-6      	; 0x40c <usart_transmit_by_val+0x2>
	//usart_unit->DATA = data;
	USART_PutChar(usart_unit, data);
     412:	60 83       	st	Z, r22
     414:	08 95       	ret

00000416 <USARTC0_putchar>:
	}
	
	
	
#if USE_STDIO_ON_USARTC0 == 1
	create_serial_stream(USARTC0);
     416:	cf 93       	push	r28
     418:	c8 2f       	mov	r28, r24
     41a:	8a 30       	cpi	r24, 0x0A	; 10
     41c:	19 f4       	brne	.+6      	; 0x424 <USARTC0_putchar+0xe>
     41e:	8d e0       	ldi	r24, 0x0D	; 13
     420:	0e 94 0b 02 	call	0x416	; 0x416 <USARTC0_putchar>
     424:	6c 2f       	mov	r22, r28
     426:	80 ea       	ldi	r24, 0xA0	; 160
     428:	98 e0       	ldi	r25, 0x08	; 8
     42a:	0e 94 05 02 	call	0x40a	; 0x40a <usart_transmit_by_val>
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	cf 91       	pop	r28
     434:	08 95       	ret

00000436 <usart_receive_by_ref>:

/**
 * transmit address to receive datay into
 @param data address of the data to be received
 */
void usart_receive_by_ref(USART_t *usart_unit, uint8_t *data){
     436:	fc 01       	movw	r30, r24
	while(!(usart_unit->STATUS&USART_RXCIF_bm));
     438:	91 81       	ldd	r25, Z+1	; 0x01
     43a:	99 23       	and	r25, r25
     43c:	ec f7       	brge	.-6      	; 0x438 <usart_receive_by_ref+0x2>
	//*data = usart_unit->DATA;
	*data = USART_GetChar(usart_unit);
     43e:	80 81       	ld	r24, Z
     440:	fb 01       	movw	r30, r22
     442:	80 83       	st	Z, r24
     444:	08 95       	ret

00000446 <USARTC0_getchar>:
     446:	0f 93       	push	r16
     448:	1f 93       	push	r17
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
     44e:	1f 92       	push	r1
     450:	cd b7       	in	r28, 0x3d	; 61
     452:	de b7       	in	r29, 0x3e	; 62
     454:	8c 01       	movw	r16, r24
     456:	be 01       	movw	r22, r28
     458:	6f 5f       	subi	r22, 0xFF	; 255
     45a:	7f 4f       	sbci	r23, 0xFF	; 255
     45c:	80 ea       	ldi	r24, 0xA0	; 160
     45e:	98 e0       	ldi	r25, 0x08	; 8
     460:	0e 94 1b 02 	call	0x436	; 0x436 <usart_receive_by_ref>
     464:	b8 01       	movw	r22, r16
     466:	89 81       	ldd	r24, Y+1	; 0x01
     468:	0e 94 0b 02 	call	0x416	; 0x416 <USARTC0_putchar>
     46c:	89 81       	ldd	r24, Y+1	; 0x01
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	0f 90       	pop	r0
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	1f 91       	pop	r17
     478:	0f 91       	pop	r16
     47a:	08 95       	ret

0000047c <usart_spi_transmit_receive>:
 *
 * @param usart
 * @param txdata
 * @return data received from slave
 */
uint8_t usart_spi_transmit_receive(USART_t * usart,uint8_t txdata){
     47c:	fc 01       	movw	r30, r24
	
	while ((usart->STATUS & USART_DREIF_bm) == 0);
     47e:	81 81       	ldd	r24, Z+1	; 0x01
     480:	85 ff       	sbrs	r24, 5
     482:	fd cf       	rjmp	.-6      	; 0x47e <usart_spi_transmit_receive+0x2>
	usart->DATA = txdata;
     484:	60 83       	st	Z, r22
	while((usart->STATUS & USART_TXCIF_bm) == 0);
     486:	81 81       	ldd	r24, Z+1	; 0x01
     488:	86 ff       	sbrs	r24, 6
     48a:	fd cf       	rjmp	.-6      	; 0x486 <usart_spi_transmit_receive+0xa>
	(usart)->STATUS = USART_TXCIF_bm;
     48c:	80 e4       	ldi	r24, 0x40	; 64
     48e:	81 83       	std	Z+1, r24	; 0x01
	return (usart)->DATA;
     490:	80 81       	ld	r24, Z
}
     492:	08 95       	ret

00000494 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
	port_out_value_clear_mask(&PORTF,(1<<3));//select device
     49a:	c0 ea       	ldi	r28, 0xA0	; 160
     49c:	d6 e0       	ldi	r29, 0x06	; 6
     49e:	18 e0       	ldi	r17, 0x08	; 8
     4a0:	1e 83       	std	Y+6, r17	; 0x06
	port_out_value_clear_mask(&PORTD,(1<<0));//select command
     4a2:	e0 e6       	ldi	r30, 0x60	; 96
     4a4:	f6 e0       	ldi	r31, 0x06	; 6
     4a6:	91 e0       	ldi	r25, 0x01	; 1
     4a8:	96 83       	std	Z+6, r25	; 0x06
	ssd1306_sel_cmd() ;
     4aa:	96 83       	std	Z+6, r25	; 0x06
	usart_spi_transmit_receive(&USARTD0, command);//transmit
     4ac:	68 2f       	mov	r22, r24
     4ae:	80 ea       	ldi	r24, 0xA0	; 160
     4b0:	99 e0       	ldi	r25, 0x09	; 9
     4b2:	0e 94 3e 02 	call	0x47c	; 0x47c <usart_spi_transmit_receive>
	port_out_value_set_mask(&PORTF,(1<<3));//deselect device
     4b6:	1d 83       	std	Y+5, r17	; 0x05
	
}
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	1f 91       	pop	r17
     4be:	08 95       	ret

000004c0 <create_file_stream>:
void set_stdio_stream(FILE* stdio_file)
{
	stdout = stdin = stdio_file;
}

void create_file_stream(FILE* stdio_file, int (*putc_func)(char ch, FILE *stream) , int (*getc_func) (FILE *stream)){
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	cd b7       	in	r28, 0x3d	; 61
     4c6:	de b7       	in	r29, 0x3e	; 62
     4c8:	2e 97       	sbiw	r28, 0x0e	; 14
     4ca:	cd bf       	out	0x3d, r28	; 61
     4cc:	de bf       	out	0x3e, r29	; 62
     4ce:	9c 01       	movw	r18, r24
	FILE temp_file = FDEV_SETUP_STREAM(putc_func, getc_func, _FDEV_SETUP_RW);
     4d0:	fe 01       	movw	r30, r28
     4d2:	31 96       	adiw	r30, 0x01	; 1
     4d4:	8e e0       	ldi	r24, 0x0E	; 14
     4d6:	df 01       	movw	r26, r30
     4d8:	1d 92       	st	X+, r1
     4da:	8a 95       	dec	r24
     4dc:	e9 f7       	brne	.-6      	; 0x4d8 <create_file_stream+0x18>
	*stdio_file = temp_file;
     4de:	83 e0       	ldi	r24, 0x03	; 3
     4e0:	8c 83       	std	Y+4, r24	; 0x04
     4e2:	69 87       	std	Y+9, r22	; 0x09
     4e4:	7a 87       	std	Y+10, r23	; 0x0a
     4e6:	4b 87       	std	Y+11, r20	; 0x0b
     4e8:	5c 87       	std	Y+12, r21	; 0x0c
     4ea:	9e e0       	ldi	r25, 0x0E	; 14
     4ec:	d9 01       	movw	r26, r18
     4ee:	01 90       	ld	r0, Z+
     4f0:	0d 92       	st	X+, r0
     4f2:	9a 95       	dec	r25
     4f4:	e1 f7       	brne	.-8      	; 0x4ee <create_file_stream+0x2e>
}
     4f6:	2e 96       	adiw	r28, 0x0e	; 14
     4f8:	cd bf       	out	0x3d, r28	; 61
     4fa:	de bf       	out	0x3e, r29	; 62
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	08 95       	ret

00000502 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
     502:	ef 92       	push	r14
     504:	ff 92       	push	r15
     506:	0f 93       	push	r16
     508:	1f 93       	push	r17
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
	
	port_out_value_clear_mask(&PORTF,(1<<3));//select device
     50e:	c0 ea       	ldi	r28, 0xA0	; 160
     510:	d6 e0       	ldi	r29, 0x06	; 6
     512:	18 e0       	ldi	r17, 0x08	; 8
     514:	1e 83       	std	Y+6, r17	; 0x06
	ssd1306_sel_data() ;
     516:	0f 2e       	mov	r0, r31
     518:	f0 e6       	ldi	r31, 0x60	; 96
     51a:	ef 2e       	mov	r14, r31
     51c:	f6 e0       	ldi	r31, 0x06	; 6
     51e:	ff 2e       	mov	r15, r31
     520:	f0 2d       	mov	r31, r0
     522:	01 e0       	ldi	r16, 0x01	; 1
     524:	f7 01       	movw	r30, r14
     526:	05 83       	std	Z+5, r16	; 0x05
	usart_spi_transmit_receive(&USARTD0, data);//transmit
     528:	68 2f       	mov	r22, r24
     52a:	80 ea       	ldi	r24, 0xA0	; 160
     52c:	99 e0       	ldi	r25, 0x09	; 9
     52e:	0e 94 3e 02 	call	0x47c	; 0x47c <usart_spi_transmit_receive>
	ssd1306_sel_cmd();
     532:	f7 01       	movw	r30, r14
     534:	06 83       	std	Z+6, r16	; 0x06
	port_out_value_set_mask(&PORTF,(1<<3));//deselect device
     536:	1d 83       	std	Y+5, r17	; 0x05

}
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	1f 91       	pop	r17
     53e:	0f 91       	pop	r16
     540:	ff 90       	pop	r15
     542:	ef 90       	pop	r14
     544:	08 95       	ret

00000546 <ssd1306_set_page_address>:
 */
void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
     546:	87 70       	andi	r24, 0x07	; 7
     548:	80 6b       	ori	r24, 0xB0	; 176
     54a:	0e 94 4a 02 	call	0x494	; 0x494 <ssd1306_write_command>
     54e:	08 95       	ret

00000550 <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
void ssd1306_set_column_address(uint8_t address)
{
     550:	cf 93       	push	r28
     552:	c8 2f       	mov	r28, r24
	// Make sure the address is 7 bits
	address &= 0x7F;
     554:	98 2f       	mov	r25, r24
     556:	9f 77       	andi	r25, 0x7F	; 127
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
     558:	89 2f       	mov	r24, r25
     55a:	82 95       	swap	r24
     55c:	8f 70       	andi	r24, 0x0F	; 15
     55e:	80 61       	ori	r24, 0x10	; 16
     560:	0e 94 4a 02 	call	0x494	; 0x494 <ssd1306_write_command>
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
     564:	8c 2f       	mov	r24, r28
     566:	8f 70       	andi	r24, 0x0F	; 15
     568:	0e 94 4a 02 	call	0x494	; 0x494 <ssd1306_write_command>
}
     56c:	cf 91       	pop	r28
     56e:	08 95       	ret

00000570 <usart_init_spi>:
	}
}


void usart_init_spi(USART_t *usart, const usart_spi_options_emon_t *opt)
{
     570:	cf 93       	push	r28
     572:	df 93       	push	r29
     574:	ec 01       	movw	r28, r24
     576:	fb 01       	movw	r30, r22
	//ioport_pin_t sck_pin;
	//uint8_t invert_sck;

	(usart)->CTRLB &= ~USART_RXEN_bm;
     578:	8c 81       	ldd	r24, Y+4	; 0x04
     57a:	8f 7e       	andi	r24, 0xEF	; 239
     57c:	8c 83       	std	Y+4, r24	; 0x04

	//invert_sck = (opt->spimode == 2) || (opt->spimode == 3);

	PORTD.DIRSET = (1<<1);//sck pin output
     57e:	a0 e6       	ldi	r26, 0x60	; 96
     580:	b6 e0       	ldi	r27, 0x06	; 6
     582:	82 e0       	ldi	r24, 0x02	; 2
     584:	11 96       	adiw	r26, 0x01	; 1
     586:	8c 93       	st	X, r24
     588:	11 97       	sbiw	r26, 0x01	; 1
	PORTD.OUTSET = (1<<1);//sck pin output level high
     58a:	15 96       	adiw	r26, 0x05	; 5
     58c:	8c 93       	st	X, r24

	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | USART_CMODE_MSPI_gc;
     58e:	8d 81       	ldd	r24, Y+5	; 0x05
     590:	80 6c       	ori	r24, 0xC0	; 192
     592:	8d 83       	std	Y+5, r24	; 0x05

	if (opt->spimode == 1 || opt->spimode == 3) {
     594:	84 81       	ldd	r24, Z+4	; 0x04
     596:	8d 7f       	andi	r24, 0xFD	; 253
     598:	81 30       	cpi	r24, 0x01	; 1
     59a:	21 f4       	brne	.+8      	; 0x5a4 <usart_init_spi+0x34>
		usart->CTRLC |= USART_UCPHA_bm;
     59c:	8d 81       	ldd	r24, Y+5	; 0x05
     59e:	82 60       	ori	r24, 0x02	; 2
     5a0:	8d 83       	std	Y+5, r24	; 0x05
     5a2:	03 c0       	rjmp	.+6      	; 0x5aa <usart_init_spi+0x3a>
	}
	else {
		usart->CTRLC &= ~USART_UCPHA_bm;
     5a4:	8d 81       	ldd	r24, Y+5	; 0x05
     5a6:	8d 7f       	andi	r24, 0xFD	; 253
     5a8:	8d 83       	std	Y+5, r24	; 0x05
	}
	
	if (opt->data_order) {
     5aa:	85 81       	ldd	r24, Z+5	; 0x05
     5ac:	88 23       	and	r24, r24
     5ae:	21 f0       	breq	.+8      	; 0x5b8 <usart_init_spi+0x48>
		(usart)->CTRLC |= USART_DORD_bm;
     5b0:	8d 81       	ldd	r24, Y+5	; 0x05
     5b2:	84 60       	ori	r24, 0x04	; 4
     5b4:	8d 83       	std	Y+5, r24	; 0x05
     5b6:	03 c0       	rjmp	.+6      	; 0x5be <usart_init_spi+0x4e>
	}
	else {
		(usart)->CTRLC &= ~USART_DORD_bm;
     5b8:	8d 81       	ldd	r24, Y+5	; 0x05
     5ba:	8b 7f       	andi	r24, 0xFB	; 251
     5bc:	8d 83       	std	Y+5, r24	; 0x05
	}


	uint16_t bsel_value = (32000000UL/ (opt->baudrate*2)) -1 ;
     5be:	80 81       	ld	r24, Z
     5c0:	91 81       	ldd	r25, Z+1	; 0x01
     5c2:	a2 81       	ldd	r26, Z+2	; 0x02
     5c4:	b3 81       	ldd	r27, Z+3	; 0x03
     5c6:	9c 01       	movw	r18, r24
     5c8:	ad 01       	movw	r20, r26
     5ca:	22 0f       	add	r18, r18
     5cc:	33 1f       	adc	r19, r19
     5ce:	44 1f       	adc	r20, r20
     5d0:	55 1f       	adc	r21, r21
     5d2:	60 e0       	ldi	r22, 0x00	; 0
     5d4:	78 e4       	ldi	r23, 0x48	; 72
     5d6:	88 ee       	ldi	r24, 0xE8	; 232
     5d8:	91 e0       	ldi	r25, 0x01	; 1
     5da:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <__udivmodsi4>
     5de:	21 50       	subi	r18, 0x01	; 1
     5e0:	31 09       	sbc	r19, r1
	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
     5e2:	83 2f       	mov	r24, r19
     5e4:	8f 70       	andi	r24, 0x0F	; 15
     5e6:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
     5e8:	2e 83       	std	Y+6, r18	; 0x06
	
	(usart)->CTRLB |= USART_TXEN_bm;
     5ea:	8c 81       	ldd	r24, Y+4	; 0x04
     5ec:	88 60       	ori	r24, 0x08	; 8
     5ee:	8c 83       	std	Y+4, r24	; 0x04

}
     5f0:	df 91       	pop	r29
     5f2:	cf 91       	pop	r28
     5f4:	08 95       	ret

000005f6 <ssd1306_init>:




void ssd1306_init(void)
{
     5f6:	cf 93       	push	r28
     5f8:	df 93       	push	r29
     5fa:	00 d0       	rcall	.+0      	; 0x5fc <ssd1306_init+0x6>
     5fc:	00 d0       	rcall	.+0      	; 0x5fe <ssd1306_init+0x8>
     5fe:	cd b7       	in	r28, 0x3d	; 61
     600:	de b7       	in	r29, 0x3e	; 62

	port_direction_set_mask(&PORTF,(1<<3));//ss
     602:	40 ea       	ldi	r20, 0xA0	; 160
     604:	56 e0       	ldi	r21, 0x06	; 6
     606:	88 e0       	ldi	r24, 0x08	; 8
     608:	da 01       	movw	r26, r20
     60a:	11 96       	adiw	r26, 0x01	; 1
     60c:	8c 93       	st	X, r24
	port_direction_set_mask(&PORTD,(1<<0));//data_cmd
     60e:	e0 e6       	ldi	r30, 0x60	; 96
     610:	f6 e0       	ldi	r31, 0x06	; 6
     612:	21 e0       	ldi	r18, 0x01	; 1
     614:	21 83       	std	Z+1, r18	; 0x01
	port_direction_set_mask(&PORTA,(1<<3));//reset
     616:	60 e0       	ldi	r22, 0x00	; 0
     618:	76 e0       	ldi	r23, 0x06	; 6
     61a:	db 01       	movw	r26, r22
     61c:	11 96       	adiw	r26, 0x01	; 1
     61e:	8c 93       	st	X, r24
	port_direction_set_mask(&PORTD,(1<<1));//sck
     620:	92 e0       	ldi	r25, 0x02	; 2
     622:	91 83       	std	Z+1, r25	; 0x01
	port_direction_set_mask(&PORTD,(1<<3));//mosi
     624:	81 83       	std	Z+1, r24	; 0x01
	
	port_out_value_set_mask(&PORTF,(1<<3));//ss
     626:	da 01       	movw	r26, r20
     628:	15 96       	adiw	r26, 0x05	; 5
     62a:	8c 93       	st	X, r24
	port_out_value_set_mask(&PORTD,(1<<0));//data_cmd
     62c:	25 83       	std	Z+5, r18	; 0x05
	port_out_value_set_mask(&PORTA,(1<<3));//reset
     62e:	db 01       	movw	r26, r22
     630:	15 96       	adiw	r26, 0x05	; 5
     632:	8c 93       	st	X, r24
     634:	15 97       	sbiw	r26, 0x05	; 5
	port_out_value_set_mask(&PORTD,(1<<1));//sck
     636:	95 83       	std	Z+5, r25	; 0x05
	port_out_value_set_mask(&PORTD,(1<<3));//mosi
     638:	85 83       	std	Z+5, r24	; 0x05
 * \note this functions should not be confused with the \ref ssd1306_soft_reset()
 * function, this command will control the RST pin.
 */
static inline void ssd1306_hard_reset(void)
{
	PORTA.OUTCLR = (1<<3);
     63a:	16 96       	adiw	r26, 0x06	; 6
     63c:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     63e:	ba e6       	ldi	r27, 0x6A	; 106
     640:	ba 95       	dec	r27
     642:	f1 f7       	brne	.-4      	; 0x640 <ssd1306_init+0x4a>
     644:	00 c0       	rjmp	.+0      	; 0x646 <ssd1306_init+0x50>
	delay_us(10); // At least 3us
	PORTA.OUTSET = (1<<3);
     646:	fb 01       	movw	r30, r22
     648:	85 83       	std	Z+5, r24	; 0x05
     64a:	fa e6       	ldi	r31, 0x6A	; 106
     64c:	fa 95       	dec	r31
     64e:	f1 f7       	brne	.-4      	; 0x64c <ssd1306_init+0x56>
     650:	00 c0       	rjmp	.+0      	; 0x652 <ssd1306_init+0x5c>
	spi_flags_t spi_flags = 0;
	//board_spi_select_id_t spi_select_id = 0;
	
	//irqflags_t flags = cpu_irq_save();
	//*((uint8_t *)&PR.PRGEN + SYSCLK_PORT_D) &= ~PR_USART0_bm;
	PR.PRPD &= ~PR_USART0_bm;
     652:	e0 e7       	ldi	r30, 0x70	; 112
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	84 81       	ldd	r24, Z+4	; 0x04
     658:	8f 7e       	andi	r24, 0xEF	; 239
     65a:	84 83       	std	Z+4, r24	; 0x04
	
	//cpu_irq_restore(flags);
	
	usart_spi_options_emon_t opt;
	opt.baudrate=12000000;
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	9b e1       	ldi	r25, 0x1B	; 27
     660:	a7 eb       	ldi	r26, 0xB7	; 183
     662:	b0 e0       	ldi	r27, 0x00	; 0
     664:	89 83       	std	Y+1, r24	; 0x01
     666:	9a 83       	std	Y+2, r25	; 0x02
     668:	ab 83       	std	Y+3, r26	; 0x03
     66a:	bc 83       	std	Y+4, r27	; 0x04
	opt.spimode=spi_flags;
     66c:	1d 82       	std	Y+5, r1	; 0x05
	opt.data_order=0;
     66e:	1e 82       	std	Y+6, r1	; 0x06
	usart_init_spi(&USARTD0, &opt);
     670:	be 01       	movw	r22, r28
     672:	6f 5f       	subi	r22, 0xFF	; 255
     674:	7f 4f       	sbci	r23, 0xFF	; 255
     676:	80 ea       	ldi	r24, 0xA0	; 160
     678:	99 e0       	ldi	r25, 0x09	; 9
     67a:	0e 94 b8 02 	call	0x570	; 0x570 <usart_init_spi>
	

	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
     67e:	88 ea       	ldi	r24, 0xA8	; 168
     680:	0e 94 4a 02 	call	0x494	; 0x494 <ssd1306_write_command>
	ssd1306_write_command(0x1F);
     684:	8f e1       	ldi	r24, 0x1F	; 31
     686:	0e 94 4a 02 	call	0x494	; 0x494 <ssd1306_write_command>

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
     68a:	83 ed       	ldi	r24, 0xD3	; 211
     68c:	0e 94 4a 02 	call	0x494	; 0x494 <ssd1306_write_command>
	ssd1306_write_command(0x00);
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	0e 94 4a 02 	call	0x494	; 0x494 <ssd1306_write_command>

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(0x00));
     696:	80 e4       	ldi	r24, 0x40	; 64
     698:	0e 94 4a 02 	call	0x494	; 0x494 <ssd1306_write_command>

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
     69c:	81 ea       	ldi	r24, 0xA1	; 161
     69e:	0e 94 4a 02 	call	0x494	; 0x494 <ssd1306_write_command>

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
     6a2:	88 ec       	ldi	r24, 0xC8	; 200
     6a4:	0e 94 4a 02 	call	0x494	; 0x494 <ssd1306_write_command>

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
     6a8:	8a ed       	ldi	r24, 0xDA	; 218
     6aa:	0e 94 4a 02 	call	0x494	; 0x494 <ssd1306_write_command>
	ssd1306_write_command(0x02);
     6ae:	82 e0       	ldi	r24, 0x02	; 2
     6b0:	0e 94 4a 02 	call	0x494	; 0x494 <ssd1306_write_command>

	//ssd1306_set_contrast(0x8F);
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
     6b4:	81 e8       	ldi	r24, 0x81	; 129
     6b6:	0e 94 4a 02 	call	0x494	; 0x494 <ssd1306_write_command>
	ssd1306_write_command(0x8F);
     6ba:	8f e8       	ldi	r24, 0x8F	; 143
     6bc:	0e 94 4a 02 	call	0x494	; 0x494 <ssd1306_write_command>

		
	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
     6c0:	84 ea       	ldi	r24, 0xA4	; 164
     6c2:	0e 94 4a 02 	call	0x494	; 0x494 <ssd1306_write_command>

	//ssd1306_display_invert_disable();
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
     6c6:	86 ea       	ldi	r24, 0xA6	; 166
     6c8:	0e 94 4a 02 	call	0x494	; 0x494 <ssd1306_write_command>

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
     6cc:	85 ed       	ldi	r24, 0xD5	; 213
     6ce:	0e 94 4a 02 	call	0x494	; 0x494 <ssd1306_write_command>
	ssd1306_write_command(0x80);
     6d2:	80 e8       	ldi	r24, 0x80	; 128
     6d4:	0e 94 4a 02 	call	0x494	; 0x494 <ssd1306_write_command>

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
     6d8:	8d e8       	ldi	r24, 0x8D	; 141
     6da:	0e 94 4a 02 	call	0x494	; 0x494 <ssd1306_write_command>
	ssd1306_write_command(0x14);
     6de:	84 e1       	ldi	r24, 0x14	; 20
     6e0:	0e 94 4a 02 	call	0x494	; 0x494 <ssd1306_write_command>

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
     6e4:	8b ed       	ldi	r24, 0xDB	; 219
     6e6:	0e 94 4a 02 	call	0x494	; 0x494 <ssd1306_write_command>
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
     6ea:	80 e4       	ldi	r24, 0x40	; 64
     6ec:	0e 94 4a 02 	call	0x494	; 0x494 <ssd1306_write_command>

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
     6f0:	89 ed       	ldi	r24, 0xD9	; 217
     6f2:	0e 94 4a 02 	call	0x494	; 0x494 <ssd1306_write_command>
	ssd1306_write_command(0xF1);
     6f6:	81 ef       	ldi	r24, 0xF1	; 241
     6f8:	0e 94 4a 02 	call	0x494	; 0x494 <ssd1306_write_command>

	//ssd1306_display_on();
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
     6fc:	8f ea       	ldi	r24, 0xAF	; 175
     6fe:	0e 94 4a 02 	call	0x494	; 0x494 <ssd1306_write_command>
}
     702:	26 96       	adiw	r28, 0x06	; 6
     704:	cd bf       	out	0x3d, r28	; 61
     706:	de bf       	out	0x3e, r29	; 62
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	08 95       	ret

0000070e <ssd1306_write_text>:
/**
 * \brief Display text on OLED screen.
 * \param string String to display.
 */
void ssd1306_write_text(char *string)
{
     70e:	ef 92       	push	r14
     710:	ff 92       	push	r15
     712:	0f 93       	push	r16
     714:	1f 93       	push	r17
     716:	cf 93       	push	r28
	uint8_t *char_ptr;
	uint8_t i;

	while (*string != '\0') {
     718:	dc 01       	movw	r26, r24
     71a:	ec 91       	ld	r30, X
     71c:	ee 23       	and	r30, r30
     71e:	29 f1       	breq	.+74     	; 0x76a <ssd1306_write_text+0x5c>
     720:	7c 01       	movw	r14, r24
     722:	bf ef       	ldi	r27, 0xFF	; 255
     724:	eb 1a       	sub	r14, r27
     726:	fb 0a       	sbc	r15, r27
		if (*string < 0x7F) {
     728:	ef 37       	cpi	r30, 0x7F	; 127
     72a:	d0 f4       	brcc	.+52     	; 0x760 <ssd1306_write_text+0x52>
			char_ptr = font_table[*string - 32];
     72c:	f0 e0       	ldi	r31, 0x00	; 0
     72e:	ee 0f       	add	r30, r30
     730:	ff 1f       	adc	r31, r31
     732:	e5 57       	subi	r30, 0x75	; 117
     734:	fe 4d       	sbci	r31, 0xDE	; 222
     736:	00 81       	ld	r16, Z
     738:	11 81       	ldd	r17, Z+1	; 0x01
			for (i = 1; i <= char_ptr[0]; i++) {
     73a:	f8 01       	movw	r30, r16
     73c:	80 81       	ld	r24, Z
     73e:	88 23       	and	r24, r24
     740:	61 f0       	breq	.+24     	; 0x75a <ssd1306_write_text+0x4c>
     742:	c1 e0       	ldi	r28, 0x01	; 1
				ssd1306_write_data(char_ptr[i]);
     744:	f8 01       	movw	r30, r16
     746:	ec 0f       	add	r30, r28
     748:	f1 1d       	adc	r31, r1
     74a:	80 81       	ld	r24, Z
     74c:	0e 94 81 02 	call	0x502	; 0x502 <ssd1306_write_data>
	uint8_t i;

	while (*string != '\0') {
		if (*string < 0x7F) {
			char_ptr = font_table[*string - 32];
			for (i = 1; i <= char_ptr[0]; i++) {
     750:	cf 5f       	subi	r28, 0xFF	; 255
     752:	d8 01       	movw	r26, r16
     754:	9c 91       	ld	r25, X
     756:	9c 17       	cp	r25, r28
     758:	a8 f7       	brcc	.-22     	; 0x744 <ssd1306_write_text+0x36>
				ssd1306_write_data(char_ptr[i]);
			}
			ssd1306_write_data(0x00);
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	0e 94 81 02 	call	0x502	; 0x502 <ssd1306_write_data>
void ssd1306_write_text(char *string)
{
	uint8_t *char_ptr;
	uint8_t i;

	while (*string != '\0') {
     760:	d7 01       	movw	r26, r14
     762:	ed 91       	ld	r30, X+
     764:	7d 01       	movw	r14, r26
     766:	e1 11       	cpse	r30, r1
     768:	df cf       	rjmp	.-66     	; 0x728 <ssd1306_write_text+0x1a>
			}
			ssd1306_write_data(0x00);
		}
			string++;
	}
}
     76a:	cf 91       	pop	r28
     76c:	1f 91       	pop	r17
     76e:	0f 91       	pop	r16
     770:	ff 90       	pop	r15
     772:	ef 90       	pop	r14
     774:	08 95       	ret

00000776 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(uint8_t page, uint8_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     776:	20 e8       	ldi	r18, 0x80	; 128
     778:	82 9f       	mul	r24, r18
     77a:	c0 01       	movw	r24, r0
     77c:	11 24       	eor	r1, r1
     77e:	86 0f       	add	r24, r22
     780:	91 1d       	adc	r25, r1
     782:	e0 91 84 27 	lds	r30, 0x2784
     786:	f0 91 85 27 	lds	r31, 0x2785
     78a:	e8 0f       	add	r30, r24
     78c:	f9 1f       	adc	r31, r25
     78e:	40 83       	st	Z, r20
     790:	08 95       	ret

00000792 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(uint8_t page, uint8_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
     792:	20 e8       	ldi	r18, 0x80	; 128
     794:	82 9f       	mul	r24, r18
     796:	c0 01       	movw	r24, r0
     798:	11 24       	eor	r1, r1
     79a:	86 0f       	add	r24, r22
     79c:	91 1d       	adc	r25, r1
     79e:	e0 91 84 27 	lds	r30, 0x2784
     7a2:	f0 91 85 27 	lds	r31, 0x2785
     7a6:	e8 0f       	add	r30, r24
     7a8:	f9 1f       	adc	r31, r25
}
     7aa:	80 81       	ld	r24, Z
     7ac:	08 95       	ret

000007ae <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
 */
void gfx_mono_ssd1306_put_byte(uint8_t page, uint8_t column,
		uint8_t data, uint8_t force)
{
     7ae:	1f 93       	push	r17
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	18 2f       	mov	r17, r24
     7b6:	d6 2f       	mov	r29, r22
     7b8:	c4 2f       	mov	r28, r20
//#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
     7ba:	21 11       	cpse	r18, r1
     7bc:	04 c0       	rjmp	.+8      	; 0x7c6 <gfx_mono_ssd1306_put_byte+0x18>
     7be:	0e 94 c9 03 	call	0x792	; 0x792 <gfx_mono_framebuffer_get_byte>
     7c2:	8c 17       	cp	r24, r28
     7c4:	71 f0       	breq	.+28     	; 0x7e2 <gfx_mono_ssd1306_put_byte+0x34>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
     7c6:	4c 2f       	mov	r20, r28
     7c8:	6d 2f       	mov	r22, r29
     7ca:	81 2f       	mov	r24, r17
     7cc:	0e 94 bb 03 	call	0x776	; 0x776 <gfx_mono_framebuffer_put_byte>
//#endif

	ssd1306_set_page_address(page);
     7d0:	81 2f       	mov	r24, r17
     7d2:	0e 94 a3 02 	call	0x546	; 0x546 <ssd1306_set_page_address>
	ssd1306_set_column_address(column);
     7d6:	8d 2f       	mov	r24, r29
     7d8:	0e 94 a8 02 	call	0x550	; 0x550 <ssd1306_set_column_address>

	ssd1306_write_data(data);
     7dc:	8c 2f       	mov	r24, r28
     7de:	0e 94 81 02 	call	0x502	; 0x502 <ssd1306_write_data>
}
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	1f 91       	pop	r17
     7e8:	08 95       	ret

000007ea <esp8266_serial_init>:
 * @param chsize character size
 * @param clk2en enable double speed
 * @param mpcen enable multiprocessor communication
 */
void usart_config(USART_t *usart_unit,PORT_t *port_unit, USART_CMODE_t mode, USART_PMODE_t pmode, USART_CHSIZE_t chsize, uint8_t clk2xen, uint8_t mpcmen){
	usart_unit->CTRLB = USART_RXEN_bm | USART_TXEN_bm;
     7ea:	e0 ea       	ldi	r30, 0xA0	; 160
     7ec:	fa e0       	ldi	r31, 0x0A	; 10
     7ee:	88 e1       	ldi	r24, 0x18	; 24
     7f0:	84 83       	std	Z+4, r24	; 0x04
	usart_unit->CTRLB |= (clk2xen<<USART_CLK2X_bp) | (mpcmen<<USART_MPCM_bp);
     7f2:	84 81       	ldd	r24, Z+4	; 0x04
     7f4:	84 83       	std	Z+4, r24	; 0x04
	usart_unit->CTRLC = mode |pmode | chsize;
     7f6:	83 e0       	ldi	r24, 0x03	; 3
     7f8:	85 83       	std	Z+5, r24	; 0x05

	
	if( (usart_unit == &USARTC0) || (usart_unit == &USARTD0) || (usart_unit == &USARTE0) || (usart_unit == &USARTF0) ){
		port_unit->DIRSET = (1<<3);//USARTx0 TXD pin output
     7fa:	a0 e8       	ldi	r26, 0x80	; 128
     7fc:	b6 e0       	ldi	r27, 0x06	; 6
     7fe:	88 e0       	ldi	r24, 0x08	; 8
     800:	11 96       	adiw	r26, 0x01	; 1
     802:	8c 93       	st	X, r24
     804:	11 97       	sbiw	r26, 0x01	; 1
		port_unit->DIRCLR = (1<<2);//USARTx0 RXD pin input
     806:	84 e0       	ldi	r24, 0x04	; 4
     808:	12 96       	adiw	r26, 0x02	; 2
     80a:	8c 93       	st	X, r24
 * @param baud_rate
 * @param bscale_val
 */
void usart_baud(USART_t *usart, unsigned long baud_rate, int bscale_val){
	uint16_t bsel_val = BAUD_VALUE(baud_rate,bscale_val);
	usart->BAUDCTRLA = bsel_val;
     80c:	81 e8       	ldi	r24, 0x81	; 129
     80e:	86 83       	std	Z+6, r24	; 0x06
	usart->BAUDCTRLB = (bscale_val<<USART_BSCALE_gp) | (bsel_val>>8);
     810:	86 ed       	ldi	r24, 0xD6	; 214
     812:	87 83       	std	Z+7, r24	; 0x07
 * @param txcintlvl
 * @param dreintlvl
 */
void usart_set_interrupt_level(USART_t *usart, USART_RXCINTLVL_t rxcintlvl, USART_TXCINTLVL_t txcintlvl, USART_DREINTLVL_t dreintlvl){
	//usart->CTRLA = (rxcintlvl<<USART_RXCINTLVL_gp) | (txcintlvl<<USART_TXCINTLVL_gp) | (dreintlvl<<USART_DREINTLVL_gp);
	usart->CTRLA = (rxcintlvl) | (txcintlvl) | (dreintlvl);
     814:	80 e3       	ldi	r24, 0x30	; 48
     816:	83 83       	std	Z+3, r24	; 0x03
     818:	08 95       	ret

0000081a <esp8266_rx_buff_receive>:
// 		esp8266_rx_buff_read_p = esp8266_rx_buff;
// 		esp8266_buff_receive_complete = 0;
// 	}
// }

void esp8266_rx_buff_receive(char *data){
     81a:	0f 93       	push	r16
     81c:	1f 93       	push	r17
	esp8266_rx_buff_charcount=0;
     81e:	10 92 8a 29 	sts	0x298A, r1
     822:	10 92 8b 29 	sts	0x298B, r1
	esp8266_rx_timesnap = 0;
     826:	10 92 7e 27 	sts	0x277E, r1
     82a:	10 92 7f 27 	sts	0x277F, r1
     82e:	10 92 80 27 	sts	0x2780, r1
     832:	10 92 81 27 	sts	0x2781, r1
	esp8266_rx_buff_write_p = data;
     836:	80 93 89 22 	sts	0x2289, r24
     83a:	90 93 8a 22 	sts	0x228A, r25
	esp8266_buff_write_enabled = 1;
     83e:	21 e0       	ldi	r18, 0x01	; 1
     840:	20 93 83 27 	sts	0x2783, r18
	esp8266_buff_receive_complete = 0;
     844:	10 92 82 27 	sts	0x2782, r1
	
	while(esp8266_rx_timesnap == 0);
     848:	40 91 7e 27 	lds	r20, 0x277E
     84c:	50 91 7f 27 	lds	r21, 0x277F
     850:	60 91 80 27 	lds	r22, 0x2780
     854:	70 91 81 27 	lds	r23, 0x2781
     858:	45 2b       	or	r20, r21
     85a:	46 2b       	or	r20, r22
     85c:	47 2b       	or	r20, r23
     85e:	a1 f3       	breq	.-24     	; 0x848 <esp8266_rx_buff_receive+0x2e>
	
	while(rtc_tick - esp8266_rx_timesnap  <= 5){;}
     860:	40 91 86 29 	lds	r20, 0x2986
     864:	50 91 87 29 	lds	r21, 0x2987
     868:	60 91 88 29 	lds	r22, 0x2988
     86c:	70 91 89 29 	lds	r23, 0x2989
     870:	00 91 7e 27 	lds	r16, 0x277E
     874:	10 91 7f 27 	lds	r17, 0x277F
     878:	20 91 80 27 	lds	r18, 0x2780
     87c:	30 91 81 27 	lds	r19, 0x2781
     880:	40 1b       	sub	r20, r16
     882:	51 0b       	sbc	r21, r17
     884:	62 0b       	sbc	r22, r18
     886:	73 0b       	sbc	r23, r19
     888:	46 30       	cpi	r20, 0x06	; 6
     88a:	51 05       	cpc	r21, r1
     88c:	61 05       	cpc	r22, r1
     88e:	71 05       	cpc	r23, r1
     890:	38 f3       	brcs	.-50     	; 0x860 <esp8266_rx_buff_receive+0x46>
	
	
	esp8266_buff_write_enabled = 0;
     892:	10 92 83 27 	sts	0x2783, r1
	esp8266_buff_receive_complete = 1;
     896:	21 e0       	ldi	r18, 0x01	; 1
     898:	20 93 82 27 	sts	0x2782, r18
	//*esp8266_rx_buff_write_p = '\0';
	data[esp8266_rx_buff_charcount] = '\0';
     89c:	e0 91 8a 29 	lds	r30, 0x298A
     8a0:	f0 91 8b 29 	lds	r31, 0x298B
     8a4:	e8 0f       	add	r30, r24
     8a6:	f9 1f       	adc	r31, r25
     8a8:	10 82       	st	Z, r1

	//
	
	//esp8266_rx_buff_read(data);
}
     8aa:	1f 91       	pop	r17
     8ac:	0f 91       	pop	r16
     8ae:	08 95       	ret

000008b0 <esp8266_send_receive_timeout>:

void esp8266_send_receive_timeout(char *datain, char *dataout, rtctick_t timeout_ms){
     8b0:	af 92       	push	r10
     8b2:	bf 92       	push	r11
     8b4:	cf 92       	push	r12
     8b6:	df 92       	push	r13
     8b8:	ef 92       	push	r14
     8ba:	ff 92       	push	r15
     8bc:	0f 93       	push	r16
     8be:	1f 93       	push	r17
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	cd b7       	in	r28, 0x3d	; 61
     8c6:	de b7       	in	r29, 0x3e	; 62
     8c8:	28 97       	sbiw	r28, 0x08	; 8
     8ca:	cd bf       	out	0x3d, r28	; 61
     8cc:	de bf       	out	0x3e, r29	; 62
     8ce:	6c 01       	movw	r12, r24
     8d0:	8b 01       	movw	r16, r22
     8d2:	2d 83       	std	Y+5, r18	; 0x05
     8d4:	3e 83       	std	Y+6, r19	; 0x06
     8d6:	4f 83       	std	Y+7, r20	; 0x07
     8d8:	58 87       	std	Y+8, r21	; 0x08
	esp8266_rx_buff_charcount=0;
     8da:	10 92 8a 29 	sts	0x298A, r1
     8de:	10 92 8b 29 	sts	0x298B, r1
	esp8266_rx_timesnap = 0;
     8e2:	10 92 7e 27 	sts	0x277E, r1
     8e6:	10 92 7f 27 	sts	0x277F, r1
     8ea:	10 92 80 27 	sts	0x2780, r1
     8ee:	10 92 81 27 	sts	0x2781, r1
	esp8266_rx_buff_write_p = dataout;
     8f2:	60 93 89 22 	sts	0x2289, r22
     8f6:	70 93 8a 22 	sts	0x228A, r23
	esp8266_buff_write_enabled = 1;
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	80 93 83 27 	sts	0x2783, r24
	esp8266_buff_receive_complete = 0;
     900:	10 92 82 27 	sts	0x2782, r1
     904:	56 01       	movw	r10, r12

		for(int i=0;i<strlen(datain);i++){
     906:	e1 2c       	mov	r14, r1
     908:	f1 2c       	mov	r15, r1
     90a:	0a c0       	rjmp	.+20     	; 0x920 <esp8266_send_receive_timeout+0x70>
			ESP8266_UART_Putchar(*(datain + i));
     90c:	f5 01       	movw	r30, r10
     90e:	61 91       	ld	r22, Z+
     910:	5f 01       	movw	r10, r30
     912:	80 ea       	ldi	r24, 0xA0	; 160
     914:	9a e0       	ldi	r25, 0x0A	; 10
     916:	0e 94 05 02 	call	0x40a	; 0x40a <usart_transmit_by_val>
	esp8266_rx_timesnap = 0;
	esp8266_rx_buff_write_p = dataout;
	esp8266_buff_write_enabled = 1;
	esp8266_buff_receive_complete = 0;

		for(int i=0;i<strlen(datain);i++){
     91a:	ff ef       	ldi	r31, 0xFF	; 255
     91c:	ef 1a       	sub	r14, r31
     91e:	ff 0a       	sbc	r15, r31
     920:	f6 01       	movw	r30, r12
     922:	01 90       	ld	r0, Z+
     924:	00 20       	and	r0, r0
     926:	e9 f7       	brne	.-6      	; 0x922 <esp8266_send_receive_timeout+0x72>
     928:	31 97       	sbiw	r30, 0x01	; 1
     92a:	ec 19       	sub	r30, r12
     92c:	fd 09       	sbc	r31, r13
     92e:	ee 16       	cp	r14, r30
     930:	ff 06       	cpc	r15, r31
     932:	60 f3       	brcs	.-40     	; 0x90c <esp8266_send_receive_timeout+0x5c>
			ESP8266_UART_Putchar(*(datain + i));
		}
		ESP8266_UART_Putchar('\r');
     934:	6d e0       	ldi	r22, 0x0D	; 13
     936:	80 ea       	ldi	r24, 0xA0	; 160
     938:	9a e0       	ldi	r25, 0x0A	; 10
     93a:	0e 94 05 02 	call	0x40a	; 0x40a <usart_transmit_by_val>
		ESP8266_UART_Putchar('\n');
     93e:	6a e0       	ldi	r22, 0x0A	; 10
     940:	80 ea       	ldi	r24, 0xA0	; 160
     942:	9a e0       	ldi	r25, 0x0A	; 10
     944:	0e 94 05 02 	call	0x40a	; 0x40a <usart_transmit_by_val>

	rtctick_t esp8266_rx_timeout_timesnap = rtc_tick;
     948:	80 91 86 29 	lds	r24, 0x2986
     94c:	90 91 87 29 	lds	r25, 0x2987
     950:	a0 91 88 29 	lds	r26, 0x2988
     954:	b0 91 89 29 	lds	r27, 0x2989
     958:	89 83       	std	Y+1, r24	; 0x01
     95a:	9a 83       	std	Y+2, r25	; 0x02
     95c:	ab 83       	std	Y+3, r26	; 0x03
     95e:	bc 83       	std	Y+4, r27	; 0x04
	while(esp8266_rx_timesnap == 0);
     960:	80 91 7e 27 	lds	r24, 0x277E
     964:	90 91 7f 27 	lds	r25, 0x277F
     968:	a0 91 80 27 	lds	r26, 0x2780
     96c:	b0 91 81 27 	lds	r27, 0x2781
     970:	89 2b       	or	r24, r25
     972:	8a 2b       	or	r24, r26
     974:	8b 2b       	or	r24, r27
     976:	a1 f3       	breq	.-24     	; 0x960 <esp8266_send_receive_timeout+0xb0>
     978:	19 c0       	rjmp	.+50     	; 0x9ac <esp8266_send_receive_timeout+0xfc>

	while(rtc_tick - esp8266_rx_timeout_timesnap <= timeout_ms){
		while(rtc_tick - esp8266_rx_timesnap  <= rtc_ms_ticks(100)){;}
     97a:	80 91 86 29 	lds	r24, 0x2986
     97e:	90 91 87 29 	lds	r25, 0x2987
     982:	a0 91 88 29 	lds	r26, 0x2988
     986:	b0 91 89 29 	lds	r27, 0x2989
     98a:	40 91 7e 27 	lds	r20, 0x277E
     98e:	50 91 7f 27 	lds	r21, 0x277F
     992:	60 91 80 27 	lds	r22, 0x2780
     996:	70 91 81 27 	lds	r23, 0x2781
     99a:	84 1b       	sub	r24, r20
     99c:	95 0b       	sbc	r25, r21
     99e:	a6 0b       	sbc	r26, r22
     9a0:	b7 0b       	sbc	r27, r23
     9a2:	87 36       	cpi	r24, 0x67	; 103
     9a4:	91 05       	cpc	r25, r1
     9a6:	a1 05       	cpc	r26, r1
     9a8:	b1 05       	cpc	r27, r1
     9aa:	38 f3       	brcs	.-50     	; 0x97a <esp8266_send_receive_timeout+0xca>
		ESP8266_UART_Putchar('\n');

	rtctick_t esp8266_rx_timeout_timesnap = rtc_tick;
	while(esp8266_rx_timesnap == 0);

	while(rtc_tick - esp8266_rx_timeout_timesnap <= timeout_ms){
     9ac:	80 91 86 29 	lds	r24, 0x2986
     9b0:	90 91 87 29 	lds	r25, 0x2987
     9b4:	a0 91 88 29 	lds	r26, 0x2988
     9b8:	b0 91 89 29 	lds	r27, 0x2989
     9bc:	c9 80       	ldd	r12, Y+1	; 0x01
     9be:	da 80       	ldd	r13, Y+2	; 0x02
     9c0:	eb 80       	ldd	r14, Y+3	; 0x03
     9c2:	fc 80       	ldd	r15, Y+4	; 0x04
     9c4:	4d 81       	ldd	r20, Y+5	; 0x05
     9c6:	5e 81       	ldd	r21, Y+6	; 0x06
     9c8:	6f 81       	ldd	r22, Y+7	; 0x07
     9ca:	78 85       	ldd	r23, Y+8	; 0x08
     9cc:	8c 19       	sub	r24, r12
     9ce:	9d 09       	sbc	r25, r13
     9d0:	ae 09       	sbc	r26, r14
     9d2:	bf 09       	sbc	r27, r15
     9d4:	48 17       	cp	r20, r24
     9d6:	59 07       	cpc	r21, r25
     9d8:	6a 07       	cpc	r22, r26
     9da:	7b 07       	cpc	r23, r27
     9dc:	70 f6       	brcc	.-100    	; 0x97a <esp8266_send_receive_timeout+0xca>
		while(rtc_tick - esp8266_rx_timesnap  <= rtc_ms_ticks(100)){;}
	}
	

	esp8266_buff_write_enabled = 0;
     9de:	10 92 83 27 	sts	0x2783, r1
	esp8266_buff_receive_complete = 1;
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	80 93 82 27 	sts	0x2782, r24
	//*esp8266_rx_buff_write_p = '\0';
	dataout[esp8266_rx_buff_charcount] = '\0';
     9e8:	e0 91 8a 29 	lds	r30, 0x298A
     9ec:	f0 91 8b 29 	lds	r31, 0x298B
     9f0:	e0 0f       	add	r30, r16
     9f2:	f1 1f       	adc	r31, r17
     9f4:	10 82       	st	Z, r1
}
     9f6:	28 96       	adiw	r28, 0x08	; 8
     9f8:	cd bf       	out	0x3d, r28	; 61
     9fa:	de bf       	out	0x3e, r29	; 62
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	1f 91       	pop	r17
     a02:	0f 91       	pop	r16
     a04:	ff 90       	pop	r15
     a06:	ef 90       	pop	r14
     a08:	df 90       	pop	r13
     a0a:	cf 90       	pop	r12
     a0c:	bf 90       	pop	r11
     a0e:	af 90       	pop	r10
     a10:	08 95       	ret

00000a12 <esp8266_send_receive>:





void esp8266_send_receive(char *datain, char *dataout){
     a12:	cf 92       	push	r12
     a14:	df 92       	push	r13
     a16:	ef 92       	push	r14
     a18:	ff 92       	push	r15
     a1a:	0f 93       	push	r16
     a1c:	1f 93       	push	r17
     a1e:	cf 93       	push	r28
     a20:	df 93       	push	r29
     a22:	8c 01       	movw	r16, r24
     a24:	7b 01       	movw	r14, r22
	esp8266_rx_buff_charcount=0;
     a26:	10 92 8a 29 	sts	0x298A, r1
     a2a:	10 92 8b 29 	sts	0x298B, r1
	esp8266_rx_timesnap = 0;
     a2e:	10 92 7e 27 	sts	0x277E, r1
     a32:	10 92 7f 27 	sts	0x277F, r1
     a36:	10 92 80 27 	sts	0x2780, r1
     a3a:	10 92 81 27 	sts	0x2781, r1
	esp8266_rx_buff_write_p = dataout;
     a3e:	60 93 89 22 	sts	0x2289, r22
     a42:	70 93 8a 22 	sts	0x228A, r23
	esp8266_buff_write_enabled = 1;
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	80 93 83 27 	sts	0x2783, r24
	esp8266_buff_receive_complete = 0;
     a4c:	10 92 82 27 	sts	0x2782, r1
     a50:	e8 01       	movw	r28, r16

		for(int i=0;i<strlen(datain);i++){
     a52:	c1 2c       	mov	r12, r1
     a54:	d1 2c       	mov	r13, r1
     a56:	08 c0       	rjmp	.+16     	; 0xa68 <esp8266_send_receive+0x56>
			ESP8266_UART_Putchar(*(datain + i));
     a58:	69 91       	ld	r22, Y+
     a5a:	80 ea       	ldi	r24, 0xA0	; 160
     a5c:	9a e0       	ldi	r25, 0x0A	; 10
     a5e:	0e 94 05 02 	call	0x40a	; 0x40a <usart_transmit_by_val>
	esp8266_rx_timesnap = 0;
	esp8266_rx_buff_write_p = dataout;
	esp8266_buff_write_enabled = 1;
	esp8266_buff_receive_complete = 0;

		for(int i=0;i<strlen(datain);i++){
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	c8 1a       	sub	r12, r24
     a66:	d8 0a       	sbc	r13, r24
     a68:	f8 01       	movw	r30, r16
     a6a:	01 90       	ld	r0, Z+
     a6c:	00 20       	and	r0, r0
     a6e:	e9 f7       	brne	.-6      	; 0xa6a <esp8266_send_receive+0x58>
     a70:	31 97       	sbiw	r30, 0x01	; 1
     a72:	e0 1b       	sub	r30, r16
     a74:	f1 0b       	sbc	r31, r17
     a76:	ce 16       	cp	r12, r30
     a78:	df 06       	cpc	r13, r31
     a7a:	70 f3       	brcs	.-36     	; 0xa58 <esp8266_send_receive+0x46>
			ESP8266_UART_Putchar(*(datain + i));
		}
		ESP8266_UART_Putchar('\r');
     a7c:	6d e0       	ldi	r22, 0x0D	; 13
     a7e:	80 ea       	ldi	r24, 0xA0	; 160
     a80:	9a e0       	ldi	r25, 0x0A	; 10
     a82:	0e 94 05 02 	call	0x40a	; 0x40a <usart_transmit_by_val>
		ESP8266_UART_Putchar('\n');
     a86:	6a e0       	ldi	r22, 0x0A	; 10
     a88:	80 ea       	ldi	r24, 0xA0	; 160
     a8a:	9a e0       	ldi	r25, 0x0A	; 10
     a8c:	0e 94 05 02 	call	0x40a	; 0x40a <usart_transmit_by_val>


	while(esp8266_rx_timesnap == 0);
     a90:	80 91 7e 27 	lds	r24, 0x277E
     a94:	90 91 7f 27 	lds	r25, 0x277F
     a98:	a0 91 80 27 	lds	r26, 0x2780
     a9c:	b0 91 81 27 	lds	r27, 0x2781
     aa0:	89 2b       	or	r24, r25
     aa2:	8a 2b       	or	r24, r26
     aa4:	8b 2b       	or	r24, r27
     aa6:	a1 f3       	breq	.-24     	; 0xa90 <esp8266_send_receive+0x7e>

	while(rtc_tick - esp8266_rx_timesnap  <= rtc_ms_ticks(100)){;}
     aa8:	80 91 86 29 	lds	r24, 0x2986
     aac:	90 91 87 29 	lds	r25, 0x2987
     ab0:	a0 91 88 29 	lds	r26, 0x2988
     ab4:	b0 91 89 29 	lds	r27, 0x2989
     ab8:	40 91 7e 27 	lds	r20, 0x277E
     abc:	50 91 7f 27 	lds	r21, 0x277F
     ac0:	60 91 80 27 	lds	r22, 0x2780
     ac4:	70 91 81 27 	lds	r23, 0x2781
     ac8:	84 1b       	sub	r24, r20
     aca:	95 0b       	sbc	r25, r21
     acc:	a6 0b       	sbc	r26, r22
     ace:	b7 0b       	sbc	r27, r23
     ad0:	87 36       	cpi	r24, 0x67	; 103
     ad2:	91 05       	cpc	r25, r1
     ad4:	a1 05       	cpc	r26, r1
     ad6:	b1 05       	cpc	r27, r1
     ad8:	38 f3       	brcs	.-50     	; 0xaa8 <esp8266_send_receive+0x96>


	esp8266_buff_write_enabled = 0;
     ada:	10 92 83 27 	sts	0x2783, r1
	esp8266_buff_receive_complete = 1;
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	80 93 82 27 	sts	0x2782, r24
	//*esp8266_rx_buff_write_p = '\0';
	dataout[esp8266_rx_buff_charcount] = '\0';
     ae4:	80 91 8a 29 	lds	r24, 0x298A
     ae8:	90 91 8b 29 	lds	r25, 0x298B
     aec:	e7 01       	movw	r28, r14
     aee:	c8 0f       	add	r28, r24
     af0:	d9 1f       	adc	r29, r25
     af2:	18 82       	st	Y, r1
}
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	1f 91       	pop	r17
     afa:	0f 91       	pop	r16
     afc:	ff 90       	pop	r15
     afe:	ef 90       	pop	r14
     b00:	df 90       	pop	r13
     b02:	cf 90       	pop	r12
     b04:	08 95       	ret

00000b06 <__vector_58>:

ISR(USARTE0_RXC_vect){
     b06:	1f 92       	push	r1
     b08:	0f 92       	push	r0
     b0a:	0f b6       	in	r0, 0x3f	; 63
     b0c:	0f 92       	push	r0
     b0e:	11 24       	eor	r1, r1
     b10:	0b b6       	in	r0, 0x3b	; 59
     b12:	0f 92       	push	r0
     b14:	8f 93       	push	r24
     b16:	9f 93       	push	r25
     b18:	af 93       	push	r26
     b1a:	bf 93       	push	r27
     b1c:	ef 93       	push	r30
     b1e:	ff 93       	push	r31
	
	if(esp8266_buff_write_enabled){
     b20:	80 91 83 27 	lds	r24, 0x2783
     b24:	88 23       	and	r24, r24
     b26:	39 f1       	breq	.+78     	; 0xb76 <__vector_58+0x70>
		*(esp8266_rx_buff_write_p++) = USART_GetChar(&USARTE0);
     b28:	e0 91 89 22 	lds	r30, 0x2289
     b2c:	f0 91 8a 22 	lds	r31, 0x228A
     b30:	cf 01       	movw	r24, r30
     b32:	01 96       	adiw	r24, 0x01	; 1
     b34:	80 93 89 22 	sts	0x2289, r24
     b38:	90 93 8a 22 	sts	0x228A, r25
     b3c:	80 91 a0 0a 	lds	r24, 0x0AA0
     b40:	80 83       	st	Z, r24
		esp8266_rx_timesnap = rtc_tick;
     b42:	80 91 86 29 	lds	r24, 0x2986
     b46:	90 91 87 29 	lds	r25, 0x2987
     b4a:	a0 91 88 29 	lds	r26, 0x2988
     b4e:	b0 91 89 29 	lds	r27, 0x2989
     b52:	80 93 7e 27 	sts	0x277E, r24
     b56:	90 93 7f 27 	sts	0x277F, r25
     b5a:	a0 93 80 27 	sts	0x2780, r26
     b5e:	b0 93 81 27 	sts	0x2781, r27
		esp8266_rx_buff_charcount++;
     b62:	80 91 8a 29 	lds	r24, 0x298A
     b66:	90 91 8b 29 	lds	r25, 0x298B
     b6a:	01 96       	adiw	r24, 0x01	; 1
     b6c:	80 93 8a 29 	sts	0x298A, r24
     b70:	90 93 8b 29 	sts	0x298B, r25
     b74:	02 c0       	rjmp	.+4      	; 0xb7a <__vector_58+0x74>
	}
	else{
		USART_GetChar(&USARTE0);
     b76:	80 91 a0 0a 	lds	r24, 0x0AA0
	
	
	//esp8266_rx_timesnap = rtc_tick;
	
	
}
     b7a:	ff 91       	pop	r31
     b7c:	ef 91       	pop	r30
     b7e:	bf 91       	pop	r27
     b80:	af 91       	pop	r26
     b82:	9f 91       	pop	r25
     b84:	8f 91       	pop	r24
     b86:	0f 90       	pop	r0
     b88:	0b be       	out	0x3b, r0	; 59
     b8a:	0f 90       	pop	r0
     b8c:	0f be       	out	0x3f, r0	; 63
     b8e:	0f 90       	pop	r0
     b90:	1f 90       	pop	r1
     b92:	18 95       	reti

00000b94 <esp8266_getmode>:

		
// 	
}

int esp8266_getmode(){
     b94:	ef 92       	push	r14
     b96:	ff 92       	push	r15
     b98:	0f 93       	push	r16
     b9a:	1f 93       	push	r17
     b9c:	cf 93       	push	r28
     b9e:	df 93       	push	r29
     ba0:	cd b7       	in	r28, 0x3d	; 61
     ba2:	de b7       	in	r29, 0x3e	; 62
     ba4:	ca 57       	subi	r28, 0x7A	; 122
     ba6:	d1 09       	sbc	r29, r1
     ba8:	cd bf       	out	0x3d, r28	; 61
     baa:	de bf       	out	0x3e, r29	; 62

	char cmd[50];
	char data[50];
	sprintf(cmd,"print(wifi.getmode())");
     bac:	86 e1       	ldi	r24, 0x16	; 22
     bae:	e8 eb       	ldi	r30, 0xB8	; 184
     bb0:	f2 e2       	ldi	r31, 0x22	; 34
     bb2:	de 01       	movw	r26, r28
     bb4:	11 96       	adiw	r26, 0x01	; 1
     bb6:	01 90       	ld	r0, Z+
     bb8:	0d 92       	st	X+, r0
     bba:	8a 95       	dec	r24
     bbc:	e1 f7       	brne	.-8      	; 0xbb6 <esp8266_getmode+0x22>
	//esp8266_send_receive(cmd,NULL);
	//esp8266_rx_buff_receive_timeout(500,data);


	//printf("%s",cmd);
	esp8266_send_receive(cmd,data);
     bbe:	7e 01       	movw	r14, r28
     bc0:	83 e3       	ldi	r24, 0x33	; 51
     bc2:	e8 0e       	add	r14, r24
     bc4:	f1 1c       	adc	r15, r1
     bc6:	b7 01       	movw	r22, r14
     bc8:	ce 01       	movw	r24, r28
     bca:	01 96       	adiw	r24, 0x01	; 1
     bcc:	0e 94 09 05 	call	0xa12	; 0xa12 <esp8266_send_receive>
	//esp8266_rx_buff_receive_timeout(200,data);
	printf("\n%s",data);
     bd0:	ff 92       	push	r15
     bd2:	ef 92       	push	r14
     bd4:	8e ec       	ldi	r24, 0xCE	; 206
     bd6:	92 e2       	ldi	r25, 0x22	; 34
     bd8:	9f 93       	push	r25
     bda:	8f 93       	push	r24
     bdc:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <printf>
	

	int myargc;
	char *cmd_args[10];
	tokenize(data,&myargc,"\n", 10, cmd_args);
     be0:	8e 01       	movw	r16, r28
     be2:	09 59       	subi	r16, 0x99	; 153
     be4:	1f 4f       	sbci	r17, 0xFF	; 255
     be6:	2a e0       	ldi	r18, 0x0A	; 10
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	47 e5       	ldi	r20, 0x57	; 87
     bec:	54 e2       	ldi	r21, 0x24	; 36
     bee:	be 01       	movw	r22, r28
     bf0:	6b 59       	subi	r22, 0x9B	; 155
     bf2:	7f 4f       	sbci	r23, 0xFF	; 255
     bf4:	c7 01       	movw	r24, r14
     bf6:	0e 94 25 01 	call	0x24a	; 0x24a <tokenize>
// 
// 	for(int i=0;i<myargc;i++){
// 		printf("the token : %d is -> %s\n",i,cmd_args[i]);
// 	}

	return atoi(cmd_args[1]);
     bfa:	ab 96       	adiw	r28, 0x2b	; 43
     bfc:	8e ad       	ldd	r24, Y+62	; 0x3e
     bfe:	9f ad       	ldd	r25, Y+63	; 0x3f
     c00:	ab 97       	sbiw	r28, 0x2b	; 43
     c02:	0e 94 94 0b 	call	0x1728	; 0x1728 <atoi>
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
     c0c:	0f 90       	pop	r0
}
     c0e:	c6 58       	subi	r28, 0x86	; 134
     c10:	df 4f       	sbci	r29, 0xFF	; 255
     c12:	cd bf       	out	0x3d, r28	; 61
     c14:	de bf       	out	0x3e, r29	; 62
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
     c1a:	1f 91       	pop	r17
     c1c:	0f 91       	pop	r16
     c1e:	ff 90       	pop	r15
     c20:	ef 90       	pop	r14
     c22:	08 95       	ret

00000c24 <esp8266_setmode>:
	int RSSI;//signal strength
	esp8266_AP_auth_mode_t auth_mode;
	int channel;
} esp8266_available_AP_t;

void esp8266_setmode(esp8266_wifi_mode_t mode){
     c24:	ef 92       	push	r14
     c26:	ff 92       	push	r15
     c28:	1f 93       	push	r17
     c2a:	cf 93       	push	r28
     c2c:	df 93       	push	r29
     c2e:	cd b7       	in	r28, 0x3d	; 61
     c30:	de b7       	in	r29, 0x3e	; 62
     c32:	c4 56       	subi	r28, 0x64	; 100
     c34:	d1 09       	sbc	r29, r1
     c36:	cd bf       	out	0x3d, r28	; 61
     c38:	de bf       	out	0x3e, r29	; 62
	char modestr[10];
	char cmd[40];
	char data[50];

	if(mode != ESP8266_WIFI_MODE_NULLMODE){
     c3a:	88 23       	and	r24, r24
     c3c:	09 f4       	brne	.+2      	; 0xc40 <esp8266_setmode+0x1c>
     c3e:	54 c0       	rjmp	.+168    	; 0xce8 <esp8266_setmode+0xc4>
		switch(mode){
     c40:	82 30       	cpi	r24, 0x02	; 2
     c42:	71 f0       	breq	.+28     	; 0xc60 <esp8266_setmode+0x3c>
     c44:	83 30       	cpi	r24, 0x03	; 3
     c46:	b1 f0       	breq	.+44     	; 0xc74 <esp8266_setmode+0x50>
     c48:	81 30       	cpi	r24, 0x01	; 1
     c4a:	e9 f4       	brne	.+58     	; 0xc86 <esp8266_setmode+0x62>
			case ESP8266_WIFI_MODE_STATION : sprintf(modestr,"STATION");break;
     c4c:	98 e0       	ldi	r25, 0x08	; 8
     c4e:	e2 ed       	ldi	r30, 0xD2	; 210
     c50:	f2 e2       	ldi	r31, 0x22	; 34
     c52:	de 01       	movw	r26, r28
     c54:	11 96       	adiw	r26, 0x01	; 1
     c56:	01 90       	ld	r0, Z+
     c58:	0d 92       	st	X+, r0
     c5a:	9a 95       	dec	r25
     c5c:	e1 f7       	brne	.-8      	; 0xc56 <esp8266_setmode+0x32>
     c5e:	13 c0       	rjmp	.+38     	; 0xc86 <esp8266_setmode+0x62>
			case ESP8266_WIFI_MODE_SOFTAP : sprintf(modestr,"SOFTAP");break;
     c60:	97 e0       	ldi	r25, 0x07	; 7
     c62:	ea ed       	ldi	r30, 0xDA	; 218
     c64:	f2 e2       	ldi	r31, 0x22	; 34
     c66:	de 01       	movw	r26, r28
     c68:	11 96       	adiw	r26, 0x01	; 1
     c6a:	01 90       	ld	r0, Z+
     c6c:	0d 92       	st	X+, r0
     c6e:	9a 95       	dec	r25
     c70:	e1 f7       	brne	.-8      	; 0xc6a <esp8266_setmode+0x46>
     c72:	09 c0       	rjmp	.+18     	; 0xc86 <esp8266_setmode+0x62>
			case ESP8266_WIFI_MODE_STATIONAP : sprintf(modestr,"STATIONAP");break;
     c74:	9a e0       	ldi	r25, 0x0A	; 10
     c76:	ed e2       	ldi	r30, 0x2D	; 45
     c78:	f3 e2       	ldi	r31, 0x23	; 35
     c7a:	de 01       	movw	r26, r28
     c7c:	11 96       	adiw	r26, 0x01	; 1
     c7e:	01 90       	ld	r0, Z+
     c80:	0d 92       	st	X+, r0
     c82:	9a 95       	dec	r25
     c84:	e1 f7       	brne	.-8      	; 0xc7e <esp8266_setmode+0x5a>
     c86:	18 2f       	mov	r17, r24
			//case ESP8266_WIFI_MODE_NULLMODE : sprintf(modestr,"NULLMODE");break;
			default:break;
		}
		
		sprintf(cmd,"wifi.setmode(wifi.%s)",modestr);
     c88:	ce 01       	movw	r24, r28
     c8a:	01 96       	adiw	r24, 0x01	; 1
     c8c:	9f 93       	push	r25
     c8e:	8f 93       	push	r24
     c90:	81 ee       	ldi	r24, 0xE1	; 225
     c92:	92 e2       	ldi	r25, 0x22	; 34
     c94:	9f 93       	push	r25
     c96:	8f 93       	push	r24
     c98:	7e 01       	movw	r14, r28
     c9a:	8b e0       	ldi	r24, 0x0B	; 11
     c9c:	e8 0e       	add	r14, r24
     c9e:	f1 1c       	adc	r15, r1
     ca0:	ff 92       	push	r15
     ca2:	ef 92       	push	r14
     ca4:	0e 94 39 0c 	call	0x1872	; 0x1872 <sprintf>
		esp8266_send_receive_timeout(cmd,data,2000);
     ca8:	20 ed       	ldi	r18, 0xD0	; 208
     caa:	37 e0       	ldi	r19, 0x07	; 7
     cac:	40 e0       	ldi	r20, 0x00	; 0
     cae:	50 e0       	ldi	r21, 0x00	; 0
     cb0:	be 01       	movw	r22, r28
     cb2:	6d 5c       	subi	r22, 0xCD	; 205
     cb4:	7f 4f       	sbci	r23, 0xFF	; 255
     cb6:	c7 01       	movw	r24, r14
     cb8:	0e 94 58 04 	call	0x8b0	; 0x8b0 <esp8266_send_receive_timeout>
		
		if(esp8266_getmode() == mode){
     cbc:	0e 94 ca 05 	call	0xb94	; 0xb94 <esp8266_getmode>
     cc0:	21 2f       	mov	r18, r17
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	82 17       	cp	r24, r18
     cd2:	93 07       	cpc	r25, r19
     cd4:	29 f4       	brne	.+10     	; 0xce0 <esp8266_setmode+0xbc>
			printf("walla you are doing great\n");
     cd6:	87 ef       	ldi	r24, 0xF7	; 247
     cd8:	92 e2       	ldi	r25, 0x22	; 34
     cda:	0e 94 09 0c 	call	0x1812	; 0x1812 <puts>
     cde:	04 c0       	rjmp	.+8      	; 0xce8 <esp8266_setmode+0xc4>
		}
		else{
			printf("something is really screwed\n");
     ce0:	81 e1       	ldi	r24, 0x11	; 17
     ce2:	93 e2       	ldi	r25, 0x23	; 35
     ce4:	0e 94 09 0c 	call	0x1812	; 0x1812 <puts>
	}


		
// 	
}
     ce8:	cc 59       	subi	r28, 0x9C	; 156
     cea:	df 4f       	sbci	r29, 0xFF	; 255
     cec:	cd bf       	out	0x3d, r28	; 61
     cee:	de bf       	out	0x3e, r29	; 62
     cf0:	df 91       	pop	r29
     cf2:	cf 91       	pop	r28
     cf4:	1f 91       	pop	r17
     cf6:	ff 90       	pop	r15
     cf8:	ef 90       	pop	r14
     cfa:	08 95       	ret

00000cfc <esp8266_sta_config>:

	return atoi(cmd_args[1]);
}


void esp8266_sta_config(char *ssid, char *password, bool autoconn, char *bssid){
     cfc:	0f 93       	push	r16
     cfe:	1f 93       	push	r17
     d00:	cf 93       	push	r28
     d02:	df 93       	push	r29
     d04:	cd b7       	in	r28, 0x3d	; 61
     d06:	de b7       	in	r29, 0x3e	; 62
     d08:	ca 55       	subi	r28, 0x5A	; 90
     d0a:	d1 09       	sbc	r29, r1
     d0c:	cd bf       	out	0x3d, r28	; 61
     d0e:	de bf       	out	0x3e, r29	; 62

	char cmd[40];
	char data[50];
	if(autoconn == '\0'){
     d10:	41 11       	cpse	r20, r1
     d12:	11 c0       	rjmp	.+34     	; 0xd36 <esp8266_sta_config+0x3a>
		sprintf(cmd,"wifi.sta.config(\"%s\",\"%s\")",ssid,password);
     d14:	7f 93       	push	r23
     d16:	6f 93       	push	r22
     d18:	9f 93       	push	r25
     d1a:	8f 93       	push	r24
     d1c:	87 e3       	ldi	r24, 0x37	; 55
     d1e:	93 e2       	ldi	r25, 0x23	; 35
     d20:	9f 93       	push	r25
     d22:	8f 93       	push	r24
     d24:	ce 01       	movw	r24, r28
     d26:	01 96       	adiw	r24, 0x01	; 1
     d28:	9f 93       	push	r25
     d2a:	8f 93       	push	r24
     d2c:	0e 94 39 0c 	call	0x1872	; 0x1872 <sprintf>
     d30:	cd bf       	out	0x3d, r28	; 61
     d32:	de bf       	out	0x3e, r29	; 62
     d34:	15 c0       	rjmp	.+42     	; 0xd60 <esp8266_sta_config+0x64>
	}
	else if(autoconn == 1){
		sprintf(cmd,"wifi.sta.config(\"%s\",\"%s\",%d,\"%s\" )",ssid,password,autoconn,bssid);
     d36:	3f 93       	push	r19
     d38:	2f 93       	push	r18
     d3a:	1f 92       	push	r1
     d3c:	21 e0       	ldi	r18, 0x01	; 1
     d3e:	2f 93       	push	r18
     d40:	7f 93       	push	r23
     d42:	6f 93       	push	r22
     d44:	9f 93       	push	r25
     d46:	8f 93       	push	r24
     d48:	82 e5       	ldi	r24, 0x52	; 82
     d4a:	93 e2       	ldi	r25, 0x23	; 35
     d4c:	9f 93       	push	r25
     d4e:	8f 93       	push	r24
     d50:	ce 01       	movw	r24, r28
     d52:	01 96       	adiw	r24, 0x01	; 1
     d54:	9f 93       	push	r25
     d56:	8f 93       	push	r24
     d58:	0e 94 39 0c 	call	0x1872	; 0x1872 <sprintf>
     d5c:	cd bf       	out	0x3d, r28	; 61
     d5e:	de bf       	out	0x3e, r29	; 62
	
	
// 	esp8266_send_receive(cmd,data);
// 	esp8266_rx_buff_receive_timeout(500,data);

	esp8266_send_receive_timeout(cmd,data,3000);
     d60:	8e 01       	movw	r16, r28
     d62:	07 5d       	subi	r16, 0xD7	; 215
     d64:	1f 4f       	sbci	r17, 0xFF	; 255
     d66:	28 eb       	ldi	r18, 0xB8	; 184
     d68:	3b e0       	ldi	r19, 0x0B	; 11
     d6a:	40 e0       	ldi	r20, 0x00	; 0
     d6c:	50 e0       	ldi	r21, 0x00	; 0
     d6e:	b8 01       	movw	r22, r16
     d70:	ce 01       	movw	r24, r28
     d72:	01 96       	adiw	r24, 0x01	; 1
     d74:	0e 94 58 04 	call	0x8b0	; 0x8b0 <esp8266_send_receive_timeout>
	//esp8266_rx_buff_receive_timeout(200,data);
	printf("\n%s",data);
     d78:	1f 93       	push	r17
     d7a:	0f 93       	push	r16
     d7c:	8e ec       	ldi	r24, 0xCE	; 206
     d7e:	92 e2       	ldi	r25, 0x22	; 34
     d80:	9f 93       	push	r25
     d82:	8f 93       	push	r24
     d84:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <printf>
     d88:	0f 90       	pop	r0
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
// 	for(int i=0;i<myargc;i++){
// 		printf("the token : %d is -> %s\n",i,cmd_args[i]);
// 	}
		
	
}
     d90:	c6 5a       	subi	r28, 0xA6	; 166
     d92:	df 4f       	sbci	r29, 0xFF	; 255
     d94:	cd bf       	out	0x3d, r28	; 61
     d96:	de bf       	out	0x3e, r29	; 62
     d98:	df 91       	pop	r29
     d9a:	cf 91       	pop	r28
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	08 95       	ret

00000da2 <esp8266_sta_getap>:

int esp8266_sta_getap(rtctick_t scan_time,esp8266_available_AP_t *ap_data){
     da2:	8f 92       	push	r8
     da4:	9f 92       	push	r9
     da6:	af 92       	push	r10
     da8:	bf 92       	push	r11
     daa:	cf 92       	push	r12
     dac:	df 92       	push	r13
     dae:	ef 92       	push	r14
     db0:	ff 92       	push	r15
     db2:	0f 93       	push	r16
     db4:	1f 93       	push	r17
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
     dbe:	c4 5a       	subi	r28, 0xA4	; 164
     dc0:	d4 40       	sbci	r29, 0x04	; 4
     dc2:	cd bf       	out	0x3d, r28	; 61
     dc4:	de bf       	out	0x3e, r29	; 62
     dc6:	cf 55       	subi	r28, 0x5F	; 95
     dc8:	db 4f       	sbci	r29, 0xFB	; 251
     dca:	68 83       	st	Y, r22
     dcc:	79 83       	std	Y+1, r23	; 0x01
     dce:	8a 83       	std	Y+2, r24	; 0x02
     dd0:	9b 83       	std	Y+3, r25	; 0x03
     dd2:	c1 5a       	subi	r28, 0xA1	; 161
     dd4:	d4 40       	sbci	r29, 0x04	; 4
     dd6:	4a 01       	movw	r8, r20
	//ESP8266_Wait_ms(2000);//stabilize
	if (scan_time < 5000) scan_time = 5000;
     dd8:	cf 55       	subi	r28, 0x5F	; 95
     dda:	db 4f       	sbci	r29, 0xFB	; 251
     ddc:	88 81       	ld	r24, Y
     dde:	99 81       	ldd	r25, Y+1	; 0x01
     de0:	aa 81       	ldd	r26, Y+2	; 0x02
     de2:	bb 81       	ldd	r27, Y+3	; 0x03
     de4:	c1 5a       	subi	r28, 0xA1	; 161
     de6:	d4 40       	sbci	r29, 0x04	; 4
     de8:	88 38       	cpi	r24, 0x88	; 136
     dea:	93 41       	sbci	r25, 0x13	; 19
     dec:	a1 05       	cpc	r26, r1
     dee:	b1 05       	cpc	r27, r1
     df0:	60 f4       	brcc	.+24     	; 0xe0a <esp8266_sta_getap+0x68>
     df2:	88 e8       	ldi	r24, 0x88	; 136
     df4:	93 e1       	ldi	r25, 0x13	; 19
     df6:	a0 e0       	ldi	r26, 0x00	; 0
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	cf 55       	subi	r28, 0x5F	; 95
     dfc:	db 4f       	sbci	r29, 0xFB	; 251
     dfe:	88 83       	st	Y, r24
     e00:	99 83       	std	Y+1, r25	; 0x01
     e02:	aa 83       	std	Y+2, r26	; 0x02
     e04:	bb 83       	std	Y+3, r27	; 0x03
     e06:	c1 5a       	subi	r28, 0xA1	; 161
     e08:	d4 40       	sbci	r29, 0x04	; 4
	
	char cmd[100];
	char data[1000];
	sprintf(cmd,"function listap(t) for k,v in pairs(t) do  print(k..\" # \"..v) end end wifi.sta.getap(1, listap)");
     e0a:	80 e6       	ldi	r24, 0x60	; 96
     e0c:	e6 e7       	ldi	r30, 0x76	; 118
     e0e:	f3 e2       	ldi	r31, 0x23	; 35
     e10:	de 01       	movw	r26, r28
     e12:	11 96       	adiw	r26, 0x01	; 1
     e14:	01 90       	ld	r0, Z+
     e16:	0d 92       	st	X+, r0
     e18:	8a 95       	dec	r24
     e1a:	e1 f7       	brne	.-8      	; 0xe14 <esp8266_sta_getap+0x72>
	//esp8266_send_receive(cmd,data);
	//printf("%s",data);
	
	esp8266_send_receive_timeout(cmd,data,scan_time);
     e1c:	cf 55       	subi	r28, 0x5F	; 95
     e1e:	db 4f       	sbci	r29, 0xFB	; 251
     e20:	28 81       	ld	r18, Y
     e22:	39 81       	ldd	r19, Y+1	; 0x01
     e24:	4a 81       	ldd	r20, Y+2	; 0x02
     e26:	5b 81       	ldd	r21, Y+3	; 0x03
     e28:	c1 5a       	subi	r28, 0xA1	; 161
     e2a:	d4 40       	sbci	r29, 0x04	; 4
     e2c:	be 01       	movw	r22, r28
     e2e:	6b 59       	subi	r22, 0x9B	; 155
     e30:	7f 4f       	sbci	r23, 0xFF	; 255
     e32:	ce 01       	movw	r24, r28
     e34:	01 96       	adiw	r24, 0x01	; 1
     e36:	0e 94 58 04 	call	0x8b0	; 0x8b0 <esp8266_send_receive_timeout>
	//esp8266_rx_buff_receive_timeout(scan_time,data);
/*	printf("%s",data);*/
	
	int myargc;
	char *cmd_args[20];
	tokenize(data,&myargc,">\r\n", 20, cmd_args);
     e3a:	8e 01       	movw	r16, r28
     e3c:	01 5b       	subi	r16, 0xB1	; 177
     e3e:	1b 4f       	sbci	r17, 0xFB	; 251
     e40:	24 e1       	ldi	r18, 0x14	; 20
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	46 ed       	ldi	r20, 0xD6	; 214
     e46:	53 e2       	ldi	r21, 0x23	; 35
     e48:	be 01       	movw	r22, r28
     e4a:	63 5b       	subi	r22, 0xB3	; 179
     e4c:	7b 4f       	sbci	r23, 0xFB	; 251
     e4e:	ce 01       	movw	r24, r28
     e50:	8b 59       	subi	r24, 0x9B	; 155
     e52:	9f 4f       	sbci	r25, 0xFF	; 255
     e54:	0e 94 25 01 	call	0x24a	; 0x24a <tokenize>


	for(int i=1;i<myargc;i++){
     e58:	c3 5b       	subi	r28, 0xB3	; 179
     e5a:	db 4f       	sbci	r29, 0xFB	; 251
     e5c:	08 81       	ld	r16, Y
     e5e:	19 81       	ldd	r17, Y+1	; 0x01
     e60:	cd 54       	subi	r28, 0x4D	; 77
     e62:	d4 40       	sbci	r29, 0x04	; 4
     e64:	02 30       	cpi	r16, 0x02	; 2
     e66:	11 05       	cpc	r17, r1
     e68:	0c f4       	brge	.+2      	; 0xe6c <esp8266_sta_getap+0xca>
     e6a:	61 c0       	rjmp	.+194    	; 0xf2e <esp8266_sta_getap+0x18c>
     e6c:	5e 01       	movw	r10, r28
     e6e:	8f ea       	ldi	r24, 0xAF	; 175
     e70:	a8 1a       	sub	r10, r24
     e72:	8b ef       	ldi	r24, 0xFB	; 251
     e74:	b8 0a       	sbc	r11, r24
     e76:	74 01       	movw	r14, r8
     e78:	e6 e3       	ldi	r30, 0x36	; 54
     e7a:	ee 0e       	add	r14, r30
     e7c:	f1 1c       	adc	r15, r1
     e7e:	cc 24       	eor	r12, r12
     e80:	c3 94       	inc	r12
     e82:	d1 2c       	mov	r13, r1
		int myargc2;
		char *cmd_args2[20];
		tokenize(cmd_args[i],&myargc2,"#(),\"",10,cmd_args2);
     e84:	8e 01       	movw	r16, r28
     e86:	09 58       	subi	r16, 0x89	; 137
     e88:	1b 4f       	sbci	r17, 0xFB	; 251
     e8a:	2a e0       	ldi	r18, 0x0A	; 10
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	4a ed       	ldi	r20, 0xDA	; 218
     e90:	53 e2       	ldi	r21, 0x23	; 35
     e92:	be 01       	movw	r22, r28
     e94:	61 56       	subi	r22, 0x61	; 97
     e96:	7b 4f       	sbci	r23, 0xFB	; 251
     e98:	f5 01       	movw	r30, r10
     e9a:	81 91       	ld	r24, Z+
     e9c:	91 91       	ld	r25, Z+
     e9e:	5f 01       	movw	r10, r30
     ea0:	0e 94 25 01 	call	0x24a	; 0x24a <tokenize>
		
		strcpy(ap_data[i-1].BSSID,cmd_args2[0]);
     ea4:	c9 58       	subi	r28, 0x89	; 137
     ea6:	db 4f       	sbci	r29, 0xFB	; 251
     ea8:	68 81       	ld	r22, Y
     eaa:	79 81       	ldd	r23, Y+1	; 0x01
     eac:	c7 57       	subi	r28, 0x77	; 119
     eae:	d4 40       	sbci	r29, 0x04	; 4
     eb0:	c7 01       	movw	r24, r14
     eb2:	c6 97       	sbiw	r24, 0x36	; 54
     eb4:	0e 94 bf 0b 	call	0x177e	; 0x177e <strcpy>
		strcpy(ap_data[i-1].SSID,cmd_args2[1]);
     eb8:	c7 58       	subi	r28, 0x87	; 135
     eba:	db 4f       	sbci	r29, 0xFB	; 251
     ebc:	68 81       	ld	r22, Y
     ebe:	79 81       	ldd	r23, Y+1	; 0x01
     ec0:	c9 57       	subi	r28, 0x79	; 121
     ec2:	d4 40       	sbci	r29, 0x04	; 4
     ec4:	c7 01       	movw	r24, r14
     ec6:	82 97       	sbiw	r24, 0x22	; 34
     ec8:	0e 94 bf 0b 	call	0x177e	; 0x177e <strcpy>
		ap_data[i-1].RSSI = atoi(cmd_args2[2]);
     ecc:	c5 58       	subi	r28, 0x85	; 133
     ece:	db 4f       	sbci	r29, 0xFB	; 251
     ed0:	88 81       	ld	r24, Y
     ed2:	99 81       	ldd	r25, Y+1	; 0x01
     ed4:	cb 57       	subi	r28, 0x7B	; 123
     ed6:	d4 40       	sbci	r29, 0x04	; 4
     ed8:	0e 94 94 0b 	call	0x1728	; 0x1728 <atoi>
     edc:	f7 01       	movw	r30, r14
     ede:	32 97       	sbiw	r30, 0x02	; 2
     ee0:	80 83       	st	Z, r24
     ee2:	91 83       	std	Z+1, r25	; 0x01
		ap_data[i-1].auth_mode = atoi(cmd_args2[3]);
     ee4:	c3 58       	subi	r28, 0x83	; 131
     ee6:	db 4f       	sbci	r29, 0xFB	; 251
     ee8:	88 81       	ld	r24, Y
     eea:	99 81       	ldd	r25, Y+1	; 0x01
     eec:	cd 57       	subi	r28, 0x7D	; 125
     eee:	d4 40       	sbci	r29, 0x04	; 4
     ef0:	0e 94 94 0b 	call	0x1728	; 0x1728 <atoi>
     ef4:	f7 01       	movw	r30, r14
     ef6:	80 83       	st	Z, r24
		ap_data[i-1].channel = atoi(cmd_args2[4]);
     ef8:	c1 58       	subi	r28, 0x81	; 129
     efa:	db 4f       	sbci	r29, 0xFB	; 251
     efc:	88 81       	ld	r24, Y
     efe:	99 81       	ldd	r25, Y+1	; 0x01
     f00:	cf 57       	subi	r28, 0x7F	; 127
     f02:	d4 40       	sbci	r29, 0x04	; 4
     f04:	0e 94 94 0b 	call	0x1728	; 0x1728 <atoi>
     f08:	f7 01       	movw	r30, r14
     f0a:	81 83       	std	Z+1, r24	; 0x01
     f0c:	92 83       	std	Z+2, r25	; 0x02
	int myargc;
	char *cmd_args[20];
	tokenize(data,&myargc,">\r\n", 20, cmd_args);


	for(int i=1;i<myargc;i++){
     f0e:	ff ef       	ldi	r31, 0xFF	; 255
     f10:	cf 1a       	sub	r12, r31
     f12:	df 0a       	sbc	r13, r31
     f14:	c3 5b       	subi	r28, 0xB3	; 179
     f16:	db 4f       	sbci	r29, 0xFB	; 251
     f18:	08 81       	ld	r16, Y
     f1a:	19 81       	ldd	r17, Y+1	; 0x01
     f1c:	cd 54       	subi	r28, 0x4D	; 77
     f1e:	d4 40       	sbci	r29, 0x04	; 4
     f20:	29 e3       	ldi	r18, 0x39	; 57
     f22:	e2 0e       	add	r14, r18
     f24:	f1 1c       	adc	r15, r1
     f26:	c0 16       	cp	r12, r16
     f28:	d1 06       	cpc	r13, r17
     f2a:	0c f4       	brge	.+2      	; 0xf2e <esp8266_sta_getap+0x18c>
     f2c:	ab cf       	rjmp	.-170    	; 0xe84 <esp8266_sta_getap+0xe2>
		ap_data[i-1].RSSI = atoi(cmd_args2[2]);
		ap_data[i-1].auth_mode = atoi(cmd_args2[3]);
		ap_data[i-1].channel = atoi(cmd_args2[4]);
	}
	
	strcpy(ap_data[0].BSSID,ap_data[0].BSSID + 1);//this is to remove the initial white space for the first available bssid
     f2e:	b4 01       	movw	r22, r8
     f30:	6f 5f       	subi	r22, 0xFF	; 255
     f32:	7f 4f       	sbci	r23, 0xFF	; 255
     f34:	c4 01       	movw	r24, r8
     f36:	0e 94 bf 0b 	call	0x177e	; 0x177e <strcpy>
	
	return myargc-1;
		//ESP8266_Wait_ms(2000);//stabilize
}
     f3a:	c8 01       	movw	r24, r16
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	cc 55       	subi	r28, 0x5C	; 92
     f40:	db 4f       	sbci	r29, 0xFB	; 251
     f42:	cd bf       	out	0x3d, r28	; 61
     f44:	de bf       	out	0x3e, r29	; 62
     f46:	df 91       	pop	r29
     f48:	cf 91       	pop	r28
     f4a:	1f 91       	pop	r17
     f4c:	0f 91       	pop	r16
     f4e:	ff 90       	pop	r15
     f50:	ef 90       	pop	r14
     f52:	df 90       	pop	r13
     f54:	cf 90       	pop	r12
     f56:	bf 90       	pop	r11
     f58:	af 90       	pop	r10
     f5a:	9f 90       	pop	r9
     f5c:	8f 90       	pop	r8
     f5e:	08 95       	ret

00000f60 <esp8266_sta_getip>:
	esp8266_send_receive_timeout(cmd,data,500);
	//esp8266_rx_buff_receive_timeout(500,data);
	
}

void esp8266_sta_getip(){
     f60:	0f 93       	push	r16
     f62:	1f 93       	push	r17
     f64:	cf 93       	push	r28
     f66:	df 93       	push	r29
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
     f6c:	ce 56       	subi	r28, 0x6E	; 110
     f6e:	d1 09       	sbc	r29, r1
     f70:	cd bf       	out	0x3d, r28	; 61
     f72:	de bf       	out	0x3e, r29	; 62
	char data[50];
	char cmd[60];

	
	sprintf(cmd,"print(wifi.sta.getip())");
     f74:	88 e1       	ldi	r24, 0x18	; 24
     f76:	e9 e0       	ldi	r30, 0x09	; 9
     f78:	f4 e2       	ldi	r31, 0x24	; 36
     f7a:	de 01       	movw	r26, r28
     f7c:	d3 96       	adiw	r26, 0x33	; 51
     f7e:	01 90       	ld	r0, Z+
     f80:	0d 92       	st	X+, r0
     f82:	8a 95       	dec	r24
     f84:	e1 f7       	brne	.-8      	; 0xf7e <esp8266_sta_getip+0x1e>
	//printf("%s",cmd);
	esp8266_send_receive(cmd,data);
     f86:	8e 01       	movw	r16, r28
     f88:	0f 5f       	subi	r16, 0xFF	; 255
     f8a:	1f 4f       	sbci	r17, 0xFF	; 255
     f8c:	b8 01       	movw	r22, r16
     f8e:	ce 01       	movw	r24, r28
     f90:	c3 96       	adiw	r24, 0x33	; 51
     f92:	0e 94 09 05 	call	0xa12	; 0xa12 <esp8266_send_receive>
	//esp8266_rx_buff_receive_timeout(200,data);
	printf("\n%s",data);
     f96:	1f 93       	push	r17
     f98:	0f 93       	push	r16
     f9a:	8e ec       	ldi	r24, 0xCE	; 206
     f9c:	92 e2       	ldi	r25, 0x22	; 34
     f9e:	9f 93       	push	r25
     fa0:	8f 93       	push	r24
     fa2:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <printf>
     fa6:	0f 90       	pop	r0
     fa8:	0f 90       	pop	r0
     faa:	0f 90       	pop	r0
     fac:	0f 90       	pop	r0
	
}
     fae:	c2 59       	subi	r28, 0x92	; 146
     fb0:	df 4f       	sbci	r29, 0xFF	; 255
     fb2:	cd bf       	out	0x3d, r28	; 61
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	1f 91       	pop	r17
     fbc:	0f 91       	pop	r16
     fbe:	08 95       	ret

00000fc0 <esp8266_sta_getmac>:

void esp8266_sta_getmac(){
     fc0:	0f 93       	push	r16
     fc2:	1f 93       	push	r17
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	c0 55       	subi	r28, 0x50	; 80
     fce:	d1 09       	sbc	r29, r1
     fd0:	cd bf       	out	0x3d, r28	; 61
     fd2:	de bf       	out	0x3e, r29	; 62
	char data[50];
	char cmd[30];

	sprintf(cmd,"print(wifi.sta.getmac())");
     fd4:	89 e1       	ldi	r24, 0x19	; 25
     fd6:	e1 e2       	ldi	r30, 0x21	; 33
     fd8:	f4 e2       	ldi	r31, 0x24	; 36
     fda:	de 01       	movw	r26, r28
     fdc:	d3 96       	adiw	r26, 0x33	; 51
     fde:	01 90       	ld	r0, Z+
     fe0:	0d 92       	st	X+, r0
     fe2:	8a 95       	dec	r24
     fe4:	e1 f7       	brne	.-8      	; 0xfde <esp8266_sta_getmac+0x1e>
	//printf("%s",cmd);
	esp8266_send_receive(cmd,data);
     fe6:	8e 01       	movw	r16, r28
     fe8:	0f 5f       	subi	r16, 0xFF	; 255
     fea:	1f 4f       	sbci	r17, 0xFF	; 255
     fec:	b8 01       	movw	r22, r16
     fee:	ce 01       	movw	r24, r28
     ff0:	c3 96       	adiw	r24, 0x33	; 51
     ff2:	0e 94 09 05 	call	0xa12	; 0xa12 <esp8266_send_receive>
	//esp8266_rx_buff_receive_timeout(200,data);
	printf("\n%s",data);
     ff6:	1f 93       	push	r17
     ff8:	0f 93       	push	r16
     ffa:	8e ec       	ldi	r24, 0xCE	; 206
     ffc:	92 e2       	ldi	r25, 0x22	; 34
     ffe:	9f 93       	push	r25
    1000:	8f 93       	push	r24
    1002:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <printf>
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
// 	sprintf(cmd,"print(wifi.sta.getmac())");
// 	//printf("%s",cmd);
// 	esp8266_send_receive(cmd,data);
// 	//esp8266_rx_buff_receive_timeout(200,data);
// 	printf("\n%s",data);
}
    100e:	c0 5b       	subi	r28, 0xB0	; 176
    1010:	df 4f       	sbci	r29, 0xFF	; 255
    1012:	cd bf       	out	0x3d, r28	; 61
    1014:	de bf       	out	0x3e, r29	; 62
    1016:	df 91       	pop	r29
    1018:	cf 91       	pop	r28
    101a:	1f 91       	pop	r17
    101c:	0f 91       	pop	r16
    101e:	08 95       	ret

00001020 <esp8266_sta_get_status>:

void esp8266_sta_get_status(){
    1020:	ef 92       	push	r14
    1022:	ff 92       	push	r15
    1024:	0f 93       	push	r16
    1026:	1f 93       	push	r17
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	ca 57       	subi	r28, 0x7A	; 122
    1032:	d1 09       	sbc	r29, r1
    1034:	cd bf       	out	0x3d, r28	; 61
    1036:	de bf       	out	0x3e, r29	; 62

	char data[50];
	char cmd[50];

	sprintf(cmd,"print(wifi.sta.status())");
    1038:	89 e1       	ldi	r24, 0x19	; 25
    103a:	ea e3       	ldi	r30, 0x3A	; 58
    103c:	f4 e2       	ldi	r31, 0x24	; 36
    103e:	de 01       	movw	r26, r28
    1040:	d3 96       	adiw	r26, 0x33	; 51
    1042:	01 90       	ld	r0, Z+
    1044:	0d 92       	st	X+, r0
    1046:	8a 95       	dec	r24
    1048:	e1 f7       	brne	.-8      	; 0x1042 <esp8266_sta_get_status+0x22>
	esp8266_send_receive(cmd,data);
    104a:	ce 01       	movw	r24, r28
    104c:	01 96       	adiw	r24, 0x01	; 1
    104e:	7c 01       	movw	r14, r24
    1050:	bc 01       	movw	r22, r24
    1052:	c2 96       	adiw	r24, 0x32	; 50
    1054:	0e 94 09 05 	call	0xa12	; 0xa12 <esp8266_send_receive>
	//esp8266_rx_buff_receive_timeout(500,data);

	printf("\n%s",data);
    1058:	ff 92       	push	r15
    105a:	ef 92       	push	r14
    105c:	8e ec       	ldi	r24, 0xCE	; 206
    105e:	92 e2       	ldi	r25, 0x22	; 34
    1060:	9f 93       	push	r25
    1062:	8f 93       	push	r24
    1064:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <printf>
	
	int myargc;
	char *cmd_args[10];
	tokenize(data,&myargc," >\t\r\n", 10, cmd_args);
    1068:	8e 01       	movw	r16, r28
    106a:	09 59       	subi	r16, 0x99	; 153
    106c:	1f 4f       	sbci	r17, 0xFF	; 255
    106e:	2a e0       	ldi	r18, 0x0A	; 10
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	43 e5       	ldi	r20, 0x53	; 83
    1074:	54 e2       	ldi	r21, 0x24	; 36
    1076:	be 01       	movw	r22, r28
    1078:	6b 59       	subi	r22, 0x9B	; 155
    107a:	7f 4f       	sbci	r23, 0xFF	; 255
    107c:	c7 01       	movw	r24, r14
    107e:	0e 94 25 01 	call	0x24a	; 0x24a <tokenize>
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
	// 	for(int i=0;i<myargc;i++){
	// 		printf("the token : %d is -> %s\n",i,cmd_args[i]);
	// 	}
	
	
}
    108a:	c6 58       	subi	r28, 0x86	; 134
    108c:	df 4f       	sbci	r29, 0xFF	; 255
    108e:	cd bf       	out	0x3d, r28	; 61
    1090:	de bf       	out	0x3e, r29	; 62
    1092:	df 91       	pop	r29
    1094:	cf 91       	pop	r28
    1096:	1f 91       	pop	r17
    1098:	0f 91       	pop	r16
    109a:	ff 90       	pop	r15
    109c:	ef 90       	pop	r14
    109e:	08 95       	ret

000010a0 <esp8266_mqtt_create_client>:


//////////////////////////////////////////////////////////////////////////ESP8266_nodemcu_mqtt


void esp8266_mqtt_create_client(char *mqttclient, char *clientid, int keepalive, char *user, char *password){
    10a0:	ef 92       	push	r14
    10a2:	ff 92       	push	r15
    10a4:	0f 93       	push	r16
    10a6:	1f 93       	push	r17
    10a8:	cf 93       	push	r28
    10aa:	df 93       	push	r29
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
    10b0:	c8 55       	subi	r28, 0x58	; 88
    10b2:	d2 40       	sbci	r29, 0x02	; 2
    10b4:	cd bf       	out	0x3d, r28	; 61
    10b6:	de bf       	out	0x3e, r29	; 62
		char data[100];
		char cmd[500];

		sprintf(cmd,"%s = mqtt.Client(\"%s\", %d, \"%s\", \"%s\")",mqttclient,clientid,keepalive,user,password);
    10b8:	1f 93       	push	r17
    10ba:	0f 93       	push	r16
    10bc:	3f 93       	push	r19
    10be:	2f 93       	push	r18
    10c0:	5f 93       	push	r21
    10c2:	4f 93       	push	r20
    10c4:	7f 93       	push	r23
    10c6:	6f 93       	push	r22
    10c8:	9f 93       	push	r25
    10ca:	8f 93       	push	r24
    10cc:	89 e5       	ldi	r24, 0x59	; 89
    10ce:	94 e2       	ldi	r25, 0x24	; 36
    10d0:	9f 93       	push	r25
    10d2:	8f 93       	push	r24
    10d4:	8e 01       	movw	r16, r28
    10d6:	0b 59       	subi	r16, 0x9B	; 155
    10d8:	1f 4f       	sbci	r17, 0xFF	; 255
    10da:	1f 93       	push	r17
    10dc:	0f 93       	push	r16
    10de:	0e 94 39 0c 	call	0x1872	; 0x1872 <sprintf>
		//printf("%s",cmd);
		esp8266_send_receive(cmd,data);
    10e2:	ce 01       	movw	r24, r28
    10e4:	01 96       	adiw	r24, 0x01	; 1
    10e6:	7c 01       	movw	r14, r24
    10e8:	bc 01       	movw	r22, r24
    10ea:	c8 01       	movw	r24, r16
    10ec:	0e 94 09 05 	call	0xa12	; 0xa12 <esp8266_send_receive>
		//esp8266_rx_buff_receive_timeout(200,data);
		printf("\n%s",data);
    10f0:	ff 92       	push	r15
    10f2:	ef 92       	push	r14
    10f4:	8e ec       	ldi	r24, 0xCE	; 206
    10f6:	92 e2       	ldi	r25, 0x22	; 34
    10f8:	9f 93       	push	r25
    10fa:	8f 93       	push	r24
    10fc:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <printf>
    1100:	cd bf       	out	0x3d, r28	; 61
    1102:	de bf       	out	0x3e, r29	; 62
}
    1104:	c8 5a       	subi	r28, 0xA8	; 168
    1106:	dd 4f       	sbci	r29, 0xFD	; 253
    1108:	cd bf       	out	0x3d, r28	; 61
    110a:	de bf       	out	0x3e, r29	; 62
    110c:	df 91       	pop	r29
    110e:	cf 91       	pop	r28
    1110:	1f 91       	pop	r17
    1112:	0f 91       	pop	r16
    1114:	ff 90       	pop	r15
    1116:	ef 90       	pop	r14
    1118:	08 95       	ret

0000111a <esp8266_mqtt_client_connect>:

void esp8266_mqtt_client_connect(char *mqttclient, char *host, int port,esp8266_wifi_tls_rsa_t security, char *function){
    111a:	ef 92       	push	r14
    111c:	ff 92       	push	r15
    111e:	0f 93       	push	r16
    1120:	1f 93       	push	r17
    1122:	cf 93       	push	r28
    1124:	df 93       	push	r29
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
    112a:	c8 55       	subi	r28, 0x58	; 88
    112c:	d2 40       	sbci	r29, 0x02	; 2
    112e:	cd bf       	out	0x3d, r28	; 61
    1130:	de bf       	out	0x3e, r29	; 62
	char data[100];
	char cmd[500];

	sprintf(cmd,"%s:connect(\"%s\", \"%d\", %d ,1, %s)",mqttclient,host,port,0,function);
    1132:	1f 93       	push	r17
    1134:	0f 93       	push	r16
    1136:	1f 92       	push	r1
    1138:	1f 92       	push	r1
    113a:	5f 93       	push	r21
    113c:	4f 93       	push	r20
    113e:	7f 93       	push	r23
    1140:	6f 93       	push	r22
    1142:	9f 93       	push	r25
    1144:	8f 93       	push	r24
    1146:	80 e8       	ldi	r24, 0x80	; 128
    1148:	94 e2       	ldi	r25, 0x24	; 36
    114a:	9f 93       	push	r25
    114c:	8f 93       	push	r24
    114e:	8e 01       	movw	r16, r28
    1150:	0b 59       	subi	r16, 0x9B	; 155
    1152:	1f 4f       	sbci	r17, 0xFF	; 255
    1154:	1f 93       	push	r17
    1156:	0f 93       	push	r16
    1158:	0e 94 39 0c 	call	0x1872	; 0x1872 <sprintf>
	//printf("%s",cmd);
	//esp8266_send_receive_2(cmd,data);
	esp8266_send_receive_timeout(cmd,data,5000);
    115c:	28 e8       	ldi	r18, 0x88	; 136
    115e:	33 e1       	ldi	r19, 0x13	; 19
    1160:	40 e0       	ldi	r20, 0x00	; 0
    1162:	50 e0       	ldi	r21, 0x00	; 0
    1164:	ce 01       	movw	r24, r28
    1166:	01 96       	adiw	r24, 0x01	; 1
    1168:	7c 01       	movw	r14, r24
    116a:	bc 01       	movw	r22, r24
    116c:	c8 01       	movw	r24, r16
    116e:	0e 94 58 04 	call	0x8b0	; 0x8b0 <esp8266_send_receive_timeout>
	//esp8266_rx_buff_receive_timeout(2000,data);
	printf("\n%s",data);
    1172:	ff 92       	push	r15
    1174:	ef 92       	push	r14
    1176:	8e ec       	ldi	r24, 0xCE	; 206
    1178:	92 e2       	ldi	r25, 0x22	; 34
    117a:	9f 93       	push	r25
    117c:	8f 93       	push	r24
    117e:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <printf>
    1182:	cd bf       	out	0x3d, r28	; 61
    1184:	de bf       	out	0x3e, r29	; 62
	
}
    1186:	c8 5a       	subi	r28, 0xA8	; 168
    1188:	dd 4f       	sbci	r29, 0xFD	; 253
    118a:	cd bf       	out	0x3d, r28	; 61
    118c:	de bf       	out	0x3e, r29	; 62
    118e:	df 91       	pop	r29
    1190:	cf 91       	pop	r28
    1192:	1f 91       	pop	r17
    1194:	0f 91       	pop	r16
    1196:	ff 90       	pop	r15
    1198:	ef 90       	pop	r14
    119a:	08 95       	ret

0000119c <esp8266_mqtt_client_publish>:
	//esp8266_rx_buff_receive_timeout(200,data);
	printf("\n%s",data);
}


void esp8266_mqtt_client_publish(char *mqttclient, char *topic, char *message, int qos, bool retain_flag, char *function){
    119c:	ef 92       	push	r14
    119e:	ff 92       	push	r15
    11a0:	0f 93       	push	r16
    11a2:	1f 93       	push	r17
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
    11ac:	c8 55       	subi	r28, 0x58	; 88
    11ae:	d2 40       	sbci	r29, 0x02	; 2
    11b0:	cd bf       	out	0x3d, r28	; 61
    11b2:	de bf       	out	0x3e, r29	; 62
	char data[100];
	char cmd[500];

	sprintf(cmd,"%s:publish(\"%s\",\"%s\",%d,%d, %s)", mqttclient,topic,message,qos,retain_flag,function);
    11b4:	ff 92       	push	r15
    11b6:	ef 92       	push	r14
    11b8:	1f 92       	push	r1
    11ba:	0f 93       	push	r16
    11bc:	3f 93       	push	r19
    11be:	2f 93       	push	r18
    11c0:	5f 93       	push	r21
    11c2:	4f 93       	push	r20
    11c4:	7f 93       	push	r23
    11c6:	6f 93       	push	r22
    11c8:	9f 93       	push	r25
    11ca:	8f 93       	push	r24
    11cc:	85 ec       	ldi	r24, 0xC5	; 197
    11ce:	94 e2       	ldi	r25, 0x24	; 36
    11d0:	9f 93       	push	r25
    11d2:	8f 93       	push	r24
    11d4:	8e 01       	movw	r16, r28
    11d6:	0b 59       	subi	r16, 0x9B	; 155
    11d8:	1f 4f       	sbci	r17, 0xFF	; 255
    11da:	1f 93       	push	r17
    11dc:	0f 93       	push	r16
    11de:	0e 94 39 0c 	call	0x1872	; 0x1872 <sprintf>
	//printf("%s",cmd);
	esp8266_send_receive(cmd,data);
    11e2:	ce 01       	movw	r24, r28
    11e4:	01 96       	adiw	r24, 0x01	; 1
    11e6:	7c 01       	movw	r14, r24
    11e8:	bc 01       	movw	r22, r24
    11ea:	c8 01       	movw	r24, r16
    11ec:	0e 94 09 05 	call	0xa12	; 0xa12 <esp8266_send_receive>
	//esp8266_rx_buff_receive_timeout(200,data);
	printf("\n%s",data);
    11f0:	ff 92       	push	r15
    11f2:	ef 92       	push	r14
    11f4:	8e ec       	ldi	r24, 0xCE	; 206
    11f6:	92 e2       	ldi	r25, 0x22	; 34
    11f8:	9f 93       	push	r25
    11fa:	8f 93       	push	r24
    11fc:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <printf>
    1200:	cd bf       	out	0x3d, r28	; 61
    1202:	de bf       	out	0x3e, r29	; 62
}
    1204:	c8 5a       	subi	r28, 0xA8	; 168
    1206:	dd 4f       	sbci	r29, 0xFD	; 253
    1208:	cd bf       	out	0x3d, r28	; 61
    120a:	de bf       	out	0x3e, r29	; 62
    120c:	df 91       	pop	r29
    120e:	cf 91       	pop	r28
    1210:	1f 91       	pop	r17
    1212:	0f 91       	pop	r16
    1214:	ff 90       	pop	r15
    1216:	ef 90       	pop	r14
    1218:	08 95       	ret

0000121a <esp8266_mqtt_client_subscribe>:

void esp8266_mqtt_client_subscribe(char *mqttclient, char *topic, int qos, char *function){
    121a:	ef 92       	push	r14
    121c:	ff 92       	push	r15
    121e:	0f 93       	push	r16
    1220:	1f 93       	push	r17
    1222:	cf 93       	push	r28
    1224:	df 93       	push	r29
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
    122a:	c8 55       	subi	r28, 0x58	; 88
    122c:	d2 40       	sbci	r29, 0x02	; 2
    122e:	cd bf       	out	0x3d, r28	; 61
    1230:	de bf       	out	0x3e, r29	; 62
	char data[100];
	char cmd[500];

	sprintf(cmd,"%s:subscribe(\"%s\",%d, %s)", mqttclient,topic,qos,function);
    1232:	3f 93       	push	r19
    1234:	2f 93       	push	r18
    1236:	5f 93       	push	r21
    1238:	4f 93       	push	r20
    123a:	7f 93       	push	r23
    123c:	6f 93       	push	r22
    123e:	9f 93       	push	r25
    1240:	8f 93       	push	r24
    1242:	85 ee       	ldi	r24, 0xE5	; 229
    1244:	94 e2       	ldi	r25, 0x24	; 36
    1246:	9f 93       	push	r25
    1248:	8f 93       	push	r24
    124a:	8e 01       	movw	r16, r28
    124c:	0b 59       	subi	r16, 0x9B	; 155
    124e:	1f 4f       	sbci	r17, 0xFF	; 255
    1250:	1f 93       	push	r17
    1252:	0f 93       	push	r16
    1254:	0e 94 39 0c 	call	0x1872	; 0x1872 <sprintf>
	//printf("%s",cmd);
	esp8266_send_receive(cmd,data);
    1258:	ce 01       	movw	r24, r28
    125a:	01 96       	adiw	r24, 0x01	; 1
    125c:	7c 01       	movw	r14, r24
    125e:	bc 01       	movw	r22, r24
    1260:	c8 01       	movw	r24, r16
    1262:	0e 94 09 05 	call	0xa12	; 0xa12 <esp8266_send_receive>
	//esp8266_rx_buff_receive_timeout(200,data);
	printf("\n%s",data);
    1266:	ff 92       	push	r15
    1268:	ef 92       	push	r14
    126a:	8e ec       	ldi	r24, 0xCE	; 206
    126c:	92 e2       	ldi	r25, 0x22	; 34
    126e:	9f 93       	push	r25
    1270:	8f 93       	push	r24
    1272:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <printf>
    1276:	cd bf       	out	0x3d, r28	; 61
    1278:	de bf       	out	0x3e, r29	; 62
}
    127a:	c8 5a       	subi	r28, 0xA8	; 168
    127c:	dd 4f       	sbci	r29, 0xFD	; 253
    127e:	cd bf       	out	0x3d, r28	; 61
    1280:	de bf       	out	0x3e, r29	; 62
    1282:	df 91       	pop	r29
    1284:	cf 91       	pop	r28
    1286:	1f 91       	pop	r17
    1288:	0f 91       	pop	r16
    128a:	ff 90       	pop	r15
    128c:	ef 90       	pop	r14
    128e:	08 95       	ret

00001290 <esp8266_mqtt_client_callback_on_message>:

void esp8266_mqtt_client_callback_on_message(char *mqttclient, char *function){
    1290:	ef 92       	push	r14
    1292:	ff 92       	push	r15
    1294:	0f 93       	push	r16
    1296:	1f 93       	push	r17
    1298:	cf 93       	push	r28
    129a:	df 93       	push	r29
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
    12a0:	c8 55       	subi	r28, 0x58	; 88
    12a2:	d2 40       	sbci	r29, 0x02	; 2
    12a4:	cd bf       	out	0x3d, r28	; 61
    12a6:	de bf       	out	0x3e, r29	; 62
	char data[100];
	char cmd[500];

	sprintf(cmd,"%s:on(\"message\", %s)", mqttclient,function);
    12a8:	7f 93       	push	r23
    12aa:	6f 93       	push	r22
    12ac:	9f 93       	push	r25
    12ae:	8f 93       	push	r24
    12b0:	8f ef       	ldi	r24, 0xFF	; 255
    12b2:	94 e2       	ldi	r25, 0x24	; 36
    12b4:	9f 93       	push	r25
    12b6:	8f 93       	push	r24
    12b8:	8e 01       	movw	r16, r28
    12ba:	0b 59       	subi	r16, 0x9B	; 155
    12bc:	1f 4f       	sbci	r17, 0xFF	; 255
    12be:	1f 93       	push	r17
    12c0:	0f 93       	push	r16
    12c2:	0e 94 39 0c 	call	0x1872	; 0x1872 <sprintf>
	//printf("%s",cmd);
	esp8266_send_receive(cmd,data);
    12c6:	ce 01       	movw	r24, r28
    12c8:	01 96       	adiw	r24, 0x01	; 1
    12ca:	7c 01       	movw	r14, r24
    12cc:	bc 01       	movw	r22, r24
    12ce:	c8 01       	movw	r24, r16
    12d0:	0e 94 09 05 	call	0xa12	; 0xa12 <esp8266_send_receive>
	//esp8266_rx_buff_receive_timeout(200,data);
	printf("\n%s",data);
    12d4:	ff 92       	push	r15
    12d6:	ef 92       	push	r14
    12d8:	8e ec       	ldi	r24, 0xCE	; 206
    12da:	92 e2       	ldi	r25, 0x22	; 34
    12dc:	9f 93       	push	r25
    12de:	8f 93       	push	r24
    12e0:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <printf>
    12e4:	cd bf       	out	0x3d, r28	; 61
    12e6:	de bf       	out	0x3e, r29	; 62
}
    12e8:	c8 5a       	subi	r28, 0xA8	; 168
    12ea:	dd 4f       	sbci	r29, 0xFD	; 253
    12ec:	cd bf       	out	0x3d, r28	; 61
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	1f 91       	pop	r17
    12f6:	0f 91       	pop	r16
    12f8:	ff 90       	pop	r15
    12fa:	ef 90       	pop	r14
    12fc:	08 95       	ret

000012fe <lcd_line_print>:
#include "esp8266nodemcu.h"




void lcd_line_print(int line, char *str){
    12fe:	ef 92       	push	r14
    1300:	ff 92       	push	r15
    1302:	1f 93       	push	r17
    1304:	cf 93       	push	r28
    1306:	df 93       	push	r29
    1308:	18 2f       	mov	r17, r24
    130a:	7b 01       	movw	r14, r22
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
    130c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		ssd1306_set_page_address(page);
    130e:	8d 2f       	mov	r24, r29
    1310:	0e 94 a3 02 	call	0x546	; 0x546 <ssd1306_set_page_address>
		ssd1306_set_column_address(0);
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	0e 94 a8 02 	call	0x550	; 0x550 <ssd1306_set_column_address>
    131a:	c0 e0       	ldi	r28, 0x00	; 0
		for (col = 0; col < 128; ++col)
		{
			ssd1306_write_data(0x00);
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	0e 94 81 02 	call	0x502	; 0x502 <ssd1306_write_data>

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
		for (col = 0; col < 128; ++col)
    1322:	cf 5f       	subi	r28, 0xFF	; 255
    1324:	c0 38       	cpi	r28, 0x80	; 128
    1326:	d1 f7       	brne	.-12     	; 0x131c <lcd_line_print+0x1e>
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
    1328:	df 5f       	subi	r29, 0xFF	; 255
    132a:	d4 30       	cpi	r29, 0x04	; 4
    132c:	81 f7       	brne	.-32     	; 0x130e <lcd_line_print+0x10>
	ssd1306_clear();
	ssd1306_set_page_address(line);
    132e:	81 2f       	mov	r24, r17
    1330:	0e 94 a3 02 	call	0x546	; 0x546 <ssd1306_set_page_address>
	ssd1306_set_column_address(0);
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	0e 94 a8 02 	call	0x550	; 0x550 <ssd1306_set_column_address>
	ssd1306_write_text(str);
    133a:	c7 01       	movw	r24, r14
    133c:	0e 94 87 03 	call	0x70e	; 0x70e <ssd1306_write_text>
}
    1340:	df 91       	pop	r29
    1342:	cf 91       	pop	r28
    1344:	1f 91       	pop	r17
    1346:	ff 90       	pop	r15
    1348:	ef 90       	pop	r14
    134a:	08 95       	ret

0000134c <main>:




int main(void)
{
    134c:	cf 93       	push	r28
    134e:	df 93       	push	r29
    1350:	cd b7       	in	r28, 0x3d	; 61
    1352:	de b7       	in	r29, 0x3e	; 62
    1354:	c0 51       	subi	r28, 0x10	; 16
    1356:	d3 40       	sbci	r29, 0x03	; 3
    1358:	cd bf       	out	0x3d, r28	; 61
    135a:	de bf       	out	0x3e, r29	; 62
	//
	asm("nop");
    135c:	00 00       	nop
	rtc_init();
    135e:	0e 94 65 01 	call	0x2ca	; 0x2ca <rtc_init>


	//changing the clock to 32MHz
	enable_oscillator(OSC_RC32MEN_bm);
    1362:	82 e0       	ldi	r24, 0x02	; 2
    1364:	0e 94 f5 01 	call	0x3ea	; 0x3ea <enable_oscillator>
}
/**
 * system clock dividing factor
 */
void sysclk_prescaler(CLK_PSADIV_t psbcdiva, CLK_PSBCDIV_t psbcdivb){
	ccp_ioreg();
    1368:	88 ed       	ldi	r24, 0xD8	; 216
    136a:	84 bf       	out	0x34, r24	; 52
	CLK.PSCTRL = psbcdiva | psbcdivb;
    136c:	10 92 41 00 	sts	0x0041, r1
	sysclk_prescaler(CLK_PSADIV_1_gc,CLK_PSBCDIV_1_1_gc);
	sysclk_source(CLK_SCLKSEL_RC32M_gc);
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <sysclk_source>
 * @param chsize character size
 * @param clk2en enable double speed
 * @param mpcen enable multiprocessor communication
 */
void usart_config(USART_t *usart_unit,PORT_t *port_unit, USART_CMODE_t mode, USART_PMODE_t pmode, USART_CHSIZE_t chsize, uint8_t clk2xen, uint8_t mpcmen){
	usart_unit->CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    1376:	e0 ea       	ldi	r30, 0xA0	; 160
    1378:	f8 e0       	ldi	r31, 0x08	; 8
    137a:	88 e1       	ldi	r24, 0x18	; 24
    137c:	84 83       	std	Z+4, r24	; 0x04
	usart_unit->CTRLB |= (clk2xen<<USART_CLK2X_bp) | (mpcmen<<USART_MPCM_bp);
    137e:	84 81       	ldd	r24, Z+4	; 0x04
    1380:	84 83       	std	Z+4, r24	; 0x04
	usart_unit->CTRLC = mode |pmode | chsize;
    1382:	83 e0       	ldi	r24, 0x03	; 3
    1384:	85 83       	std	Z+5, r24	; 0x05

	
	if( (usart_unit == &USARTC0) || (usart_unit == &USARTD0) || (usart_unit == &USARTE0) || (usart_unit == &USARTF0) ){
		port_unit->DIRSET = (1<<3);//USARTx0 TXD pin output
    1386:	a0 e4       	ldi	r26, 0x40	; 64
    1388:	b6 e0       	ldi	r27, 0x06	; 6
    138a:	88 e0       	ldi	r24, 0x08	; 8
    138c:	11 96       	adiw	r26, 0x01	; 1
    138e:	8c 93       	st	X, r24
    1390:	11 97       	sbiw	r26, 0x01	; 1
		port_unit->DIRCLR = (1<<2);//USARTx0 RXD pin input
    1392:	84 e0       	ldi	r24, 0x04	; 4
    1394:	12 96       	adiw	r26, 0x02	; 2
    1396:	8c 93       	st	X, r24
 * @param baud_rate
 * @param bscale_val
 */
void usart_baud(USART_t *usart, unsigned long baud_rate, int bscale_val){
	uint16_t bsel_val = BAUD_VALUE(baud_rate,bscale_val);
	usart->BAUDCTRLA = bsel_val;
    1398:	81 e8       	ldi	r24, 0x81	; 129
    139a:	86 83       	std	Z+6, r24	; 0x06
	usart->BAUDCTRLB = (bscale_val<<USART_BSCALE_gp) | (bsel_val>>8);
    139c:	86 ed       	ldi	r24, 0xD6	; 214
    139e:	87 83       	std	Z+7, r24	; 0x07

	usart_config(&USARTC0,&PORTC,USART_CMODE_ASYNCHRONOUS_gc,USART_PMODE_DISABLED_gc,USART_CHSIZE_8BIT_gc,false,false);
	usart_baud(&USARTC0,9600,-3);
	FILE my_stdio;
	create_file_stream(&my_stdio,&USARTC0_putchar,&USARTC0_getchar);
    13a0:	43 e2       	ldi	r20, 0x23	; 35
    13a2:	52 e0       	ldi	r21, 0x02	; 2
    13a4:	6b e0       	ldi	r22, 0x0B	; 11
    13a6:	72 e0       	ldi	r23, 0x02	; 2
    13a8:	8e 01       	movw	r16, r28
    13aa:	0f 5f       	subi	r16, 0xFF	; 255
    13ac:	1f 4f       	sbci	r17, 0xFF	; 255
    13ae:	c8 01       	movw	r24, r16
    13b0:	0e 94 60 02 	call	0x4c0	; 0x4c0 <create_file_stream>
/**
 * initializing the stdio file stream over uart
 */
void set_stdio_stream(FILE* stdio_file)
{
	stdout = stdin = stdio_file;
    13b4:	e0 e8       	ldi	r30, 0x80	; 128
    13b6:	fb e2       	ldi	r31, 0x2B	; 43
    13b8:	00 83       	st	Z, r16
    13ba:	11 83       	std	Z+1, r17	; 0x01
    13bc:	02 83       	std	Z+2, r16	; 0x02
    13be:	13 83       	std	Z+3, r17	; 0x03
	set_stdio_stream(&my_stdio);



	port_direction_set_mask(&PORTR,1<<0);
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	80 93 e1 07 	sts	0x07E1, r24
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
    13c6:	86 e8       	ldi	r24, 0x86	; 134
    13c8:	97 e2       	ldi	r25, 0x27	; 39
    13ca:	80 93 84 27 	sts	0x2784, r24
    13ce:	90 93 85 27 	sts	0x2785, r25
	uint8_t page;
	uint8_t column;

	gfx_mono_set_framebuffer(framebuffer);

	ssd1306_init();
    13d2:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <ssd1306_init>
    13d6:	10 e0       	ldi	r17, 0x00	; 0
	{
		ssd1306_set_page_address(page);
    13d8:	81 2f       	mov	r24, r17
    13da:	0e 94 a3 02 	call	0x546	; 0x546 <ssd1306_set_page_address>
		ssd1306_set_column_address(0);
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	0e 94 a8 02 	call	0x550	; 0x550 <ssd1306_set_column_address>
    13e4:	00 e0       	ldi	r16, 0x00	; 0
		for (col = 0; col < 128; ++col)
		{
			ssd1306_write_data(0x00);
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	0e 94 81 02 	call	0x502	; 0x502 <ssd1306_write_data>

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
		for (col = 0; col < 128; ++col)
    13ec:	0f 5f       	subi	r16, 0xFF	; 255
    13ee:	00 38       	cpi	r16, 0x80	; 128
    13f0:	d1 f7       	brne	.-12     	; 0x13e6 <main+0x9a>
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
    13f2:	1f 5f       	subi	r17, 0xFF	; 255
    13f4:	14 30       	cpi	r17, 0x04	; 4
    13f6:	81 f7       	brne	.-32     	; 0x13d8 <main+0x8c>
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(address));
    13f8:	80 e4       	ldi	r24, 0x40	; 64
    13fa:	0e 94 4a 02 	call	0x494	; 0x494 <ssd1306_write_command>
	ssd1306_clear();

	ssd1306_set_display_start_line_address(0);


	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
    13fe:	10 e0       	ldi	r17, 0x00	; 0
    1400:	0c c0       	rjmp	.+24     	; 0x141a <main+0xce>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_ssd1306_put_byte(page, column, 0x00, 1);
    1402:	21 e0       	ldi	r18, 0x01	; 1
    1404:	40 e0       	ldi	r20, 0x00	; 0
    1406:	60 2f       	mov	r22, r16
    1408:	81 2f       	mov	r24, r17
    140a:	0e 94 d7 03 	call	0x7ae	; 0x7ae <gfx_mono_ssd1306_put_byte>

	ssd1306_set_display_start_line_address(0);


	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
    140e:	0f 5f       	subi	r16, 0xFF	; 255
    1410:	00 38       	cpi	r16, 0x80	; 128
    1412:	b9 f7       	brne	.-18     	; 0x1402 <main+0xb6>
	ssd1306_clear();

	ssd1306_set_display_start_line_address(0);


	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
    1414:	1f 5f       	subi	r17, 0xFF	; 255
    1416:	14 30       	cpi	r17, 0x04	; 4
    1418:	11 f0       	breq	.+4      	; 0x141e <main+0xd2>
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
    141a:	00 e0       	ldi	r16, 0x00	; 0
    141c:	f2 cf       	rjmp	.-28     	; 0x1402 <main+0xb6>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_ssd1306_put_byte(page, column, 0x00, 1);
		}
	}

	ssd1306_set_page_address(0);
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	0e 94 a3 02 	call	0x546	; 0x546 <ssd1306_set_page_address>
	ssd1306_write_text("EMON");
    1424:	84 e1       	ldi	r24, 0x14	; 20
    1426:	95 e2       	ldi	r25, 0x25	; 37
    1428:	0e 94 87 03 	call	0x70e	; 0x70e <ssd1306_write_text>

	rtc_ms_delay(1000);
    142c:	88 ee       	ldi	r24, 0xE8	; 232
    142e:	93 e0       	ldi	r25, 0x03	; 3
    1430:	0e 94 7d 01 	call	0x2fa	; 0x2fa <rtc_ms_delay>

	lcd_line_print(0,"EMON YOU ROCK");
    1434:	69 e1       	ldi	r22, 0x19	; 25
    1436:	75 e2       	ldi	r23, 0x25	; 37
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	0e 94 7f 09 	call	0x12fe	; 0x12fe <lcd_line_print>

	esp8266_serial_init();
    1440:	0e 94 f5 03 	call	0x7ea	; 0x7ea <esp8266_serial_init>

	printf("starting system\n");
    1444:	87 e2       	ldi	r24, 0x27	; 39
    1446:	95 e2       	ldi	r25, 0x25	; 37
    1448:	0e 94 09 0c 	call	0x1812	; 0x1812 <puts>
	
	printf("-----------------------------------------------------------\n");
    144c:	87 e3       	ldi	r24, 0x37	; 55
    144e:	95 e2       	ldi	r25, 0x25	; 37
    1450:	0e 94 09 0c 	call	0x1812	; 0x1812 <puts>

#define mqtt_callback_on_message "function(conn, topic, data) print(topic .. \":\" ) if data ~= nil then print(data) end end"

// 
	//esp8266_getmode();
	esp8266_setmode(ESP8266_WIFI_MODE_STATION);
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	0e 94 12 06 	call	0xc24	; 0xc24 <esp8266_setmode>
	esp8266_available_AP_t myAPdata[10];
	int n = esp8266_sta_getap(3000,myAPdata);
    145a:	ae 01       	movw	r20, r28
    145c:	41 5f       	subi	r20, 0xF1	; 241
    145e:	5f 4f       	sbci	r21, 0xFF	; 255
    1460:	68 eb       	ldi	r22, 0xB8	; 184
    1462:	7b e0       	ldi	r23, 0x0B	; 11
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	0e 94 d1 06 	call	0xda2	; 0xda2 <esp8266_sta_getap>
	
	for(int i=0;i<n;i++){
    146c:	18 16       	cp	r1, r24
    146e:	19 06       	cpc	r1, r25
    1470:	04 f5       	brge	.+64     	; 0x14b2 <main+0x166>
    1472:	8e 01       	movw	r16, r28
    1474:	01 5f       	subi	r16, 0xF1	; 241
    1476:	1f 4f       	sbci	r17, 0xFF	; 255
    1478:	29 e3       	ldi	r18, 0x39	; 57
    147a:	28 9f       	mul	r18, r24
    147c:	60 01       	movw	r12, r0
    147e:	29 9f       	mul	r18, r25
    1480:	d0 0c       	add	r13, r0
    1482:	11 24       	eor	r1, r1
    1484:	c0 0e       	add	r12, r16
    1486:	d1 1e       	adc	r13, r17
		printf("available ssid : %s\n" , myAPdata[i].BSSID);
    1488:	0f 2e       	mov	r0, r31
    148a:	f3 e7       	ldi	r31, 0x73	; 115
    148c:	af 2e       	mov	r10, r31
    148e:	f5 e2       	ldi	r31, 0x25	; 37
    1490:	bf 2e       	mov	r11, r31
    1492:	f0 2d       	mov	r31, r0
    1494:	1f 93       	push	r17
    1496:	0f 93       	push	r16
    1498:	bf 92       	push	r11
    149a:	af 92       	push	r10
    149c:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <printf>
    14a0:	07 5c       	subi	r16, 0xC7	; 199
    14a2:	1f 4f       	sbci	r17, 0xFF	; 255
	//esp8266_getmode();
	esp8266_setmode(ESP8266_WIFI_MODE_STATION);
	esp8266_available_AP_t myAPdata[10];
	int n = esp8266_sta_getap(3000,myAPdata);
	
	for(int i=0;i<n;i++){
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	0c 15       	cp	r16, r12
    14ae:	1d 05       	cpc	r17, r13
    14b0:	89 f7       	brne	.-30     	; 0x1494 <main+0x148>
		printf("available ssid : %s\n" , myAPdata[i].BSSID);
	}
	
	
	esp8266_sta_config("Emon","19031992",NULL,NULL);
    14b2:	20 e0       	ldi	r18, 0x00	; 0
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	40 e0       	ldi	r20, 0x00	; 0
    14b8:	68 e8       	ldi	r22, 0x88	; 136
    14ba:	75 e2       	ldi	r23, 0x25	; 37
    14bc:	81 e9       	ldi	r24, 0x91	; 145
    14be:	95 e2       	ldi	r25, 0x25	; 37
    14c0:	0e 94 7e 06 	call	0xcfc	; 0xcfc <esp8266_sta_config>
	printf("\nthe wifi mode is %d\n", esp8266_getmode());
    14c4:	0e 94 ca 05 	call	0xb94	; 0xb94 <esp8266_getmode>
    14c8:	9f 93       	push	r25
    14ca:	8f 93       	push	r24
    14cc:	86 e9       	ldi	r24, 0x96	; 150
    14ce:	95 e2       	ldi	r25, 0x25	; 37
    14d0:	9f 93       	push	r25
    14d2:	8f 93       	push	r24
    14d4:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <printf>
	esp8266_sta_getmac();
    14d8:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <esp8266_sta_getmac>

 
  	//esp8266_uart_setup(0,9600,8,ESP8266_UART_PARITY_NONE,ESP8266_UART_STOPBITS_1,0);
// 
 	esp8266_sta_getip();
    14dc:	0e 94 b0 07 	call	0xf60	; 0xf60 <esp8266_sta_getip>
 	esp8266_sta_get_status();
    14e0:	0e 94 10 08 	call	0x1020	; 0x1020 <esp8266_sta_get_status>
	lcd_line_print(0,"HABIBUR RAHMAN");
    14e4:	6c ea       	ldi	r22, 0xAC	; 172
    14e6:	75 e2       	ldi	r23, 0x25	; 37
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	0e 94 7f 09 	call	0x12fe	; 0x12fe <lcd_line_print>
// 	
	esp8266_mqtt_create_client("m","clientid", 30 , "user", "password");
    14f0:	0b eb       	ldi	r16, 0xBB	; 187
    14f2:	15 e2       	ldi	r17, 0x25	; 37
    14f4:	24 ec       	ldi	r18, 0xC4	; 196
    14f6:	35 e2       	ldi	r19, 0x25	; 37
    14f8:	4e e1       	ldi	r20, 0x1E	; 30
    14fa:	50 e0       	ldi	r21, 0x00	; 0
    14fc:	69 ec       	ldi	r22, 0xC9	; 201
    14fe:	75 e2       	ldi	r23, 0x25	; 37
    1500:	85 e3       	ldi	r24, 0x35	; 53
    1502:	95 e2       	ldi	r25, 0x25	; 37
    1504:	0e 94 50 08 	call	0x10a0	; 0x10a0 <esp8266_mqtt_create_client>
	esp8266_mqtt_client_connect("m","emon.dlinkddns.com",9000,0,"function(conn) print(\"m:connected\") end");
    1508:	02 ed       	ldi	r16, 0xD2	; 210
    150a:	15 e2       	ldi	r17, 0x25	; 37
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	48 e2       	ldi	r20, 0x28	; 40
    1510:	53 e2       	ldi	r21, 0x23	; 35
    1512:	6a ef       	ldi	r22, 0xFA	; 250
    1514:	75 e2       	ldi	r23, 0x25	; 37
    1516:	85 e3       	ldi	r24, 0x35	; 53
    1518:	95 e2       	ldi	r25, 0x25	; 37
    151a:	0e 94 8d 08 	call	0x111a	; 0x111a <esp8266_mqtt_client_connect>
	esp8266_mqtt_client_subscribe("m","sky2",0,"function(conn) print(\"subscribed\") end");
    151e:	2d e0       	ldi	r18, 0x0D	; 13
    1520:	36 e2       	ldi	r19, 0x26	; 38
    1522:	40 e0       	ldi	r20, 0x00	; 0
    1524:	50 e0       	ldi	r21, 0x00	; 0
    1526:	64 e3       	ldi	r22, 0x34	; 52
    1528:	76 e2       	ldi	r23, 0x26	; 38
    152a:	85 e3       	ldi	r24, 0x35	; 53
    152c:	95 e2       	ldi	r25, 0x25	; 37
    152e:	0e 94 0d 09 	call	0x121a	; 0x121a <esp8266_mqtt_client_subscribe>
	esp8266_mqtt_client_callback_on_message("m",mqtt_callback_on_message);
    1532:	69 e3       	ldi	r22, 0x39	; 57
    1534:	76 e2       	ldi	r23, 0x26	; 38
    1536:	85 e3       	ldi	r24, 0x35	; 53
    1538:	95 e2       	ldi	r25, 0x25	; 37
    153a:	0e 94 48 09 	call	0x1290	; 0x1290 <esp8266_mqtt_client_callback_on_message>
	
	
	esp8266_mqtt_create_client("n","clientid", 30 , "user", "password");
    153e:	0b eb       	ldi	r16, 0xBB	; 187
    1540:	15 e2       	ldi	r17, 0x25	; 37
    1542:	24 ec       	ldi	r18, 0xC4	; 196
    1544:	35 e2       	ldi	r19, 0x25	; 37
    1546:	4e e1       	ldi	r20, 0x1E	; 30
    1548:	50 e0       	ldi	r21, 0x00	; 0
    154a:	69 ec       	ldi	r22, 0xC9	; 201
    154c:	75 e2       	ldi	r23, 0x25	; 37
    154e:	84 e9       	ldi	r24, 0x94	; 148
    1550:	95 e2       	ldi	r25, 0x25	; 37
    1552:	0e 94 50 08 	call	0x10a0	; 0x10a0 <esp8266_mqtt_create_client>
	esp8266_mqtt_client_connect("n","broker.hivemq.com",1883,0,"function(conn) print(\"n:connected\") end");
    1556:	02 e9       	ldi	r16, 0x92	; 146
    1558:	16 e2       	ldi	r17, 0x26	; 38
    155a:	20 e0       	ldi	r18, 0x00	; 0
    155c:	4b e5       	ldi	r20, 0x5B	; 91
    155e:	57 e0       	ldi	r21, 0x07	; 7
    1560:	6a eb       	ldi	r22, 0xBA	; 186
    1562:	76 e2       	ldi	r23, 0x26	; 38
    1564:	84 e9       	ldi	r24, 0x94	; 148
    1566:	95 e2       	ldi	r25, 0x25	; 37
    1568:	0e 94 8d 08 	call	0x111a	; 0x111a <esp8266_mqtt_client_connect>
	esp8266_mqtt_client_subscribe("n","dog",0,"function(conn) print(\"subscribed\") end");
    156c:	2d e0       	ldi	r18, 0x0D	; 13
    156e:	36 e2       	ldi	r19, 0x26	; 38
    1570:	40 e0       	ldi	r20, 0x00	; 0
    1572:	50 e0       	ldi	r21, 0x00	; 0
    1574:	6c ec       	ldi	r22, 0xCC	; 204
    1576:	76 e2       	ldi	r23, 0x26	; 38
    1578:	84 e9       	ldi	r24, 0x94	; 148
    157a:	95 e2       	ldi	r25, 0x25	; 37
    157c:	0e 94 0d 09 	call	0x121a	; 0x121a <esp8266_mqtt_client_subscribe>
	esp8266_mqtt_client_callback_on_message("n",mqtt_callback_on_message);
    1580:	69 e3       	ldi	r22, 0x39	; 57
    1582:	76 e2       	ldi	r23, 0x26	; 38
    1584:	84 e9       	ldi	r24, 0x94	; 148
    1586:	95 e2       	ldi	r25, 0x25	; 37
    1588:	0e 94 48 09 	call	0x1290	; 0x1290 <esp8266_mqtt_client_callback_on_message>
    158c:	0f 90       	pop	r0
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
    1592:	0f 90       	pop	r0
	char tempcmd[50]; 
	char tempdata[100];  
	while (1)
    {

		esp8266_rx_buff_receive(mydata);
    1594:	6e 01       	movw	r12, r28
    1596:	87 eb       	ldi	r24, 0xB7	; 183
    1598:	c8 1a       	sub	r12, r24
    159a:	8d ef       	ldi	r24, 0xFD	; 253
    159c:	d8 0a       	sbc	r13, r24
			
			esp8266_mqtt_client_subscribe("m","sky2",0,"function(conn) print(\"subscribed\") end");

		}
		else if(!strcmp(mydata, "n:connected\r\n")){
			printf("RECONNECTING NOW!!!");
    159e:	0f 2e       	mov	r0, r31
    15a0:	f7 e6       	ldi	r31, 0x67	; 103
    15a2:	6f 2e       	mov	r6, r31
    15a4:	f7 e2       	ldi	r31, 0x27	; 39
    15a6:	7f 2e       	mov	r7, r31
    15a8:	f0 2d       	mov	r31, r0
			
			esp8266_mqtt_client_publish("m","sky","test reply .. by emon",0,0,"function(conn) print(\"sent\") end");
			printf(mydata2);
		}
		else if(!strcmp(mydata, "m:connected\r\n")){
			printf("RECONNECTING NOWWWWW!!!");
    15aa:	0f 2e       	mov	r0, r31
    15ac:	f1 e4       	ldi	r31, 0x41	; 65
    15ae:	8f 2e       	mov	r8, r31
    15b0:	f7 e2       	ldi	r31, 0x27	; 39
    15b2:	9f 2e       	mov	r9, r31
    15b4:	f0 2d       	mov	r31, r0
		esp8266_rx_buff_receive(mydata);
		if(!strcmp(mydata, "sky2:\r\nkaminey\r\n")){
			printf("\n\n******fuck you*****\n\n");
			
			esp8266_mqtt_client_publish("m","sky","test reply .. by emon",0,0,"function(conn) print(\"sent\") end");
			printf(mydata2);
    15b6:	5e 01       	movw	r10, r28
    15b8:	83 e5       	ldi	r24, 0x53	; 83
    15ba:	a8 1a       	sub	r10, r24
    15bc:	8d ef       	ldi	r24, 0xFD	; 253
    15be:	b8 0a       	sbc	r11, r24
	char tempcmd[50]; 
	char tempdata[100];  
	while (1)
    {

		esp8266_rx_buff_receive(mydata);
    15c0:	c6 01       	movw	r24, r12
    15c2:	0e 94 0d 04 	call	0x81a	; 0x81a <esp8266_rx_buff_receive>
		if(!strcmp(mydata, "sky2:\r\nkaminey\r\n")){
    15c6:	60 ed       	ldi	r22, 0xD0	; 208
    15c8:	76 e2       	ldi	r23, 0x26	; 38
    15ca:	c6 01       	movw	r24, r12
    15cc:	0e 94 b6 0b 	call	0x176c	; 0x176c <strcmp>
    15d0:	89 2b       	or	r24, r25
    15d2:	e1 f4       	brne	.+56     	; 0x160c <main+0x2c0>
			printf("\n\n******fuck you*****\n\n");
    15d4:	81 ee       	ldi	r24, 0xE1	; 225
    15d6:	96 e2       	ldi	r25, 0x26	; 38
    15d8:	0e 94 09 0c 	call	0x1812	; 0x1812 <puts>
			
			esp8266_mqtt_client_publish("m","sky","test reply .. by emon",0,0,"function(conn) print(\"sent\") end");
    15dc:	0f 2e       	mov	r0, r31
    15de:	f8 ef       	ldi	r31, 0xF8	; 248
    15e0:	ef 2e       	mov	r14, r31
    15e2:	f6 e2       	ldi	r31, 0x26	; 38
    15e4:	ff 2e       	mov	r15, r31
    15e6:	f0 2d       	mov	r31, r0
    15e8:	00 e0       	ldi	r16, 0x00	; 0
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	49 e1       	ldi	r20, 0x19	; 25
    15f0:	57 e2       	ldi	r21, 0x27	; 39
    15f2:	6f e2       	ldi	r22, 0x2F	; 47
    15f4:	77 e2       	ldi	r23, 0x27	; 39
    15f6:	85 e3       	ldi	r24, 0x35	; 53
    15f8:	95 e2       	ldi	r25, 0x25	; 37
    15fa:	0e 94 ce 08 	call	0x119c	; 0x119c <esp8266_mqtt_client_publish>
			printf(mydata2);
    15fe:	bf 92       	push	r11
    1600:	af 92       	push	r10
    1602:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <printf>
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	2f c0       	rjmp	.+94     	; 0x166a <main+0x31e>
		}
		else if(!strcmp(mydata, "m:connected\r\n")){
    160c:	63 e3       	ldi	r22, 0x33	; 51
    160e:	77 e2       	ldi	r23, 0x27	; 39
    1610:	c6 01       	movw	r24, r12
    1612:	0e 94 b6 0b 	call	0x176c	; 0x176c <strcmp>
    1616:	89 2b       	or	r24, r25
    1618:	89 f4       	brne	.+34     	; 0x163c <main+0x2f0>
			printf("RECONNECTING NOWWWWW!!!");
    161a:	9f 92       	push	r9
    161c:	8f 92       	push	r8
    161e:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <printf>
			
			esp8266_mqtt_client_subscribe("m","sky2",0,"function(conn) print(\"subscribed\") end");
    1622:	2d e0       	ldi	r18, 0x0D	; 13
    1624:	36 e2       	ldi	r19, 0x26	; 38
    1626:	40 e0       	ldi	r20, 0x00	; 0
    1628:	50 e0       	ldi	r21, 0x00	; 0
    162a:	64 e3       	ldi	r22, 0x34	; 52
    162c:	76 e2       	ldi	r23, 0x26	; 38
    162e:	85 e3       	ldi	r24, 0x35	; 53
    1630:	95 e2       	ldi	r25, 0x25	; 37
    1632:	0e 94 0d 09 	call	0x121a	; 0x121a <esp8266_mqtt_client_subscribe>
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
    163a:	17 c0       	rjmp	.+46     	; 0x166a <main+0x31e>

		}
		else if(!strcmp(mydata, "n:connected\r\n")){
    163c:	69 e5       	ldi	r22, 0x59	; 89
    163e:	77 e2       	ldi	r23, 0x27	; 39
    1640:	c6 01       	movw	r24, r12
    1642:	0e 94 b6 0b 	call	0x176c	; 0x176c <strcmp>
    1646:	89 2b       	or	r24, r25
    1648:	81 f4       	brne	.+32     	; 0x166a <main+0x31e>
			printf("RECONNECTING NOW!!!");
    164a:	7f 92       	push	r7
    164c:	6f 92       	push	r6
    164e:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <printf>
					
			esp8266_mqtt_client_subscribe("n","dog",0,"function(conn) print(\"subscribed\") end");
    1652:	2d e0       	ldi	r18, 0x0D	; 13
    1654:	36 e2       	ldi	r19, 0x26	; 38
    1656:	40 e0       	ldi	r20, 0x00	; 0
    1658:	50 e0       	ldi	r21, 0x00	; 0
    165a:	6c ec       	ldi	r22, 0xCC	; 204
    165c:	76 e2       	ldi	r23, 0x26	; 38
    165e:	84 e9       	ldi	r24, 0x94	; 148
    1660:	95 e2       	ldi	r25, 0x25	; 37
    1662:	0e 94 0d 09 	call	0x121a	; 0x121a <esp8266_mqtt_client_subscribe>
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0

		}
		printf(mydata);
    166a:	df 92       	push	r13
    166c:	cf 92       	push	r12
    166e:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <printf>
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
    1676:	00 e0       	ldi	r16, 0x00	; 0
	{
		ssd1306_set_page_address(page);
    1678:	80 2f       	mov	r24, r16
    167a:	0e 94 a3 02 	call	0x546	; 0x546 <ssd1306_set_page_address>
		ssd1306_set_column_address(0);
    167e:	80 e0       	ldi	r24, 0x00	; 0
    1680:	0e 94 a8 02 	call	0x550	; 0x550 <ssd1306_set_column_address>
    1684:	10 e0       	ldi	r17, 0x00	; 0
		for (col = 0; col < 128; ++col)
		{
			ssd1306_write_data(0x00);
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	0e 94 81 02 	call	0x502	; 0x502 <ssd1306_write_data>

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
		for (col = 0; col < 128; ++col)
    168c:	1f 5f       	subi	r17, 0xFF	; 255
    168e:	10 38       	cpi	r17, 0x80	; 128
    1690:	d1 f7       	brne	.-12     	; 0x1686 <main+0x33a>
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
    1692:	0f 5f       	subi	r16, 0xFF	; 255
    1694:	04 30       	cpi	r16, 0x04	; 4
    1696:	81 f7       	brne	.-32     	; 0x1678 <main+0x32c>
		ssd1306_clear();
		ssd1306_set_page_address(0);
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	0e 94 a3 02 	call	0x546	; 0x546 <ssd1306_set_page_address>
		ssd1306_write_text(mydata);
    169e:	c6 01       	movw	r24, r12
    16a0:	0e 94 87 03 	call	0x70e	; 0x70e <ssd1306_write_text>
		
		
	}
    16a4:	8d cf       	rjmp	.-230    	; 0x15c0 <main+0x274>

000016a6 <__udivmodsi4>:
    16a6:	a1 e2       	ldi	r26, 0x21	; 33
    16a8:	1a 2e       	mov	r1, r26
    16aa:	aa 1b       	sub	r26, r26
    16ac:	bb 1b       	sub	r27, r27
    16ae:	fd 01       	movw	r30, r26
    16b0:	0d c0       	rjmp	.+26     	; 0x16cc <__udivmodsi4_ep>

000016b2 <__udivmodsi4_loop>:
    16b2:	aa 1f       	adc	r26, r26
    16b4:	bb 1f       	adc	r27, r27
    16b6:	ee 1f       	adc	r30, r30
    16b8:	ff 1f       	adc	r31, r31
    16ba:	a2 17       	cp	r26, r18
    16bc:	b3 07       	cpc	r27, r19
    16be:	e4 07       	cpc	r30, r20
    16c0:	f5 07       	cpc	r31, r21
    16c2:	20 f0       	brcs	.+8      	; 0x16cc <__udivmodsi4_ep>
    16c4:	a2 1b       	sub	r26, r18
    16c6:	b3 0b       	sbc	r27, r19
    16c8:	e4 0b       	sbc	r30, r20
    16ca:	f5 0b       	sbc	r31, r21

000016cc <__udivmodsi4_ep>:
    16cc:	66 1f       	adc	r22, r22
    16ce:	77 1f       	adc	r23, r23
    16d0:	88 1f       	adc	r24, r24
    16d2:	99 1f       	adc	r25, r25
    16d4:	1a 94       	dec	r1
    16d6:	69 f7       	brne	.-38     	; 0x16b2 <__udivmodsi4_loop>
    16d8:	60 95       	com	r22
    16da:	70 95       	com	r23
    16dc:	80 95       	com	r24
    16de:	90 95       	com	r25
    16e0:	9b 01       	movw	r18, r22
    16e2:	ac 01       	movw	r20, r24
    16e4:	bd 01       	movw	r22, r26
    16e6:	cf 01       	movw	r24, r30
    16e8:	08 95       	ret

000016ea <__divmodsi4>:
    16ea:	05 2e       	mov	r0, r21
    16ec:	97 fb       	bst	r25, 7
    16ee:	1e f4       	brtc	.+6      	; 0x16f6 <__divmodsi4+0xc>
    16f0:	00 94       	com	r0
    16f2:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__negsi2>
    16f6:	57 fd       	sbrc	r21, 7
    16f8:	07 d0       	rcall	.+14     	; 0x1708 <__divmodsi4_neg2>
    16fa:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <__udivmodsi4>
    16fe:	07 fc       	sbrc	r0, 7
    1700:	03 d0       	rcall	.+6      	; 0x1708 <__divmodsi4_neg2>
    1702:	4e f4       	brtc	.+18     	; 0x1716 <__divmodsi4_exit>
    1704:	0c 94 8c 0b 	jmp	0x1718	; 0x1718 <__negsi2>

00001708 <__divmodsi4_neg2>:
    1708:	50 95       	com	r21
    170a:	40 95       	com	r20
    170c:	30 95       	com	r19
    170e:	21 95       	neg	r18
    1710:	3f 4f       	sbci	r19, 0xFF	; 255
    1712:	4f 4f       	sbci	r20, 0xFF	; 255
    1714:	5f 4f       	sbci	r21, 0xFF	; 255

00001716 <__divmodsi4_exit>:
    1716:	08 95       	ret

00001718 <__negsi2>:
    1718:	90 95       	com	r25
    171a:	80 95       	com	r24
    171c:	70 95       	com	r23
    171e:	61 95       	neg	r22
    1720:	7f 4f       	sbci	r23, 0xFF	; 255
    1722:	8f 4f       	sbci	r24, 0xFF	; 255
    1724:	9f 4f       	sbci	r25, 0xFF	; 255
    1726:	08 95       	ret

00001728 <atoi>:
    1728:	fc 01       	movw	r30, r24
    172a:	88 27       	eor	r24, r24
    172c:	99 27       	eor	r25, r25
    172e:	e8 94       	clt
    1730:	21 91       	ld	r18, Z+
    1732:	20 32       	cpi	r18, 0x20	; 32
    1734:	e9 f3       	breq	.-6      	; 0x1730 <atoi+0x8>
    1736:	29 30       	cpi	r18, 0x09	; 9
    1738:	10 f0       	brcs	.+4      	; 0x173e <atoi+0x16>
    173a:	2e 30       	cpi	r18, 0x0E	; 14
    173c:	c8 f3       	brcs	.-14     	; 0x1730 <atoi+0x8>
    173e:	2b 32       	cpi	r18, 0x2B	; 43
    1740:	41 f0       	breq	.+16     	; 0x1752 <atoi+0x2a>
    1742:	2d 32       	cpi	r18, 0x2D	; 45
    1744:	39 f4       	brne	.+14     	; 0x1754 <atoi+0x2c>
    1746:	68 94       	set
    1748:	04 c0       	rjmp	.+8      	; 0x1752 <atoi+0x2a>
    174a:	0e 94 ed 0b 	call	0x17da	; 0x17da <__mulhi_const_10>
    174e:	82 0f       	add	r24, r18
    1750:	91 1d       	adc	r25, r1
    1752:	21 91       	ld	r18, Z+
    1754:	20 53       	subi	r18, 0x30	; 48
    1756:	2a 30       	cpi	r18, 0x0A	; 10
    1758:	c0 f3       	brcs	.-16     	; 0x174a <atoi+0x22>
    175a:	1e f4       	brtc	.+6      	; 0x1762 <atoi+0x3a>
    175c:	90 95       	com	r25
    175e:	81 95       	neg	r24
    1760:	9f 4f       	sbci	r25, 0xFF	; 255
    1762:	08 95       	ret

00001764 <strtok>:
    1764:	4c e7       	ldi	r20, 0x7C	; 124
    1766:	57 e2       	ldi	r21, 0x27	; 39
    1768:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <strtok_r>

0000176c <strcmp>:
    176c:	fb 01       	movw	r30, r22
    176e:	dc 01       	movw	r26, r24
    1770:	8d 91       	ld	r24, X+
    1772:	01 90       	ld	r0, Z+
    1774:	80 19       	sub	r24, r0
    1776:	01 10       	cpse	r0, r1
    1778:	d9 f3       	breq	.-10     	; 0x1770 <strcmp+0x4>
    177a:	99 0b       	sbc	r25, r25
    177c:	08 95       	ret

0000177e <strcpy>:
    177e:	fb 01       	movw	r30, r22
    1780:	dc 01       	movw	r26, r24
    1782:	01 90       	ld	r0, Z+
    1784:	0d 92       	st	X+, r0
    1786:	00 20       	and	r0, r0
    1788:	e1 f7       	brne	.-8      	; 0x1782 <strcpy+0x4>
    178a:	08 95       	ret

0000178c <strtok_r>:
    178c:	fa 01       	movw	r30, r20
    178e:	a1 91       	ld	r26, Z+
    1790:	b0 81       	ld	r27, Z
    1792:	00 97       	sbiw	r24, 0x00	; 0
    1794:	19 f4       	brne	.+6      	; 0x179c <strtok_r+0x10>
    1796:	10 97       	sbiw	r26, 0x00	; 0
    1798:	e1 f0       	breq	.+56     	; 0x17d2 <strtok_r+0x46>
    179a:	cd 01       	movw	r24, r26
    179c:	dc 01       	movw	r26, r24
    179e:	cd 01       	movw	r24, r26
    17a0:	0d 90       	ld	r0, X+
    17a2:	00 20       	and	r0, r0
    17a4:	11 f4       	brne	.+4      	; 0x17aa <strtok_r+0x1e>
    17a6:	c0 01       	movw	r24, r0
    17a8:	13 c0       	rjmp	.+38     	; 0x17d0 <strtok_r+0x44>
    17aa:	fb 01       	movw	r30, r22
    17ac:	21 91       	ld	r18, Z+
    17ae:	22 23       	and	r18, r18
    17b0:	19 f0       	breq	.+6      	; 0x17b8 <strtok_r+0x2c>
    17b2:	20 15       	cp	r18, r0
    17b4:	d9 f7       	brne	.-10     	; 0x17ac <strtok_r+0x20>
    17b6:	f3 cf       	rjmp	.-26     	; 0x179e <strtok_r+0x12>
    17b8:	fb 01       	movw	r30, r22
    17ba:	21 91       	ld	r18, Z+
    17bc:	20 15       	cp	r18, r0
    17be:	19 f4       	brne	.+6      	; 0x17c6 <strtok_r+0x3a>
    17c0:	1e 92       	st	-X, r1
    17c2:	11 96       	adiw	r26, 0x01	; 1
    17c4:	06 c0       	rjmp	.+12     	; 0x17d2 <strtok_r+0x46>
    17c6:	22 23       	and	r18, r18
    17c8:	c1 f7       	brne	.-16     	; 0x17ba <strtok_r+0x2e>
    17ca:	0d 90       	ld	r0, X+
    17cc:	00 20       	and	r0, r0
    17ce:	a1 f7       	brne	.-24     	; 0x17b8 <strtok_r+0x2c>
    17d0:	d0 01       	movw	r26, r0
    17d2:	fa 01       	movw	r30, r20
    17d4:	a1 93       	st	Z+, r26
    17d6:	b0 83       	st	Z, r27
    17d8:	08 95       	ret

000017da <__mulhi_const_10>:
    17da:	7a e0       	ldi	r23, 0x0A	; 10
    17dc:	97 9f       	mul	r25, r23
    17de:	90 2d       	mov	r25, r0
    17e0:	87 9f       	mul	r24, r23
    17e2:	80 2d       	mov	r24, r0
    17e4:	91 0d       	add	r25, r1
    17e6:	11 24       	eor	r1, r1
    17e8:	08 95       	ret

000017ea <printf>:
    17ea:	cf 93       	push	r28
    17ec:	df 93       	push	r29
    17ee:	cd b7       	in	r28, 0x3d	; 61
    17f0:	de b7       	in	r29, 0x3e	; 62
    17f2:	ae 01       	movw	r20, r28
    17f4:	4a 5f       	subi	r20, 0xFA	; 250
    17f6:	5f 4f       	sbci	r21, 0xFF	; 255
    17f8:	fa 01       	movw	r30, r20
    17fa:	61 91       	ld	r22, Z+
    17fc:	71 91       	ld	r23, Z+
    17fe:	af 01       	movw	r20, r30
    1800:	80 91 82 2b 	lds	r24, 0x2B82
    1804:	90 91 83 2b 	lds	r25, 0x2B83
    1808:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <vfprintf>
    180c:	df 91       	pop	r29
    180e:	cf 91       	pop	r28
    1810:	08 95       	ret

00001812 <puts>:
    1812:	0f 93       	push	r16
    1814:	1f 93       	push	r17
    1816:	cf 93       	push	r28
    1818:	df 93       	push	r29
    181a:	e0 91 82 2b 	lds	r30, 0x2B82
    181e:	f0 91 83 2b 	lds	r31, 0x2B83
    1822:	23 81       	ldd	r18, Z+3	; 0x03
    1824:	21 ff       	sbrs	r18, 1
    1826:	1b c0       	rjmp	.+54     	; 0x185e <puts+0x4c>
    1828:	8c 01       	movw	r16, r24
    182a:	d0 e0       	ldi	r29, 0x00	; 0
    182c:	c0 e0       	ldi	r28, 0x00	; 0
    182e:	f8 01       	movw	r30, r16
    1830:	81 91       	ld	r24, Z+
    1832:	8f 01       	movw	r16, r30
    1834:	60 91 82 2b 	lds	r22, 0x2B82
    1838:	70 91 83 2b 	lds	r23, 0x2B83
    183c:	db 01       	movw	r26, r22
    183e:	18 96       	adiw	r26, 0x08	; 8
    1840:	ed 91       	ld	r30, X+
    1842:	fc 91       	ld	r31, X
    1844:	19 97       	sbiw	r26, 0x09	; 9
    1846:	88 23       	and	r24, r24
    1848:	31 f0       	breq	.+12     	; 0x1856 <puts+0x44>
    184a:	19 95       	eicall
    184c:	89 2b       	or	r24, r25
    184e:	79 f3       	breq	.-34     	; 0x182e <puts+0x1c>
    1850:	df ef       	ldi	r29, 0xFF	; 255
    1852:	cf ef       	ldi	r28, 0xFF	; 255
    1854:	ec cf       	rjmp	.-40     	; 0x182e <puts+0x1c>
    1856:	8a e0       	ldi	r24, 0x0A	; 10
    1858:	19 95       	eicall
    185a:	89 2b       	or	r24, r25
    185c:	19 f0       	breq	.+6      	; 0x1864 <puts+0x52>
    185e:	8f ef       	ldi	r24, 0xFF	; 255
    1860:	9f ef       	ldi	r25, 0xFF	; 255
    1862:	02 c0       	rjmp	.+4      	; 0x1868 <puts+0x56>
    1864:	8d 2f       	mov	r24, r29
    1866:	9c 2f       	mov	r25, r28
    1868:	df 91       	pop	r29
    186a:	cf 91       	pop	r28
    186c:	1f 91       	pop	r17
    186e:	0f 91       	pop	r16
    1870:	08 95       	ret

00001872 <sprintf>:
    1872:	0f 93       	push	r16
    1874:	1f 93       	push	r17
    1876:	cf 93       	push	r28
    1878:	df 93       	push	r29
    187a:	cd b7       	in	r28, 0x3d	; 61
    187c:	de b7       	in	r29, 0x3e	; 62
    187e:	2e 97       	sbiw	r28, 0x0e	; 14
    1880:	cd bf       	out	0x3d, r28	; 61
    1882:	de bf       	out	0x3e, r29	; 62
    1884:	0e 89       	ldd	r16, Y+22	; 0x16
    1886:	1f 89       	ldd	r17, Y+23	; 0x17
    1888:	86 e0       	ldi	r24, 0x06	; 6
    188a:	8c 83       	std	Y+4, r24	; 0x04
    188c:	09 83       	std	Y+1, r16	; 0x01
    188e:	1a 83       	std	Y+2, r17	; 0x02
    1890:	8f ef       	ldi	r24, 0xFF	; 255
    1892:	9f e7       	ldi	r25, 0x7F	; 127
    1894:	8d 83       	std	Y+5, r24	; 0x05
    1896:	9e 83       	std	Y+6, r25	; 0x06
    1898:	ae 01       	movw	r20, r28
    189a:	46 5e       	subi	r20, 0xE6	; 230
    189c:	5f 4f       	sbci	r21, 0xFF	; 255
    189e:	68 8d       	ldd	r22, Y+24	; 0x18
    18a0:	79 8d       	ldd	r23, Y+25	; 0x19
    18a2:	ce 01       	movw	r24, r28
    18a4:	01 96       	adiw	r24, 0x01	; 1
    18a6:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <vfprintf>
    18aa:	2f 81       	ldd	r18, Y+7	; 0x07
    18ac:	38 85       	ldd	r19, Y+8	; 0x08
    18ae:	f8 01       	movw	r30, r16
    18b0:	e2 0f       	add	r30, r18
    18b2:	f3 1f       	adc	r31, r19
    18b4:	10 82       	st	Z, r1
    18b6:	2e 96       	adiw	r28, 0x0e	; 14
    18b8:	cd bf       	out	0x3d, r28	; 61
    18ba:	de bf       	out	0x3e, r29	; 62
    18bc:	df 91       	pop	r29
    18be:	cf 91       	pop	r28
    18c0:	1f 91       	pop	r17
    18c2:	0f 91       	pop	r16
    18c4:	08 95       	ret

000018c6 <vfprintf>:
    18c6:	2f 92       	push	r2
    18c8:	3f 92       	push	r3
    18ca:	4f 92       	push	r4
    18cc:	5f 92       	push	r5
    18ce:	6f 92       	push	r6
    18d0:	7f 92       	push	r7
    18d2:	8f 92       	push	r8
    18d4:	9f 92       	push	r9
    18d6:	af 92       	push	r10
    18d8:	bf 92       	push	r11
    18da:	cf 92       	push	r12
    18dc:	df 92       	push	r13
    18de:	ef 92       	push	r14
    18e0:	ff 92       	push	r15
    18e2:	0f 93       	push	r16
    18e4:	1f 93       	push	r17
    18e6:	cf 93       	push	r28
    18e8:	df 93       	push	r29
    18ea:	cd b7       	in	r28, 0x3d	; 61
    18ec:	de b7       	in	r29, 0x3e	; 62
    18ee:	2c 97       	sbiw	r28, 0x0c	; 12
    18f0:	cd bf       	out	0x3d, r28	; 61
    18f2:	de bf       	out	0x3e, r29	; 62
    18f4:	7c 01       	movw	r14, r24
    18f6:	6b 01       	movw	r12, r22
    18f8:	8a 01       	movw	r16, r20
    18fa:	fc 01       	movw	r30, r24
    18fc:	16 82       	std	Z+6, r1	; 0x06
    18fe:	17 82       	std	Z+7, r1	; 0x07
    1900:	83 81       	ldd	r24, Z+3	; 0x03
    1902:	81 ff       	sbrs	r24, 1
    1904:	bd c1       	rjmp	.+890    	; 0x1c80 <vfprintf+0x3ba>
    1906:	ce 01       	movw	r24, r28
    1908:	01 96       	adiw	r24, 0x01	; 1
    190a:	4c 01       	movw	r8, r24
    190c:	f7 01       	movw	r30, r14
    190e:	93 81       	ldd	r25, Z+3	; 0x03
    1910:	f6 01       	movw	r30, r12
    1912:	93 fd       	sbrc	r25, 3
    1914:	85 91       	lpm	r24, Z+
    1916:	93 ff       	sbrs	r25, 3
    1918:	81 91       	ld	r24, Z+
    191a:	6f 01       	movw	r12, r30
    191c:	88 23       	and	r24, r24
    191e:	09 f4       	brne	.+2      	; 0x1922 <vfprintf+0x5c>
    1920:	ab c1       	rjmp	.+854    	; 0x1c78 <vfprintf+0x3b2>
    1922:	85 32       	cpi	r24, 0x25	; 37
    1924:	39 f4       	brne	.+14     	; 0x1934 <vfprintf+0x6e>
    1926:	93 fd       	sbrc	r25, 3
    1928:	85 91       	lpm	r24, Z+
    192a:	93 ff       	sbrs	r25, 3
    192c:	81 91       	ld	r24, Z+
    192e:	6f 01       	movw	r12, r30
    1930:	85 32       	cpi	r24, 0x25	; 37
    1932:	29 f4       	brne	.+10     	; 0x193e <vfprintf+0x78>
    1934:	b7 01       	movw	r22, r14
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <fputc>
    193c:	e7 cf       	rjmp	.-50     	; 0x190c <vfprintf+0x46>
    193e:	51 2c       	mov	r5, r1
    1940:	31 2c       	mov	r3, r1
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	20 32       	cpi	r18, 0x20	; 32
    1946:	a0 f4       	brcc	.+40     	; 0x1970 <vfprintf+0xaa>
    1948:	8b 32       	cpi	r24, 0x2B	; 43
    194a:	69 f0       	breq	.+26     	; 0x1966 <vfprintf+0xa0>
    194c:	30 f4       	brcc	.+12     	; 0x195a <vfprintf+0x94>
    194e:	80 32       	cpi	r24, 0x20	; 32
    1950:	59 f0       	breq	.+22     	; 0x1968 <vfprintf+0xa2>
    1952:	83 32       	cpi	r24, 0x23	; 35
    1954:	69 f4       	brne	.+26     	; 0x1970 <vfprintf+0xaa>
    1956:	20 61       	ori	r18, 0x10	; 16
    1958:	2c c0       	rjmp	.+88     	; 0x19b2 <vfprintf+0xec>
    195a:	8d 32       	cpi	r24, 0x2D	; 45
    195c:	39 f0       	breq	.+14     	; 0x196c <vfprintf+0xa6>
    195e:	80 33       	cpi	r24, 0x30	; 48
    1960:	39 f4       	brne	.+14     	; 0x1970 <vfprintf+0xaa>
    1962:	21 60       	ori	r18, 0x01	; 1
    1964:	26 c0       	rjmp	.+76     	; 0x19b2 <vfprintf+0xec>
    1966:	22 60       	ori	r18, 0x02	; 2
    1968:	24 60       	ori	r18, 0x04	; 4
    196a:	23 c0       	rjmp	.+70     	; 0x19b2 <vfprintf+0xec>
    196c:	28 60       	ori	r18, 0x08	; 8
    196e:	21 c0       	rjmp	.+66     	; 0x19b2 <vfprintf+0xec>
    1970:	27 fd       	sbrc	r18, 7
    1972:	27 c0       	rjmp	.+78     	; 0x19c2 <vfprintf+0xfc>
    1974:	30 ed       	ldi	r19, 0xD0	; 208
    1976:	38 0f       	add	r19, r24
    1978:	3a 30       	cpi	r19, 0x0A	; 10
    197a:	78 f4       	brcc	.+30     	; 0x199a <vfprintf+0xd4>
    197c:	26 ff       	sbrs	r18, 6
    197e:	06 c0       	rjmp	.+12     	; 0x198c <vfprintf+0xc6>
    1980:	fa e0       	ldi	r31, 0x0A	; 10
    1982:	5f 9e       	mul	r5, r31
    1984:	30 0d       	add	r19, r0
    1986:	11 24       	eor	r1, r1
    1988:	53 2e       	mov	r5, r19
    198a:	13 c0       	rjmp	.+38     	; 0x19b2 <vfprintf+0xec>
    198c:	8a e0       	ldi	r24, 0x0A	; 10
    198e:	38 9e       	mul	r3, r24
    1990:	30 0d       	add	r19, r0
    1992:	11 24       	eor	r1, r1
    1994:	33 2e       	mov	r3, r19
    1996:	20 62       	ori	r18, 0x20	; 32
    1998:	0c c0       	rjmp	.+24     	; 0x19b2 <vfprintf+0xec>
    199a:	8e 32       	cpi	r24, 0x2E	; 46
    199c:	21 f4       	brne	.+8      	; 0x19a6 <vfprintf+0xe0>
    199e:	26 fd       	sbrc	r18, 6
    19a0:	6b c1       	rjmp	.+726    	; 0x1c78 <vfprintf+0x3b2>
    19a2:	20 64       	ori	r18, 0x40	; 64
    19a4:	06 c0       	rjmp	.+12     	; 0x19b2 <vfprintf+0xec>
    19a6:	8c 36       	cpi	r24, 0x6C	; 108
    19a8:	11 f4       	brne	.+4      	; 0x19ae <vfprintf+0xe8>
    19aa:	20 68       	ori	r18, 0x80	; 128
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <vfprintf+0xec>
    19ae:	88 36       	cpi	r24, 0x68	; 104
    19b0:	41 f4       	brne	.+16     	; 0x19c2 <vfprintf+0xfc>
    19b2:	f6 01       	movw	r30, r12
    19b4:	93 fd       	sbrc	r25, 3
    19b6:	85 91       	lpm	r24, Z+
    19b8:	93 ff       	sbrs	r25, 3
    19ba:	81 91       	ld	r24, Z+
    19bc:	6f 01       	movw	r12, r30
    19be:	81 11       	cpse	r24, r1
    19c0:	c1 cf       	rjmp	.-126    	; 0x1944 <vfprintf+0x7e>
    19c2:	98 2f       	mov	r25, r24
    19c4:	9f 7d       	andi	r25, 0xDF	; 223
    19c6:	95 54       	subi	r25, 0x45	; 69
    19c8:	93 30       	cpi	r25, 0x03	; 3
    19ca:	28 f4       	brcc	.+10     	; 0x19d6 <vfprintf+0x110>
    19cc:	0c 5f       	subi	r16, 0xFC	; 252
    19ce:	1f 4f       	sbci	r17, 0xFF	; 255
    19d0:	ff e3       	ldi	r31, 0x3F	; 63
    19d2:	f9 83       	std	Y+1, r31	; 0x01
    19d4:	0d c0       	rjmp	.+26     	; 0x19f0 <vfprintf+0x12a>
    19d6:	83 36       	cpi	r24, 0x63	; 99
    19d8:	31 f0       	breq	.+12     	; 0x19e6 <vfprintf+0x120>
    19da:	83 37       	cpi	r24, 0x73	; 115
    19dc:	71 f0       	breq	.+28     	; 0x19fa <vfprintf+0x134>
    19de:	83 35       	cpi	r24, 0x53	; 83
    19e0:	09 f0       	breq	.+2      	; 0x19e4 <vfprintf+0x11e>
    19e2:	5b c0       	rjmp	.+182    	; 0x1a9a <vfprintf+0x1d4>
    19e4:	22 c0       	rjmp	.+68     	; 0x1a2a <vfprintf+0x164>
    19e6:	f8 01       	movw	r30, r16
    19e8:	80 81       	ld	r24, Z
    19ea:	89 83       	std	Y+1, r24	; 0x01
    19ec:	0e 5f       	subi	r16, 0xFE	; 254
    19ee:	1f 4f       	sbci	r17, 0xFF	; 255
    19f0:	44 24       	eor	r4, r4
    19f2:	43 94       	inc	r4
    19f4:	51 2c       	mov	r5, r1
    19f6:	54 01       	movw	r10, r8
    19f8:	15 c0       	rjmp	.+42     	; 0x1a24 <vfprintf+0x15e>
    19fa:	38 01       	movw	r6, r16
    19fc:	f2 e0       	ldi	r31, 0x02	; 2
    19fe:	6f 0e       	add	r6, r31
    1a00:	71 1c       	adc	r7, r1
    1a02:	f8 01       	movw	r30, r16
    1a04:	a0 80       	ld	r10, Z
    1a06:	b1 80       	ldd	r11, Z+1	; 0x01
    1a08:	26 ff       	sbrs	r18, 6
    1a0a:	03 c0       	rjmp	.+6      	; 0x1a12 <vfprintf+0x14c>
    1a0c:	65 2d       	mov	r22, r5
    1a0e:	70 e0       	ldi	r23, 0x00	; 0
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <vfprintf+0x150>
    1a12:	6f ef       	ldi	r22, 0xFF	; 255
    1a14:	7f ef       	ldi	r23, 0xFF	; 255
    1a16:	c5 01       	movw	r24, r10
    1a18:	2c 87       	std	Y+12, r18	; 0x0c
    1a1a:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <strnlen>
    1a1e:	2c 01       	movw	r4, r24
    1a20:	83 01       	movw	r16, r6
    1a22:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a24:	2f 77       	andi	r18, 0x7F	; 127
    1a26:	22 2e       	mov	r2, r18
    1a28:	17 c0       	rjmp	.+46     	; 0x1a58 <vfprintf+0x192>
    1a2a:	38 01       	movw	r6, r16
    1a2c:	f2 e0       	ldi	r31, 0x02	; 2
    1a2e:	6f 0e       	add	r6, r31
    1a30:	71 1c       	adc	r7, r1
    1a32:	f8 01       	movw	r30, r16
    1a34:	a0 80       	ld	r10, Z
    1a36:	b1 80       	ldd	r11, Z+1	; 0x01
    1a38:	26 ff       	sbrs	r18, 6
    1a3a:	03 c0       	rjmp	.+6      	; 0x1a42 <vfprintf+0x17c>
    1a3c:	65 2d       	mov	r22, r5
    1a3e:	70 e0       	ldi	r23, 0x00	; 0
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <vfprintf+0x180>
    1a42:	6f ef       	ldi	r22, 0xFF	; 255
    1a44:	7f ef       	ldi	r23, 0xFF	; 255
    1a46:	c5 01       	movw	r24, r10
    1a48:	2c 87       	std	Y+12, r18	; 0x0c
    1a4a:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <strnlen_P>
    1a4e:	2c 01       	movw	r4, r24
    1a50:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a52:	20 68       	ori	r18, 0x80	; 128
    1a54:	22 2e       	mov	r2, r18
    1a56:	83 01       	movw	r16, r6
    1a58:	23 fc       	sbrc	r2, 3
    1a5a:	1b c0       	rjmp	.+54     	; 0x1a92 <vfprintf+0x1cc>
    1a5c:	83 2d       	mov	r24, r3
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	48 16       	cp	r4, r24
    1a62:	59 06       	cpc	r5, r25
    1a64:	b0 f4       	brcc	.+44     	; 0x1a92 <vfprintf+0x1cc>
    1a66:	b7 01       	movw	r22, r14
    1a68:	80 e2       	ldi	r24, 0x20	; 32
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <fputc>
    1a70:	3a 94       	dec	r3
    1a72:	f4 cf       	rjmp	.-24     	; 0x1a5c <vfprintf+0x196>
    1a74:	f5 01       	movw	r30, r10
    1a76:	27 fc       	sbrc	r2, 7
    1a78:	85 91       	lpm	r24, Z+
    1a7a:	27 fe       	sbrs	r2, 7
    1a7c:	81 91       	ld	r24, Z+
    1a7e:	5f 01       	movw	r10, r30
    1a80:	b7 01       	movw	r22, r14
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <fputc>
    1a88:	31 10       	cpse	r3, r1
    1a8a:	3a 94       	dec	r3
    1a8c:	f1 e0       	ldi	r31, 0x01	; 1
    1a8e:	4f 1a       	sub	r4, r31
    1a90:	51 08       	sbc	r5, r1
    1a92:	41 14       	cp	r4, r1
    1a94:	51 04       	cpc	r5, r1
    1a96:	71 f7       	brne	.-36     	; 0x1a74 <vfprintf+0x1ae>
    1a98:	e5 c0       	rjmp	.+458    	; 0x1c64 <vfprintf+0x39e>
    1a9a:	84 36       	cpi	r24, 0x64	; 100
    1a9c:	11 f0       	breq	.+4      	; 0x1aa2 <vfprintf+0x1dc>
    1a9e:	89 36       	cpi	r24, 0x69	; 105
    1aa0:	39 f5       	brne	.+78     	; 0x1af0 <vfprintf+0x22a>
    1aa2:	f8 01       	movw	r30, r16
    1aa4:	27 ff       	sbrs	r18, 7
    1aa6:	07 c0       	rjmp	.+14     	; 0x1ab6 <vfprintf+0x1f0>
    1aa8:	60 81       	ld	r22, Z
    1aaa:	71 81       	ldd	r23, Z+1	; 0x01
    1aac:	82 81       	ldd	r24, Z+2	; 0x02
    1aae:	93 81       	ldd	r25, Z+3	; 0x03
    1ab0:	0c 5f       	subi	r16, 0xFC	; 252
    1ab2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab4:	08 c0       	rjmp	.+16     	; 0x1ac6 <vfprintf+0x200>
    1ab6:	60 81       	ld	r22, Z
    1ab8:	71 81       	ldd	r23, Z+1	; 0x01
    1aba:	07 2e       	mov	r0, r23
    1abc:	00 0c       	add	r0, r0
    1abe:	88 0b       	sbc	r24, r24
    1ac0:	99 0b       	sbc	r25, r25
    1ac2:	0e 5f       	subi	r16, 0xFE	; 254
    1ac4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac6:	2f 76       	andi	r18, 0x6F	; 111
    1ac8:	72 2e       	mov	r7, r18
    1aca:	97 ff       	sbrs	r25, 7
    1acc:	09 c0       	rjmp	.+18     	; 0x1ae0 <vfprintf+0x21a>
    1ace:	90 95       	com	r25
    1ad0:	80 95       	com	r24
    1ad2:	70 95       	com	r23
    1ad4:	61 95       	neg	r22
    1ad6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad8:	8f 4f       	sbci	r24, 0xFF	; 255
    1ada:	9f 4f       	sbci	r25, 0xFF	; 255
    1adc:	20 68       	ori	r18, 0x80	; 128
    1ade:	72 2e       	mov	r7, r18
    1ae0:	2a e0       	ldi	r18, 0x0A	; 10
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	a4 01       	movw	r20, r8
    1ae6:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__ultoa_invert>
    1aea:	a8 2e       	mov	r10, r24
    1aec:	a8 18       	sub	r10, r8
    1aee:	44 c0       	rjmp	.+136    	; 0x1b78 <vfprintf+0x2b2>
    1af0:	85 37       	cpi	r24, 0x75	; 117
    1af2:	29 f4       	brne	.+10     	; 0x1afe <vfprintf+0x238>
    1af4:	2f 7e       	andi	r18, 0xEF	; 239
    1af6:	b2 2e       	mov	r11, r18
    1af8:	2a e0       	ldi	r18, 0x0A	; 10
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	25 c0       	rjmp	.+74     	; 0x1b48 <vfprintf+0x282>
    1afe:	f2 2f       	mov	r31, r18
    1b00:	f9 7f       	andi	r31, 0xF9	; 249
    1b02:	bf 2e       	mov	r11, r31
    1b04:	8f 36       	cpi	r24, 0x6F	; 111
    1b06:	c1 f0       	breq	.+48     	; 0x1b38 <vfprintf+0x272>
    1b08:	18 f4       	brcc	.+6      	; 0x1b10 <vfprintf+0x24a>
    1b0a:	88 35       	cpi	r24, 0x58	; 88
    1b0c:	79 f0       	breq	.+30     	; 0x1b2c <vfprintf+0x266>
    1b0e:	b4 c0       	rjmp	.+360    	; 0x1c78 <vfprintf+0x3b2>
    1b10:	80 37       	cpi	r24, 0x70	; 112
    1b12:	19 f0       	breq	.+6      	; 0x1b1a <vfprintf+0x254>
    1b14:	88 37       	cpi	r24, 0x78	; 120
    1b16:	21 f0       	breq	.+8      	; 0x1b20 <vfprintf+0x25a>
    1b18:	af c0       	rjmp	.+350    	; 0x1c78 <vfprintf+0x3b2>
    1b1a:	2f 2f       	mov	r18, r31
    1b1c:	20 61       	ori	r18, 0x10	; 16
    1b1e:	b2 2e       	mov	r11, r18
    1b20:	b4 fe       	sbrs	r11, 4
    1b22:	0d c0       	rjmp	.+26     	; 0x1b3e <vfprintf+0x278>
    1b24:	8b 2d       	mov	r24, r11
    1b26:	84 60       	ori	r24, 0x04	; 4
    1b28:	b8 2e       	mov	r11, r24
    1b2a:	09 c0       	rjmp	.+18     	; 0x1b3e <vfprintf+0x278>
    1b2c:	24 ff       	sbrs	r18, 4
    1b2e:	0a c0       	rjmp	.+20     	; 0x1b44 <vfprintf+0x27e>
    1b30:	9f 2f       	mov	r25, r31
    1b32:	96 60       	ori	r25, 0x06	; 6
    1b34:	b9 2e       	mov	r11, r25
    1b36:	06 c0       	rjmp	.+12     	; 0x1b44 <vfprintf+0x27e>
    1b38:	28 e0       	ldi	r18, 0x08	; 8
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	05 c0       	rjmp	.+10     	; 0x1b48 <vfprintf+0x282>
    1b3e:	20 e1       	ldi	r18, 0x10	; 16
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <vfprintf+0x282>
    1b44:	20 e1       	ldi	r18, 0x10	; 16
    1b46:	32 e0       	ldi	r19, 0x02	; 2
    1b48:	f8 01       	movw	r30, r16
    1b4a:	b7 fe       	sbrs	r11, 7
    1b4c:	07 c0       	rjmp	.+14     	; 0x1b5c <vfprintf+0x296>
    1b4e:	60 81       	ld	r22, Z
    1b50:	71 81       	ldd	r23, Z+1	; 0x01
    1b52:	82 81       	ldd	r24, Z+2	; 0x02
    1b54:	93 81       	ldd	r25, Z+3	; 0x03
    1b56:	0c 5f       	subi	r16, 0xFC	; 252
    1b58:	1f 4f       	sbci	r17, 0xFF	; 255
    1b5a:	06 c0       	rjmp	.+12     	; 0x1b68 <vfprintf+0x2a2>
    1b5c:	60 81       	ld	r22, Z
    1b5e:	71 81       	ldd	r23, Z+1	; 0x01
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	0e 5f       	subi	r16, 0xFE	; 254
    1b66:	1f 4f       	sbci	r17, 0xFF	; 255
    1b68:	a4 01       	movw	r20, r8
    1b6a:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__ultoa_invert>
    1b6e:	a8 2e       	mov	r10, r24
    1b70:	a8 18       	sub	r10, r8
    1b72:	fb 2d       	mov	r31, r11
    1b74:	ff 77       	andi	r31, 0x7F	; 127
    1b76:	7f 2e       	mov	r7, r31
    1b78:	76 fe       	sbrs	r7, 6
    1b7a:	0b c0       	rjmp	.+22     	; 0x1b92 <vfprintf+0x2cc>
    1b7c:	37 2d       	mov	r19, r7
    1b7e:	3e 7f       	andi	r19, 0xFE	; 254
    1b80:	a5 14       	cp	r10, r5
    1b82:	50 f4       	brcc	.+20     	; 0x1b98 <vfprintf+0x2d2>
    1b84:	74 fe       	sbrs	r7, 4
    1b86:	0a c0       	rjmp	.+20     	; 0x1b9c <vfprintf+0x2d6>
    1b88:	72 fc       	sbrc	r7, 2
    1b8a:	08 c0       	rjmp	.+16     	; 0x1b9c <vfprintf+0x2d6>
    1b8c:	37 2d       	mov	r19, r7
    1b8e:	3e 7e       	andi	r19, 0xEE	; 238
    1b90:	05 c0       	rjmp	.+10     	; 0x1b9c <vfprintf+0x2d6>
    1b92:	ba 2c       	mov	r11, r10
    1b94:	37 2d       	mov	r19, r7
    1b96:	03 c0       	rjmp	.+6      	; 0x1b9e <vfprintf+0x2d8>
    1b98:	ba 2c       	mov	r11, r10
    1b9a:	01 c0       	rjmp	.+2      	; 0x1b9e <vfprintf+0x2d8>
    1b9c:	b5 2c       	mov	r11, r5
    1b9e:	34 ff       	sbrs	r19, 4
    1ba0:	0d c0       	rjmp	.+26     	; 0x1bbc <vfprintf+0x2f6>
    1ba2:	fe 01       	movw	r30, r28
    1ba4:	ea 0d       	add	r30, r10
    1ba6:	f1 1d       	adc	r31, r1
    1ba8:	80 81       	ld	r24, Z
    1baa:	80 33       	cpi	r24, 0x30	; 48
    1bac:	11 f4       	brne	.+4      	; 0x1bb2 <vfprintf+0x2ec>
    1bae:	39 7e       	andi	r19, 0xE9	; 233
    1bb0:	09 c0       	rjmp	.+18     	; 0x1bc4 <vfprintf+0x2fe>
    1bb2:	32 ff       	sbrs	r19, 2
    1bb4:	06 c0       	rjmp	.+12     	; 0x1bc2 <vfprintf+0x2fc>
    1bb6:	b3 94       	inc	r11
    1bb8:	b3 94       	inc	r11
    1bba:	04 c0       	rjmp	.+8      	; 0x1bc4 <vfprintf+0x2fe>
    1bbc:	83 2f       	mov	r24, r19
    1bbe:	86 78       	andi	r24, 0x86	; 134
    1bc0:	09 f0       	breq	.+2      	; 0x1bc4 <vfprintf+0x2fe>
    1bc2:	b3 94       	inc	r11
    1bc4:	33 fd       	sbrc	r19, 3
    1bc6:	13 c0       	rjmp	.+38     	; 0x1bee <vfprintf+0x328>
    1bc8:	30 ff       	sbrs	r19, 0
    1bca:	06 c0       	rjmp	.+12     	; 0x1bd8 <vfprintf+0x312>
    1bcc:	5a 2c       	mov	r5, r10
    1bce:	b3 14       	cp	r11, r3
    1bd0:	18 f4       	brcc	.+6      	; 0x1bd8 <vfprintf+0x312>
    1bd2:	53 0c       	add	r5, r3
    1bd4:	5b 18       	sub	r5, r11
    1bd6:	b3 2c       	mov	r11, r3
    1bd8:	b3 14       	cp	r11, r3
    1bda:	68 f4       	brcc	.+26     	; 0x1bf6 <vfprintf+0x330>
    1bdc:	b7 01       	movw	r22, r14
    1bde:	80 e2       	ldi	r24, 0x20	; 32
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	3c 87       	std	Y+12, r19	; 0x0c
    1be4:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <fputc>
    1be8:	b3 94       	inc	r11
    1bea:	3c 85       	ldd	r19, Y+12	; 0x0c
    1bec:	f5 cf       	rjmp	.-22     	; 0x1bd8 <vfprintf+0x312>
    1bee:	b3 14       	cp	r11, r3
    1bf0:	10 f4       	brcc	.+4      	; 0x1bf6 <vfprintf+0x330>
    1bf2:	3b 18       	sub	r3, r11
    1bf4:	01 c0       	rjmp	.+2      	; 0x1bf8 <vfprintf+0x332>
    1bf6:	31 2c       	mov	r3, r1
    1bf8:	34 ff       	sbrs	r19, 4
    1bfa:	12 c0       	rjmp	.+36     	; 0x1c20 <vfprintf+0x35a>
    1bfc:	b7 01       	movw	r22, r14
    1bfe:	80 e3       	ldi	r24, 0x30	; 48
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	3c 87       	std	Y+12, r19	; 0x0c
    1c04:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <fputc>
    1c08:	3c 85       	ldd	r19, Y+12	; 0x0c
    1c0a:	32 ff       	sbrs	r19, 2
    1c0c:	17 c0       	rjmp	.+46     	; 0x1c3c <vfprintf+0x376>
    1c0e:	31 fd       	sbrc	r19, 1
    1c10:	03 c0       	rjmp	.+6      	; 0x1c18 <vfprintf+0x352>
    1c12:	88 e7       	ldi	r24, 0x78	; 120
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	02 c0       	rjmp	.+4      	; 0x1c1c <vfprintf+0x356>
    1c18:	88 e5       	ldi	r24, 0x58	; 88
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	b7 01       	movw	r22, r14
    1c1e:	0c c0       	rjmp	.+24     	; 0x1c38 <vfprintf+0x372>
    1c20:	83 2f       	mov	r24, r19
    1c22:	86 78       	andi	r24, 0x86	; 134
    1c24:	59 f0       	breq	.+22     	; 0x1c3c <vfprintf+0x376>
    1c26:	31 ff       	sbrs	r19, 1
    1c28:	02 c0       	rjmp	.+4      	; 0x1c2e <vfprintf+0x368>
    1c2a:	8b e2       	ldi	r24, 0x2B	; 43
    1c2c:	01 c0       	rjmp	.+2      	; 0x1c30 <vfprintf+0x36a>
    1c2e:	80 e2       	ldi	r24, 0x20	; 32
    1c30:	37 fd       	sbrc	r19, 7
    1c32:	8d e2       	ldi	r24, 0x2D	; 45
    1c34:	b7 01       	movw	r22, r14
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <fputc>
    1c3c:	a5 14       	cp	r10, r5
    1c3e:	38 f4       	brcc	.+14     	; 0x1c4e <vfprintf+0x388>
    1c40:	b7 01       	movw	r22, r14
    1c42:	80 e3       	ldi	r24, 0x30	; 48
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <fputc>
    1c4a:	5a 94       	dec	r5
    1c4c:	f7 cf       	rjmp	.-18     	; 0x1c3c <vfprintf+0x376>
    1c4e:	aa 94       	dec	r10
    1c50:	f4 01       	movw	r30, r8
    1c52:	ea 0d       	add	r30, r10
    1c54:	f1 1d       	adc	r31, r1
    1c56:	80 81       	ld	r24, Z
    1c58:	b7 01       	movw	r22, r14
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <fputc>
    1c60:	a1 10       	cpse	r10, r1
    1c62:	f5 cf       	rjmp	.-22     	; 0x1c4e <vfprintf+0x388>
    1c64:	33 20       	and	r3, r3
    1c66:	09 f4       	brne	.+2      	; 0x1c6a <vfprintf+0x3a4>
    1c68:	51 ce       	rjmp	.-862    	; 0x190c <vfprintf+0x46>
    1c6a:	b7 01       	movw	r22, r14
    1c6c:	80 e2       	ldi	r24, 0x20	; 32
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <fputc>
    1c74:	3a 94       	dec	r3
    1c76:	f6 cf       	rjmp	.-20     	; 0x1c64 <vfprintf+0x39e>
    1c78:	f7 01       	movw	r30, r14
    1c7a:	86 81       	ldd	r24, Z+6	; 0x06
    1c7c:	97 81       	ldd	r25, Z+7	; 0x07
    1c7e:	02 c0       	rjmp	.+4      	; 0x1c84 <vfprintf+0x3be>
    1c80:	8f ef       	ldi	r24, 0xFF	; 255
    1c82:	9f ef       	ldi	r25, 0xFF	; 255
    1c84:	2c 96       	adiw	r28, 0x0c	; 12
    1c86:	cd bf       	out	0x3d, r28	; 61
    1c88:	de bf       	out	0x3e, r29	; 62
    1c8a:	df 91       	pop	r29
    1c8c:	cf 91       	pop	r28
    1c8e:	1f 91       	pop	r17
    1c90:	0f 91       	pop	r16
    1c92:	ff 90       	pop	r15
    1c94:	ef 90       	pop	r14
    1c96:	df 90       	pop	r13
    1c98:	cf 90       	pop	r12
    1c9a:	bf 90       	pop	r11
    1c9c:	af 90       	pop	r10
    1c9e:	9f 90       	pop	r9
    1ca0:	8f 90       	pop	r8
    1ca2:	7f 90       	pop	r7
    1ca4:	6f 90       	pop	r6
    1ca6:	5f 90       	pop	r5
    1ca8:	4f 90       	pop	r4
    1caa:	3f 90       	pop	r3
    1cac:	2f 90       	pop	r2
    1cae:	08 95       	ret

00001cb0 <strnlen_P>:
    1cb0:	fc 01       	movw	r30, r24
    1cb2:	05 90       	lpm	r0, Z+
    1cb4:	61 50       	subi	r22, 0x01	; 1
    1cb6:	70 40       	sbci	r23, 0x00	; 0
    1cb8:	01 10       	cpse	r0, r1
    1cba:	d8 f7       	brcc	.-10     	; 0x1cb2 <strnlen_P+0x2>
    1cbc:	80 95       	com	r24
    1cbe:	90 95       	com	r25
    1cc0:	8e 0f       	add	r24, r30
    1cc2:	9f 1f       	adc	r25, r31
    1cc4:	08 95       	ret

00001cc6 <strnlen>:
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	61 50       	subi	r22, 0x01	; 1
    1cca:	70 40       	sbci	r23, 0x00	; 0
    1ccc:	01 90       	ld	r0, Z+
    1cce:	01 10       	cpse	r0, r1
    1cd0:	d8 f7       	brcc	.-10     	; 0x1cc8 <strnlen+0x2>
    1cd2:	80 95       	com	r24
    1cd4:	90 95       	com	r25
    1cd6:	8e 0f       	add	r24, r30
    1cd8:	9f 1f       	adc	r25, r31
    1cda:	08 95       	ret

00001cdc <fputc>:
    1cdc:	0f 93       	push	r16
    1cde:	1f 93       	push	r17
    1ce0:	cf 93       	push	r28
    1ce2:	df 93       	push	r29
    1ce4:	fb 01       	movw	r30, r22
    1ce6:	23 81       	ldd	r18, Z+3	; 0x03
    1ce8:	21 fd       	sbrc	r18, 1
    1cea:	03 c0       	rjmp	.+6      	; 0x1cf2 <fputc+0x16>
    1cec:	8f ef       	ldi	r24, 0xFF	; 255
    1cee:	9f ef       	ldi	r25, 0xFF	; 255
    1cf0:	28 c0       	rjmp	.+80     	; 0x1d42 <fputc+0x66>
    1cf2:	22 ff       	sbrs	r18, 2
    1cf4:	16 c0       	rjmp	.+44     	; 0x1d22 <fputc+0x46>
    1cf6:	46 81       	ldd	r20, Z+6	; 0x06
    1cf8:	57 81       	ldd	r21, Z+7	; 0x07
    1cfa:	24 81       	ldd	r18, Z+4	; 0x04
    1cfc:	35 81       	ldd	r19, Z+5	; 0x05
    1cfe:	42 17       	cp	r20, r18
    1d00:	53 07       	cpc	r21, r19
    1d02:	44 f4       	brge	.+16     	; 0x1d14 <fputc+0x38>
    1d04:	a0 81       	ld	r26, Z
    1d06:	b1 81       	ldd	r27, Z+1	; 0x01
    1d08:	9d 01       	movw	r18, r26
    1d0a:	2f 5f       	subi	r18, 0xFF	; 255
    1d0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d0e:	20 83       	st	Z, r18
    1d10:	31 83       	std	Z+1, r19	; 0x01
    1d12:	8c 93       	st	X, r24
    1d14:	26 81       	ldd	r18, Z+6	; 0x06
    1d16:	37 81       	ldd	r19, Z+7	; 0x07
    1d18:	2f 5f       	subi	r18, 0xFF	; 255
    1d1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d1c:	26 83       	std	Z+6, r18	; 0x06
    1d1e:	37 83       	std	Z+7, r19	; 0x07
    1d20:	10 c0       	rjmp	.+32     	; 0x1d42 <fputc+0x66>
    1d22:	eb 01       	movw	r28, r22
    1d24:	09 2f       	mov	r16, r25
    1d26:	18 2f       	mov	r17, r24
    1d28:	00 84       	ldd	r0, Z+8	; 0x08
    1d2a:	f1 85       	ldd	r31, Z+9	; 0x09
    1d2c:	e0 2d       	mov	r30, r0
    1d2e:	19 95       	eicall
    1d30:	89 2b       	or	r24, r25
    1d32:	e1 f6       	brne	.-72     	; 0x1cec <fputc+0x10>
    1d34:	8e 81       	ldd	r24, Y+6	; 0x06
    1d36:	9f 81       	ldd	r25, Y+7	; 0x07
    1d38:	01 96       	adiw	r24, 0x01	; 1
    1d3a:	8e 83       	std	Y+6, r24	; 0x06
    1d3c:	9f 83       	std	Y+7, r25	; 0x07
    1d3e:	81 2f       	mov	r24, r17
    1d40:	90 2f       	mov	r25, r16
    1d42:	df 91       	pop	r29
    1d44:	cf 91       	pop	r28
    1d46:	1f 91       	pop	r17
    1d48:	0f 91       	pop	r16
    1d4a:	08 95       	ret

00001d4c <__ultoa_invert>:
    1d4c:	fa 01       	movw	r30, r20
    1d4e:	aa 27       	eor	r26, r26
    1d50:	28 30       	cpi	r18, 0x08	; 8
    1d52:	51 f1       	breq	.+84     	; 0x1da8 <__ultoa_invert+0x5c>
    1d54:	20 31       	cpi	r18, 0x10	; 16
    1d56:	81 f1       	breq	.+96     	; 0x1db8 <__ultoa_invert+0x6c>
    1d58:	e8 94       	clt
    1d5a:	6f 93       	push	r22
    1d5c:	6e 7f       	andi	r22, 0xFE	; 254
    1d5e:	6e 5f       	subi	r22, 0xFE	; 254
    1d60:	7f 4f       	sbci	r23, 0xFF	; 255
    1d62:	8f 4f       	sbci	r24, 0xFF	; 255
    1d64:	9f 4f       	sbci	r25, 0xFF	; 255
    1d66:	af 4f       	sbci	r26, 0xFF	; 255
    1d68:	b1 e0       	ldi	r27, 0x01	; 1
    1d6a:	3e d0       	rcall	.+124    	; 0x1de8 <__ultoa_invert+0x9c>
    1d6c:	b4 e0       	ldi	r27, 0x04	; 4
    1d6e:	3c d0       	rcall	.+120    	; 0x1de8 <__ultoa_invert+0x9c>
    1d70:	67 0f       	add	r22, r23
    1d72:	78 1f       	adc	r23, r24
    1d74:	89 1f       	adc	r24, r25
    1d76:	9a 1f       	adc	r25, r26
    1d78:	a1 1d       	adc	r26, r1
    1d7a:	68 0f       	add	r22, r24
    1d7c:	79 1f       	adc	r23, r25
    1d7e:	8a 1f       	adc	r24, r26
    1d80:	91 1d       	adc	r25, r1
    1d82:	a1 1d       	adc	r26, r1
    1d84:	6a 0f       	add	r22, r26
    1d86:	71 1d       	adc	r23, r1
    1d88:	81 1d       	adc	r24, r1
    1d8a:	91 1d       	adc	r25, r1
    1d8c:	a1 1d       	adc	r26, r1
    1d8e:	20 d0       	rcall	.+64     	; 0x1dd0 <__ultoa_invert+0x84>
    1d90:	09 f4       	brne	.+2      	; 0x1d94 <__ultoa_invert+0x48>
    1d92:	68 94       	set
    1d94:	3f 91       	pop	r19
    1d96:	2a e0       	ldi	r18, 0x0A	; 10
    1d98:	26 9f       	mul	r18, r22
    1d9a:	11 24       	eor	r1, r1
    1d9c:	30 19       	sub	r19, r0
    1d9e:	30 5d       	subi	r19, 0xD0	; 208
    1da0:	31 93       	st	Z+, r19
    1da2:	de f6       	brtc	.-74     	; 0x1d5a <__ultoa_invert+0xe>
    1da4:	cf 01       	movw	r24, r30
    1da6:	08 95       	ret
    1da8:	46 2f       	mov	r20, r22
    1daa:	47 70       	andi	r20, 0x07	; 7
    1dac:	40 5d       	subi	r20, 0xD0	; 208
    1dae:	41 93       	st	Z+, r20
    1db0:	b3 e0       	ldi	r27, 0x03	; 3
    1db2:	0f d0       	rcall	.+30     	; 0x1dd2 <__ultoa_invert+0x86>
    1db4:	c9 f7       	brne	.-14     	; 0x1da8 <__ultoa_invert+0x5c>
    1db6:	f6 cf       	rjmp	.-20     	; 0x1da4 <__ultoa_invert+0x58>
    1db8:	46 2f       	mov	r20, r22
    1dba:	4f 70       	andi	r20, 0x0F	; 15
    1dbc:	40 5d       	subi	r20, 0xD0	; 208
    1dbe:	4a 33       	cpi	r20, 0x3A	; 58
    1dc0:	18 f0       	brcs	.+6      	; 0x1dc8 <__ultoa_invert+0x7c>
    1dc2:	49 5d       	subi	r20, 0xD9	; 217
    1dc4:	31 fd       	sbrc	r19, 1
    1dc6:	40 52       	subi	r20, 0x20	; 32
    1dc8:	41 93       	st	Z+, r20
    1dca:	02 d0       	rcall	.+4      	; 0x1dd0 <__ultoa_invert+0x84>
    1dcc:	a9 f7       	brne	.-22     	; 0x1db8 <__ultoa_invert+0x6c>
    1dce:	ea cf       	rjmp	.-44     	; 0x1da4 <__ultoa_invert+0x58>
    1dd0:	b4 e0       	ldi	r27, 0x04	; 4
    1dd2:	a6 95       	lsr	r26
    1dd4:	97 95       	ror	r25
    1dd6:	87 95       	ror	r24
    1dd8:	77 95       	ror	r23
    1dda:	67 95       	ror	r22
    1ddc:	ba 95       	dec	r27
    1dde:	c9 f7       	brne	.-14     	; 0x1dd2 <__ultoa_invert+0x86>
    1de0:	00 97       	sbiw	r24, 0x00	; 0
    1de2:	61 05       	cpc	r22, r1
    1de4:	71 05       	cpc	r23, r1
    1de6:	08 95       	ret
    1de8:	9b 01       	movw	r18, r22
    1dea:	ac 01       	movw	r20, r24
    1dec:	0a 2e       	mov	r0, r26
    1dee:	06 94       	lsr	r0
    1df0:	57 95       	ror	r21
    1df2:	47 95       	ror	r20
    1df4:	37 95       	ror	r19
    1df6:	27 95       	ror	r18
    1df8:	ba 95       	dec	r27
    1dfa:	c9 f7       	brne	.-14     	; 0x1dee <__ultoa_invert+0xa2>
    1dfc:	62 0f       	add	r22, r18
    1dfe:	73 1f       	adc	r23, r19
    1e00:	84 1f       	adc	r24, r20
    1e02:	95 1f       	adc	r25, r21
    1e04:	a0 1d       	adc	r26, r0
    1e06:	08 95       	ret

00001e08 <_exit>:
    1e08:	f8 94       	cli

00001e0a <__stop_program>:
    1e0a:	ff cf       	rjmp	.-2      	; 0x1e0a <__stop_program>
