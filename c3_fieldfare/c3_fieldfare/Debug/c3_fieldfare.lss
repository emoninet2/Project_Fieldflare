
c3_fieldfare.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002616  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000090c  00802000  00002616  000026aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003b4  0080290c  0080290c  00002fb6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002fb6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003014  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000408  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000619d  00000000  00000000  0000345c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000756  00000000  00000000  000095f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001181  00000000  00000000  00009d4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000fac  00000000  00000000  0000aed0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002784  00000000  00000000  0000be7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000041ba  00000000  00000000  0000e600  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000440  00000000  00000000  000127ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0c 01 	jmp	0x218	; 0x218 <__ctors_end>
       4:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
       8:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
       c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      10:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      14:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      18:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      1c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      20:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      24:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      28:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__vector_10>
      2c:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__vector_11>
      30:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      34:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      38:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      3c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      40:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      44:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      48:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      4c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      50:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      54:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      58:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      5c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      60:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      64:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      68:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      6c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      70:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      74:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      78:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      7c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      80:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      84:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      88:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      8c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      90:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      94:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      98:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      9c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      a0:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      a4:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      a8:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      ac:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      b0:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      b4:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      b8:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      bc:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      c0:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      c4:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      c8:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      cc:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      d0:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      d4:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      d8:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      dc:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      e0:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      e4:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      e8:	0c 94 5b 0a 	jmp	0x14b6	; 0x14b6 <__vector_58>
      ec:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      f0:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      f4:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      f8:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      fc:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     100:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     104:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     108:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     10c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     110:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     114:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     118:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     11c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     120:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     124:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     128:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     12c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     130:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     134:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     138:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     13c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     140:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     144:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     148:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     14c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     150:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     154:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     158:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     15c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     160:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     164:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     168:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     16c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     170:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     174:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     178:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     17c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     180:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     184:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     188:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     18c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     190:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     194:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     198:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     19c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     1a0:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     1a4:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     1a8:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     1ac:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     1b0:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     1b4:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     1b8:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     1bc:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     1c0:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     1c4:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     1c8:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     1cc:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     1d0:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     1d4:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     1d8:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     1dc:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     1e0:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     1e4:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     1e8:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     1ec:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     1f0:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     1f4:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     1f8:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <USARTE0_getchar>
     200:	0c 94 25 02 	jmp	0x44a	; 0x44a <USARTE0_putchar>
     204:	0c 94 3d 02 	jmp	0x47a	; 0x47a <USARTC0_getchar>
     208:	0c 94 15 02 	jmp	0x42a	; 0x42a <USARTC0_putchar>

0000020c <__trampolines_end>:
     20c:	63 64       	ori	r22, 0x43	; 67
     20e:	69 6e       	ori	r22, 0xE9	; 233
     210:	6f 70       	andi	r22, 0x0F	; 15
     212:	73 75       	andi	r23, 0x53	; 83
     214:	78 58       	subi	r23, 0x88	; 136
     216:	5b 00       	.word	0x005b	; ????

00000218 <__ctors_end>:
     218:	11 24       	eor	r1, r1
     21a:	1f be       	out	0x3f, r1	; 63
     21c:	cf ef       	ldi	r28, 0xFF	; 255
     21e:	cd bf       	out	0x3d, r28	; 61
     220:	df e9       	ldi	r29, 0x9F	; 159
     222:	de bf       	out	0x3e, r29	; 62
     224:	00 e0       	ldi	r16, 0x00	; 0
     226:	0c bf       	out	0x3c, r16	; 60

00000228 <__do_copy_data>:
     228:	19 e2       	ldi	r17, 0x29	; 41
     22a:	a0 e0       	ldi	r26, 0x00	; 0
     22c:	b0 e2       	ldi	r27, 0x20	; 32
     22e:	e6 e1       	ldi	r30, 0x16	; 22
     230:	f6 e2       	ldi	r31, 0x26	; 38
     232:	00 e0       	ldi	r16, 0x00	; 0
     234:	0b bf       	out	0x3b, r16	; 59
     236:	02 c0       	rjmp	.+4      	; 0x23c <__do_copy_data+0x14>
     238:	07 90       	elpm	r0, Z+
     23a:	0d 92       	st	X+, r0
     23c:	ac 30       	cpi	r26, 0x0C	; 12
     23e:	b1 07       	cpc	r27, r17
     240:	d9 f7       	brne	.-10     	; 0x238 <__do_copy_data+0x10>

00000242 <__do_clear_bss>:
     242:	2c e2       	ldi	r18, 0x2C	; 44
     244:	ac e0       	ldi	r26, 0x0C	; 12
     246:	b9 e2       	ldi	r27, 0x29	; 41
     248:	01 c0       	rjmp	.+2      	; 0x24c <.do_clear_bss_start>

0000024a <.do_clear_bss_loop>:
     24a:	1d 92       	st	X+, r1

0000024c <.do_clear_bss_start>:
     24c:	a0 3c       	cpi	r26, 0xC0	; 192
     24e:	b2 07       	cpc	r27, r18
     250:	e1 f7       	brne	.-8      	; 0x24a <.do_clear_bss_loop>
     252:	0e 94 b9 0a 	call	0x1572	; 0x1572 <main>
     256:	0c 94 09 13 	jmp	0x2612	; 0x2612 <_exit>

0000025a <__bad_interrupt>:
     25a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000025e <tokenize>:

volatile rtctick_t esp8266_timesnap = 0;
volatile rtctick_t esp8266_wait_timesnap = 0;


static void tokenize(char * command, int * arg_count, const char *delim, int max_tokens, char *arg_strings[]){
     25e:	af 92       	push	r10
     260:	bf 92       	push	r11
     262:	cf 92       	push	r12
     264:	df 92       	push	r13
     266:	ef 92       	push	r14
     268:	ff 92       	push	r15
     26a:	0f 93       	push	r16
     26c:	1f 93       	push	r17
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	5b 01       	movw	r10, r22
     274:	7a 01       	movw	r14, r20
     276:	69 01       	movw	r12, r18

	int arg_index = 0;

	char *pch;
	pch = strtok(command,delim);
     278:	ba 01       	movw	r22, r20
     27a:	0e 94 29 0c 	call	0x1852	; 0x1852 <strtok>
	while(pch != NULL){
     27e:	00 97       	sbiw	r24, 0x00	; 0
     280:	d9 f0       	breq	.+54     	; 0x2b8 <tokenize+0x5a>
		arg_strings[arg_index++] = pch;
     282:	f8 01       	movw	r30, r16
     284:	80 83       	st	Z, r24
     286:	91 83       	std	Z+1, r25	; 0x01
		//arg_index++;
		if(arg_index >max_tokens)break;
     288:	1c 14       	cp	r1, r12
     28a:	1d 04       	cpc	r1, r13
     28c:	c4 f4       	brge	.+48     	; 0x2be <tokenize+0x60>
     28e:	0e 5f       	subi	r16, 0xFE	; 254
     290:	1f 4f       	sbci	r17, 0xFF	; 255
     292:	c1 e0       	ldi	r28, 0x01	; 1
     294:	d0 e0       	ldi	r29, 0x00	; 0
     296:	08 c0       	rjmp	.+16     	; 0x2a8 <tokenize+0x4a>
	int arg_index = 0;

	char *pch;
	pch = strtok(command,delim);
	while(pch != NULL){
		arg_strings[arg_index++] = pch;
     298:	21 96       	adiw	r28, 0x01	; 1
     29a:	f8 01       	movw	r30, r16
     29c:	81 93       	st	Z+, r24
     29e:	91 93       	st	Z+, r25
     2a0:	8f 01       	movw	r16, r30
		//arg_index++;
		if(arg_index >max_tokens)break;
     2a2:	cc 16       	cp	r12, r28
     2a4:	dd 06       	cpc	r13, r29
     2a6:	6c f0       	brlt	.+26     	; 0x2c2 <tokenize+0x64>
		pch = strtok(NULL,delim);
     2a8:	b7 01       	movw	r22, r14
     2aa:	80 e0       	ldi	r24, 0x00	; 0
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	0e 94 29 0c 	call	0x1852	; 0x1852 <strtok>

	int arg_index = 0;

	char *pch;
	pch = strtok(command,delim);
	while(pch != NULL){
     2b2:	00 97       	sbiw	r24, 0x00	; 0
     2b4:	89 f7       	brne	.-30     	; 0x298 <tokenize+0x3a>
     2b6:	05 c0       	rjmp	.+10     	; 0x2c2 <tokenize+0x64>
volatile rtctick_t esp8266_wait_timesnap = 0;


static void tokenize(char * command, int * arg_count, const char *delim, int max_tokens, char *arg_strings[]){

	int arg_index = 0;
     2b8:	c0 e0       	ldi	r28, 0x00	; 0
     2ba:	d0 e0       	ldi	r29, 0x00	; 0
     2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <tokenize+0x64>

	char *pch;
	pch = strtok(command,delim);
	while(pch != NULL){
		arg_strings[arg_index++] = pch;
     2be:	c1 e0       	ldi	r28, 0x01	; 1
     2c0:	d0 e0       	ldi	r29, 0x00	; 0
		//arg_index++;
		if(arg_index >max_tokens)break;
		pch = strtok(NULL,delim);
	}
	*arg_count = arg_index;
     2c2:	f5 01       	movw	r30, r10
     2c4:	c0 83       	st	Z, r28
     2c6:	d1 83       	std	Z+1, r29	; 0x01
}
     2c8:	df 91       	pop	r29
     2ca:	cf 91       	pop	r28
     2cc:	1f 91       	pop	r17
     2ce:	0f 91       	pop	r16
     2d0:	ff 90       	pop	r15
     2d2:	ef 90       	pop	r14
     2d4:	df 90       	pop	r13
     2d6:	cf 90       	pop	r12
     2d8:	bf 90       	pop	r11
     2da:	af 90       	pop	r10
     2dc:	08 95       	ret

000002de <rtc_init>:
/*
 *	initialize the rtc
 */
void rtc_init(){
	//enabling interrupt all three level, high, mid, and low
	PMIC_CTRL |= (7<<0);
     2de:	e2 ea       	ldi	r30, 0xA2	; 162
     2e0:	f0 e0       	ldi	r31, 0x00	; 0
     2e2:	80 81       	ld	r24, Z
     2e4:	87 60       	ori	r24, 0x07	; 7
     2e6:	80 83       	st	Z, r24
	//selecting clock source 32.768kHz from 32.768kHz crystal oscillator on TOSC, enabling RTC clock source
	CLK_RTCCTRL = (5<<1) | (1<<0);//crystal oscillator on TOSC| enabling clock
     2e8:	8b e0       	ldi	r24, 0x0B	; 11
     2ea:	80 93 43 00 	sts	0x0043, r24
	//enabling interrupts for overflow
	RTC_INTCTRL	|= (0b00000001);
     2ee:	e2 e0       	ldi	r30, 0x02	; 2
     2f0:	f4 e0       	ldi	r31, 0x04	; 4
     2f2:	80 81       	ld	r24, Z
     2f4:	81 60       	ori	r24, 0x01	; 1
     2f6:	80 83       	st	Z, r24
	RTC_PER = RTC_PER_VAL; //period_val  = 2
     2f8:	80 e2       	ldi	r24, 0x20	; 32
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	80 93 0a 04 	sts	0x040A, r24
     300:	90 93 0b 04 	sts	0x040B, r25
	//selecting clock prescaling
	RTC_CTRL = (1<<0);//no prescaling
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	80 93 00 04 	sts	0x0400, r24
	sei();
     30a:	78 94       	sei
     30c:	08 95       	ret

0000030e <rtc_ms_delay>:


/*
 *	ms wait until
 */
void rtc_ms_delay(int ms){
     30e:	0f 93       	push	r16
     310:	1f 93       	push	r17
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	00 d0       	rcall	.+0      	; 0x318 <rtc_ms_delay+0xa>
     318:	1f 92       	push	r1
     31a:	cd b7       	in	r28, 0x3d	; 61
     31c:	de b7       	in	r29, 0x3e	; 62
     31e:	bc 01       	movw	r22, r24
	rtctick_t tempsnap = rtc_tick;
     320:	80 91 18 2b 	lds	r24, 0x2B18
     324:	90 91 19 2b 	lds	r25, 0x2B19
     328:	a0 91 1a 2b 	lds	r26, 0x2B1A
     32c:	b0 91 1b 2b 	lds	r27, 0x2B1B
     330:	89 83       	std	Y+1, r24	; 0x01
     332:	9a 83       	std	Y+2, r25	; 0x02
     334:	ab 83       	std	Y+3, r26	; 0x03
     336:	bc 83       	std	Y+4, r27	; 0x04
	while(rtc_tick-tempsnap < rtc_ms_ticks(ms));
     338:	cb 01       	movw	r24, r22
     33a:	77 0f       	add	r23, r23
     33c:	aa 0b       	sbc	r26, r26
     33e:	bb 0b       	sbc	r27, r27
     340:	bc 01       	movw	r22, r24
     342:	cd 01       	movw	r24, r26
     344:	05 2e       	mov	r0, r21
     346:	5f e0       	ldi	r21, 0x0F	; 15
     348:	66 0f       	add	r22, r22
     34a:	77 1f       	adc	r23, r23
     34c:	88 1f       	adc	r24, r24
     34e:	99 1f       	adc	r25, r25
     350:	5a 95       	dec	r21
     352:	d1 f7       	brne	.-12     	; 0x348 <rtc_ms_delay+0x3a>
     354:	50 2d       	mov	r21, r0
     356:	20 e0       	ldi	r18, 0x00	; 0
     358:	3d e7       	ldi	r19, 0x7D	; 125
     35a:	40 e0       	ldi	r20, 0x00	; 0
     35c:	50 e0       	ldi	r21, 0x00	; 0
     35e:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__divmodsi4>
     362:	89 01       	movw	r16, r18
     364:	9a 01       	movw	r18, r20
     366:	80 91 18 2b 	lds	r24, 0x2B18
     36a:	90 91 19 2b 	lds	r25, 0x2B19
     36e:	a0 91 1a 2b 	lds	r26, 0x2B1A
     372:	b0 91 1b 2b 	lds	r27, 0x2B1B
     376:	49 81       	ldd	r20, Y+1	; 0x01
     378:	5a 81       	ldd	r21, Y+2	; 0x02
     37a:	6b 81       	ldd	r22, Y+3	; 0x03
     37c:	7c 81       	ldd	r23, Y+4	; 0x04
     37e:	84 1b       	sub	r24, r20
     380:	95 0b       	sbc	r25, r21
     382:	a6 0b       	sbc	r26, r22
     384:	b7 0b       	sbc	r27, r23
     386:	80 17       	cp	r24, r16
     388:	91 07       	cpc	r25, r17
     38a:	a2 07       	cpc	r26, r18
     38c:	b3 07       	cpc	r27, r19
     38e:	58 f3       	brcs	.-42     	; 0x366 <rtc_ms_delay+0x58>
	
}
     390:	24 96       	adiw	r28, 0x04	; 4
     392:	cd bf       	out	0x3d, r28	; 61
     394:	de bf       	out	0x3e, r29	; 62
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	1f 91       	pop	r17
     39c:	0f 91       	pop	r16
     39e:	08 95       	ret

000003a0 <__vector_10>:

/*
 *	interrupt service routine for overflow interrupt event
 */
ISR(RTC_OVF_vect)
{
     3a0:	1f 92       	push	r1
     3a2:	0f 92       	push	r0
     3a4:	0f b6       	in	r0, 0x3f	; 63
     3a6:	0f 92       	push	r0
     3a8:	11 24       	eor	r1, r1
     3aa:	8f 93       	push	r24
     3ac:	9f 93       	push	r25
     3ae:	af 93       	push	r26
     3b0:	bf 93       	push	r27
	rtc_tick++;
     3b2:	80 91 18 2b 	lds	r24, 0x2B18
     3b6:	90 91 19 2b 	lds	r25, 0x2B19
     3ba:	a0 91 1a 2b 	lds	r26, 0x2B1A
     3be:	b0 91 1b 2b 	lds	r27, 0x2B1B
     3c2:	01 96       	adiw	r24, 0x01	; 1
     3c4:	a1 1d       	adc	r26, r1
     3c6:	b1 1d       	adc	r27, r1
     3c8:	80 93 18 2b 	sts	0x2B18, r24
     3cc:	90 93 19 2b 	sts	0x2B19, r25
     3d0:	a0 93 1a 2b 	sts	0x2B1A, r26
     3d4:	b0 93 1b 2b 	sts	0x2B1B, r27
	
}
     3d8:	bf 91       	pop	r27
     3da:	af 91       	pop	r26
     3dc:	9f 91       	pop	r25
     3de:	8f 91       	pop	r24
     3e0:	0f 90       	pop	r0
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	0f 90       	pop	r0
     3e6:	1f 90       	pop	r1
     3e8:	18 95       	reti

000003ea <__vector_11>:

/*
 *	interrupt service routine for compare interrupt event
 */
ISR(RTC_COMP_vect)
{
     3ea:	1f 92       	push	r1
     3ec:	0f 92       	push	r0
     3ee:	0f b6       	in	r0, 0x3f	; 63
     3f0:	0f 92       	push	r0
     3f2:	11 24       	eor	r1, r1


}
     3f4:	0f 90       	pop	r0
     3f6:	0f be       	out	0x3f, r0	; 63
     3f8:	0f 90       	pop	r0
     3fa:	1f 90       	pop	r1
     3fc:	18 95       	reti

000003fe <enable_oscillator>:
		OSC_RC32KEN_bm	-> 32.768 KHz internal RC oscillator
		OSC_XOSCEN_bm	-> External Oscillator
		OSC_PLLEN_bm	-> PLL
 */
void enable_oscillator(OSC_options_t osc_type){
	OSC.CTRL |= (osc_type);
     3fe:	e0 e5       	ldi	r30, 0x50	; 80
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	90 81       	ld	r25, Z
     404:	89 2b       	or	r24, r25
     406:	80 83       	st	Z, r24
     408:	08 95       	ret

0000040a <sysclk_source>:
		CLK_SCLKSEL_RC32K_gc	-> 32.768 KHz internal RC oscillator
		CLK_SCLKSEL_XOSC_gc	-> External Oscillator
		CLK_SCLKSEL_PLL_gc	-> PLL		
 */
void sysclk_source(CLK_SCLKSEL_t clk_src){
	while(!(OSC.STATUS&clk_src));
     40a:	e0 e5       	ldi	r30, 0x50	; 80
     40c:	f0 e0       	ldi	r31, 0x00	; 0
     40e:	91 81       	ldd	r25, Z+1	; 0x01
     410:	98 23       	and	r25, r24
     412:	e9 f3       	breq	.-6      	; 0x40e <sysclk_source+0x4>
	ccp_ioreg();
     414:	98 ed       	ldi	r25, 0xD8	; 216
     416:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL = clk_src;
     418:	80 93 40 00 	sts	0x0040, r24
     41c:	08 95       	ret

0000041e <usart_transmit_by_val>:

/**
 * transmit data over usart by value
 @param data value of the data to be sent
 */
void usart_transmit_by_val(USART_t *usart_unit, uint8_t data){
     41e:	fc 01       	movw	r30, r24
	while(!(usart_unit->STATUS&USART_DREIF_bm));
     420:	91 81       	ldd	r25, Z+1	; 0x01
     422:	95 ff       	sbrs	r25, 5
     424:	fd cf       	rjmp	.-6      	; 0x420 <usart_transmit_by_val+0x2>
	usart_unit->DATA = data;	
     426:	60 83       	st	Z, r22
     428:	08 95       	ret

0000042a <USARTC0_putchar>:
	}
	
	
	
#if USE_STDIO_ON_USARTC0 == 1
	create_serial_stream(USARTC0);
     42a:	cf 93       	push	r28
     42c:	c8 2f       	mov	r28, r24
     42e:	8a 30       	cpi	r24, 0x0A	; 10
     430:	19 f4       	brne	.+6      	; 0x438 <USARTC0_putchar+0xe>
     432:	8d e0       	ldi	r24, 0x0D	; 13
     434:	0e 94 15 02 	call	0x42a	; 0x42a <USARTC0_putchar>
     438:	6c 2f       	mov	r22, r28
     43a:	80 ea       	ldi	r24, 0xA0	; 160
     43c:	98 e0       	ldi	r25, 0x08	; 8
     43e:	0e 94 0f 02 	call	0x41e	; 0x41e <usart_transmit_by_val>
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	cf 91       	pop	r28
     448:	08 95       	ret

0000044a <USARTE0_putchar>:
#if USE_STDIO_ON_USARTD1 == 1
create_serial_stream(USARTD1);
#endif

#if USE_STDIO_ON_USARTE0 == 1
create_serial_stream(USARTE0);
     44a:	cf 93       	push	r28
     44c:	c8 2f       	mov	r28, r24
     44e:	8a 30       	cpi	r24, 0x0A	; 10
     450:	19 f4       	brne	.+6      	; 0x458 <USARTE0_putchar+0xe>
     452:	8d e0       	ldi	r24, 0x0D	; 13
     454:	0e 94 25 02 	call	0x44a	; 0x44a <USARTE0_putchar>
     458:	6c 2f       	mov	r22, r28
     45a:	80 ea       	ldi	r24, 0xA0	; 160
     45c:	9a e0       	ldi	r25, 0x0A	; 10
     45e:	0e 94 0f 02 	call	0x41e	; 0x41e <usart_transmit_by_val>
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	cf 91       	pop	r28
     468:	08 95       	ret

0000046a <usart_receive_by_ref>:

/**
 * transmit address to receive datay into
 @param data address of the data to be received
 */
void usart_receive_by_ref(USART_t *usart_unit, uint8_t *data){
     46a:	fc 01       	movw	r30, r24
	while(!(usart_unit->STATUS&USART_RXCIF_bm));
     46c:	91 81       	ldd	r25, Z+1	; 0x01
     46e:	99 23       	and	r25, r25
     470:	ec f7       	brge	.-6      	; 0x46c <usart_receive_by_ref+0x2>
	*data = usart_unit->DATA;	
     472:	80 81       	ld	r24, Z
     474:	fb 01       	movw	r30, r22
     476:	80 83       	st	Z, r24
     478:	08 95       	ret

0000047a <USARTC0_getchar>:
	}
	
	
	
#if USE_STDIO_ON_USARTC0 == 1
	create_serial_stream(USARTC0);
     47a:	0f 93       	push	r16
     47c:	1f 93       	push	r17
     47e:	cf 93       	push	r28
     480:	df 93       	push	r29
     482:	1f 92       	push	r1
     484:	cd b7       	in	r28, 0x3d	; 61
     486:	de b7       	in	r29, 0x3e	; 62
     488:	8c 01       	movw	r16, r24
     48a:	be 01       	movw	r22, r28
     48c:	6f 5f       	subi	r22, 0xFF	; 255
     48e:	7f 4f       	sbci	r23, 0xFF	; 255
     490:	80 ea       	ldi	r24, 0xA0	; 160
     492:	98 e0       	ldi	r25, 0x08	; 8
     494:	0e 94 35 02 	call	0x46a	; 0x46a <usart_receive_by_ref>
     498:	b8 01       	movw	r22, r16
     49a:	89 81       	ldd	r24, Y+1	; 0x01
     49c:	0e 94 15 02 	call	0x42a	; 0x42a <USARTC0_putchar>
     4a0:	89 81       	ldd	r24, Y+1	; 0x01
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	0f 90       	pop	r0
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	1f 91       	pop	r17
     4ac:	0f 91       	pop	r16
     4ae:	08 95       	ret

000004b0 <USARTE0_getchar>:
#if USE_STDIO_ON_USARTD1 == 1
create_serial_stream(USARTD1);
#endif

#if USE_STDIO_ON_USARTE0 == 1
create_serial_stream(USARTE0);
     4b0:	0f 93       	push	r16
     4b2:	1f 93       	push	r17
     4b4:	cf 93       	push	r28
     4b6:	df 93       	push	r29
     4b8:	1f 92       	push	r1
     4ba:	cd b7       	in	r28, 0x3d	; 61
     4bc:	de b7       	in	r29, 0x3e	; 62
     4be:	8c 01       	movw	r16, r24
     4c0:	be 01       	movw	r22, r28
     4c2:	6f 5f       	subi	r22, 0xFF	; 255
     4c4:	7f 4f       	sbci	r23, 0xFF	; 255
     4c6:	80 ea       	ldi	r24, 0xA0	; 160
     4c8:	9a e0       	ldi	r25, 0x0A	; 10
     4ca:	0e 94 35 02 	call	0x46a	; 0x46a <usart_receive_by_ref>
     4ce:	b8 01       	movw	r22, r16
     4d0:	89 81       	ldd	r24, Y+1	; 0x01
     4d2:	0e 94 25 02 	call	0x44a	; 0x44a <USARTE0_putchar>
     4d6:	89 81       	ldd	r24, Y+1	; 0x01
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	0f 90       	pop	r0
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	1f 91       	pop	r17
     4e2:	0f 91       	pop	r16
     4e4:	08 95       	ret

000004e6 <usart_spi_transmit_receive>:
 *
 * @param usart
 * @param txdata
 * @return data received from slave
 */
uint8_t usart_spi_transmit_receive(USART_t * usart,uint8_t txdata){
     4e6:	fc 01       	movw	r30, r24
	
	while ((usart->STATUS & USART_DREIF_bm) == 0);
     4e8:	81 81       	ldd	r24, Z+1	; 0x01
     4ea:	85 ff       	sbrs	r24, 5
     4ec:	fd cf       	rjmp	.-6      	; 0x4e8 <usart_spi_transmit_receive+0x2>
	usart->DATA = txdata;
     4ee:	60 83       	st	Z, r22
	while((usart->STATUS & USART_TXCIF_bm) == 0);
     4f0:	81 81       	ldd	r24, Z+1	; 0x01
     4f2:	86 ff       	sbrs	r24, 6
     4f4:	fd cf       	rjmp	.-6      	; 0x4f0 <usart_spi_transmit_receive+0xa>
	(usart)->STATUS = USART_TXCIF_bm;
     4f6:	80 e4       	ldi	r24, 0x40	; 64
     4f8:	81 83       	std	Z+1, r24	; 0x01
	return (usart)->DATA;
     4fa:	80 81       	ld	r24, Z
}
     4fc:	08 95       	ret

000004fe <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
     4fe:	1f 93       	push	r17
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
	port_out_value_clear_mask(&PORTF,(1<<3));//select device
     504:	c0 ea       	ldi	r28, 0xA0	; 160
     506:	d6 e0       	ldi	r29, 0x06	; 6
     508:	18 e0       	ldi	r17, 0x08	; 8
     50a:	1e 83       	std	Y+6, r17	; 0x06
	port_out_value_clear_mask(&PORTD,(1<<0));//select command
     50c:	e0 e6       	ldi	r30, 0x60	; 96
     50e:	f6 e0       	ldi	r31, 0x06	; 6
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	96 83       	std	Z+6, r25	; 0x06
	ssd1306_sel_cmd() ;
     514:	96 83       	std	Z+6, r25	; 0x06
	usart_spi_transmit_receive(&USARTD0, command);//transmit
     516:	68 2f       	mov	r22, r24
     518:	80 ea       	ldi	r24, 0xA0	; 160
     51a:	99 e0       	ldi	r25, 0x09	; 9
     51c:	0e 94 73 02 	call	0x4e6	; 0x4e6 <usart_spi_transmit_receive>
	port_out_value_set_mask(&PORTF,(1<<3));//deselect device
     520:	1d 83       	std	Y+5, r17	; 0x05
	
}
     522:	df 91       	pop	r29
     524:	cf 91       	pop	r28
     526:	1f 91       	pop	r17
     528:	08 95       	ret

0000052a <create_file_stream>:
void set_stdio_stream(FILE* stdio_file)
{
	stdout = stdin = stdio_file;
}

void create_file_stream(FILE* stdio_file, int (*putc_func)(char ch, FILE *stream) , int (*getc_func) (FILE *stream)){
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
     52e:	cd b7       	in	r28, 0x3d	; 61
     530:	de b7       	in	r29, 0x3e	; 62
     532:	2e 97       	sbiw	r28, 0x0e	; 14
     534:	cd bf       	out	0x3d, r28	; 61
     536:	de bf       	out	0x3e, r29	; 62
     538:	9c 01       	movw	r18, r24
	FILE temp_file = FDEV_SETUP_STREAM(putc_func, getc_func, _FDEV_SETUP_RW);
     53a:	fe 01       	movw	r30, r28
     53c:	31 96       	adiw	r30, 0x01	; 1
     53e:	8e e0       	ldi	r24, 0x0E	; 14
     540:	df 01       	movw	r26, r30
     542:	1d 92       	st	X+, r1
     544:	8a 95       	dec	r24
     546:	e9 f7       	brne	.-6      	; 0x542 <create_file_stream+0x18>
	*stdio_file = temp_file;
     548:	83 e0       	ldi	r24, 0x03	; 3
     54a:	8c 83       	std	Y+4, r24	; 0x04
     54c:	69 87       	std	Y+9, r22	; 0x09
     54e:	7a 87       	std	Y+10, r23	; 0x0a
     550:	4b 87       	std	Y+11, r20	; 0x0b
     552:	5c 87       	std	Y+12, r21	; 0x0c
     554:	9e e0       	ldi	r25, 0x0E	; 14
     556:	d9 01       	movw	r26, r18
     558:	01 90       	ld	r0, Z+
     55a:	0d 92       	st	X+, r0
     55c:	9a 95       	dec	r25
     55e:	e1 f7       	brne	.-8      	; 0x558 <create_file_stream+0x2e>
}
     560:	2e 96       	adiw	r28, 0x0e	; 14
     562:	cd bf       	out	0x3d, r28	; 61
     564:	de bf       	out	0x3e, r29	; 62
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	08 95       	ret

0000056c <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
     56c:	ef 92       	push	r14
     56e:	ff 92       	push	r15
     570:	0f 93       	push	r16
     572:	1f 93       	push	r17
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
	
	port_out_value_clear_mask(&PORTF,(1<<3));//select device
     578:	c0 ea       	ldi	r28, 0xA0	; 160
     57a:	d6 e0       	ldi	r29, 0x06	; 6
     57c:	18 e0       	ldi	r17, 0x08	; 8
     57e:	1e 83       	std	Y+6, r17	; 0x06
	ssd1306_sel_data() ;
     580:	0f 2e       	mov	r0, r31
     582:	f0 e6       	ldi	r31, 0x60	; 96
     584:	ef 2e       	mov	r14, r31
     586:	f6 e0       	ldi	r31, 0x06	; 6
     588:	ff 2e       	mov	r15, r31
     58a:	f0 2d       	mov	r31, r0
     58c:	01 e0       	ldi	r16, 0x01	; 1
     58e:	f7 01       	movw	r30, r14
     590:	05 83       	std	Z+5, r16	; 0x05
	usart_spi_transmit_receive(&USARTD0, data);//transmit
     592:	68 2f       	mov	r22, r24
     594:	80 ea       	ldi	r24, 0xA0	; 160
     596:	99 e0       	ldi	r25, 0x09	; 9
     598:	0e 94 73 02 	call	0x4e6	; 0x4e6 <usart_spi_transmit_receive>
	ssd1306_sel_cmd();
     59c:	f7 01       	movw	r30, r14
     59e:	06 83       	std	Z+6, r16	; 0x06
	port_out_value_set_mask(&PORTF,(1<<3));//deselect device
     5a0:	1d 83       	std	Y+5, r17	; 0x05

}
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	1f 91       	pop	r17
     5a8:	0f 91       	pop	r16
     5aa:	ff 90       	pop	r15
     5ac:	ef 90       	pop	r14
     5ae:	08 95       	ret

000005b0 <ssd1306_set_page_address>:
 */
void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
     5b0:	87 70       	andi	r24, 0x07	; 7
     5b2:	80 6b       	ori	r24, 0xB0	; 176
     5b4:	0e 94 7f 02 	call	0x4fe	; 0x4fe <ssd1306_write_command>
     5b8:	08 95       	ret

000005ba <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
void ssd1306_set_column_address(uint8_t address)
{
     5ba:	cf 93       	push	r28
     5bc:	c8 2f       	mov	r28, r24
	// Make sure the address is 7 bits
	address &= 0x7F;
     5be:	98 2f       	mov	r25, r24
     5c0:	9f 77       	andi	r25, 0x7F	; 127
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
     5c2:	89 2f       	mov	r24, r25
     5c4:	82 95       	swap	r24
     5c6:	8f 70       	andi	r24, 0x0F	; 15
     5c8:	80 61       	ori	r24, 0x10	; 16
     5ca:	0e 94 7f 02 	call	0x4fe	; 0x4fe <ssd1306_write_command>
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
     5ce:	8c 2f       	mov	r24, r28
     5d0:	8f 70       	andi	r24, 0x0F	; 15
     5d2:	0e 94 7f 02 	call	0x4fe	; 0x4fe <ssd1306_write_command>
}
     5d6:	cf 91       	pop	r28
     5d8:	08 95       	ret

000005da <usart_init_spi>:
	}
}


void usart_init_spi(USART_t *usart, const usart_spi_options_emon_t *opt)
{
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	ec 01       	movw	r28, r24
     5e0:	fb 01       	movw	r30, r22
	//ioport_pin_t sck_pin;
	//uint8_t invert_sck;

	(usart)->CTRLB &= ~USART_RXEN_bm;
     5e2:	8c 81       	ldd	r24, Y+4	; 0x04
     5e4:	8f 7e       	andi	r24, 0xEF	; 239
     5e6:	8c 83       	std	Y+4, r24	; 0x04

	//invert_sck = (opt->spimode == 2) || (opt->spimode == 3);

	PORTD.DIRSET = (1<<1);//sck pin output
     5e8:	a0 e6       	ldi	r26, 0x60	; 96
     5ea:	b6 e0       	ldi	r27, 0x06	; 6
     5ec:	82 e0       	ldi	r24, 0x02	; 2
     5ee:	11 96       	adiw	r26, 0x01	; 1
     5f0:	8c 93       	st	X, r24
     5f2:	11 97       	sbiw	r26, 0x01	; 1
	PORTD.OUTSET = (1<<1);//sck pin output level high
     5f4:	15 96       	adiw	r26, 0x05	; 5
     5f6:	8c 93       	st	X, r24

	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | USART_CMODE_MSPI_gc;
     5f8:	8d 81       	ldd	r24, Y+5	; 0x05
     5fa:	80 6c       	ori	r24, 0xC0	; 192
     5fc:	8d 83       	std	Y+5, r24	; 0x05

	if (opt->spimode == 1 || opt->spimode == 3) {
     5fe:	84 81       	ldd	r24, Z+4	; 0x04
     600:	8d 7f       	andi	r24, 0xFD	; 253
     602:	81 30       	cpi	r24, 0x01	; 1
     604:	21 f4       	brne	.+8      	; 0x60e <usart_init_spi+0x34>
		usart->CTRLC |= USART_UCPHA_bm;
     606:	8d 81       	ldd	r24, Y+5	; 0x05
     608:	82 60       	ori	r24, 0x02	; 2
     60a:	8d 83       	std	Y+5, r24	; 0x05
     60c:	03 c0       	rjmp	.+6      	; 0x614 <usart_init_spi+0x3a>
	}
	else {
		usart->CTRLC &= ~USART_UCPHA_bm;
     60e:	8d 81       	ldd	r24, Y+5	; 0x05
     610:	8d 7f       	andi	r24, 0xFD	; 253
     612:	8d 83       	std	Y+5, r24	; 0x05
	}
	
	if (opt->data_order) {
     614:	85 81       	ldd	r24, Z+5	; 0x05
     616:	88 23       	and	r24, r24
     618:	21 f0       	breq	.+8      	; 0x622 <usart_init_spi+0x48>
		(usart)->CTRLC |= USART_DORD_bm;
     61a:	8d 81       	ldd	r24, Y+5	; 0x05
     61c:	84 60       	ori	r24, 0x04	; 4
     61e:	8d 83       	std	Y+5, r24	; 0x05
     620:	03 c0       	rjmp	.+6      	; 0x628 <usart_init_spi+0x4e>
	}
	else {
		(usart)->CTRLC &= ~USART_DORD_bm;
     622:	8d 81       	ldd	r24, Y+5	; 0x05
     624:	8b 7f       	andi	r24, 0xFB	; 251
     626:	8d 83       	std	Y+5, r24	; 0x05
	}


	uint16_t bsel_value = (32000000UL/ (opt->baudrate*2)) -1 ;
     628:	80 81       	ld	r24, Z
     62a:	91 81       	ldd	r25, Z+1	; 0x01
     62c:	a2 81       	ldd	r26, Z+2	; 0x02
     62e:	b3 81       	ldd	r27, Z+3	; 0x03
     630:	9c 01       	movw	r18, r24
     632:	ad 01       	movw	r20, r26
     634:	22 0f       	add	r18, r18
     636:	33 1f       	adc	r19, r19
     638:	44 1f       	adc	r20, r20
     63a:	55 1f       	adc	r21, r21
     63c:	60 e0       	ldi	r22, 0x00	; 0
     63e:	78 e4       	ldi	r23, 0x48	; 72
     640:	88 ee       	ldi	r24, 0xE8	; 232
     642:	91 e0       	ldi	r25, 0x01	; 1
     644:	0e 94 ca 0b 	call	0x1794	; 0x1794 <__udivmodsi4>
     648:	21 50       	subi	r18, 0x01	; 1
     64a:	31 09       	sbc	r19, r1
	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
     64c:	83 2f       	mov	r24, r19
     64e:	8f 70       	andi	r24, 0x0F	; 15
     650:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
     652:	2e 83       	std	Y+6, r18	; 0x06
	
	(usart)->CTRLB |= USART_TXEN_bm;
     654:	8c 81       	ldd	r24, Y+4	; 0x04
     656:	88 60       	ori	r24, 0x08	; 8
     658:	8c 83       	std	Y+4, r24	; 0x04

}
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	08 95       	ret

00000660 <ssd1306_init>:




void ssd1306_init(void)
{
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	00 d0       	rcall	.+0      	; 0x666 <ssd1306_init+0x6>
     666:	00 d0       	rcall	.+0      	; 0x668 <ssd1306_init+0x8>
     668:	cd b7       	in	r28, 0x3d	; 61
     66a:	de b7       	in	r29, 0x3e	; 62

	port_direction_set_mask(&PORTF,(1<<3));//ss
     66c:	40 ea       	ldi	r20, 0xA0	; 160
     66e:	56 e0       	ldi	r21, 0x06	; 6
     670:	88 e0       	ldi	r24, 0x08	; 8
     672:	da 01       	movw	r26, r20
     674:	11 96       	adiw	r26, 0x01	; 1
     676:	8c 93       	st	X, r24
	port_direction_set_mask(&PORTD,(1<<0));//data_cmd
     678:	e0 e6       	ldi	r30, 0x60	; 96
     67a:	f6 e0       	ldi	r31, 0x06	; 6
     67c:	21 e0       	ldi	r18, 0x01	; 1
     67e:	21 83       	std	Z+1, r18	; 0x01
	port_direction_set_mask(&PORTA,(1<<3));//reset
     680:	60 e0       	ldi	r22, 0x00	; 0
     682:	76 e0       	ldi	r23, 0x06	; 6
     684:	db 01       	movw	r26, r22
     686:	11 96       	adiw	r26, 0x01	; 1
     688:	8c 93       	st	X, r24
	port_direction_set_mask(&PORTD,(1<<1));//sck
     68a:	92 e0       	ldi	r25, 0x02	; 2
     68c:	91 83       	std	Z+1, r25	; 0x01
	port_direction_set_mask(&PORTD,(1<<3));//mosi
     68e:	81 83       	std	Z+1, r24	; 0x01
	
	port_out_value_set_mask(&PORTF,(1<<3));//ss
     690:	da 01       	movw	r26, r20
     692:	15 96       	adiw	r26, 0x05	; 5
     694:	8c 93       	st	X, r24
	port_out_value_set_mask(&PORTD,(1<<0));//data_cmd
     696:	25 83       	std	Z+5, r18	; 0x05
	port_out_value_set_mask(&PORTA,(1<<3));//reset
     698:	db 01       	movw	r26, r22
     69a:	15 96       	adiw	r26, 0x05	; 5
     69c:	8c 93       	st	X, r24
     69e:	15 97       	sbiw	r26, 0x05	; 5
	port_out_value_set_mask(&PORTD,(1<<1));//sck
     6a0:	95 83       	std	Z+5, r25	; 0x05
	port_out_value_set_mask(&PORTD,(1<<3));//mosi
     6a2:	85 83       	std	Z+5, r24	; 0x05
 * \note this functions should not be confused with the \ref ssd1306_soft_reset()
 * function, this command will control the RST pin.
 */
static inline void ssd1306_hard_reset(void)
{
	PORTA.OUTCLR = (1<<3);
     6a4:	16 96       	adiw	r26, 0x06	; 6
     6a6:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6a8:	ba e6       	ldi	r27, 0x6A	; 106
     6aa:	ba 95       	dec	r27
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <ssd1306_init+0x4a>
     6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <ssd1306_init+0x50>
	delay_us(10); // At least 3us
	PORTA.OUTSET = (1<<3);
     6b0:	fb 01       	movw	r30, r22
     6b2:	85 83       	std	Z+5, r24	; 0x05
     6b4:	fa e6       	ldi	r31, 0x6A	; 106
     6b6:	fa 95       	dec	r31
     6b8:	f1 f7       	brne	.-4      	; 0x6b6 <ssd1306_init+0x56>
     6ba:	00 c0       	rjmp	.+0      	; 0x6bc <ssd1306_init+0x5c>
	spi_flags_t spi_flags = 0;
	//board_spi_select_id_t spi_select_id = 0;
	
	//irqflags_t flags = cpu_irq_save();
	//*((uint8_t *)&PR.PRGEN + SYSCLK_PORT_D) &= ~PR_USART0_bm;
	PR.PRPD &= ~PR_USART0_bm;
     6bc:	e0 e7       	ldi	r30, 0x70	; 112
     6be:	f0 e0       	ldi	r31, 0x00	; 0
     6c0:	84 81       	ldd	r24, Z+4	; 0x04
     6c2:	8f 7e       	andi	r24, 0xEF	; 239
     6c4:	84 83       	std	Z+4, r24	; 0x04
	
	//cpu_irq_restore(flags);
	
	usart_spi_options_emon_t opt;
	opt.baudrate=12000000;
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	9b e1       	ldi	r25, 0x1B	; 27
     6ca:	a7 eb       	ldi	r26, 0xB7	; 183
     6cc:	b0 e0       	ldi	r27, 0x00	; 0
     6ce:	89 83       	std	Y+1, r24	; 0x01
     6d0:	9a 83       	std	Y+2, r25	; 0x02
     6d2:	ab 83       	std	Y+3, r26	; 0x03
     6d4:	bc 83       	std	Y+4, r27	; 0x04
	opt.spimode=spi_flags;
     6d6:	1d 82       	std	Y+5, r1	; 0x05
	opt.data_order=0;
     6d8:	1e 82       	std	Y+6, r1	; 0x06
	usart_init_spi(&USARTD0, &opt);
     6da:	be 01       	movw	r22, r28
     6dc:	6f 5f       	subi	r22, 0xFF	; 255
     6de:	7f 4f       	sbci	r23, 0xFF	; 255
     6e0:	80 ea       	ldi	r24, 0xA0	; 160
     6e2:	99 e0       	ldi	r25, 0x09	; 9
     6e4:	0e 94 ed 02 	call	0x5da	; 0x5da <usart_init_spi>
	

	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
     6e8:	88 ea       	ldi	r24, 0xA8	; 168
     6ea:	0e 94 7f 02 	call	0x4fe	; 0x4fe <ssd1306_write_command>
	ssd1306_write_command(0x1F);
     6ee:	8f e1       	ldi	r24, 0x1F	; 31
     6f0:	0e 94 7f 02 	call	0x4fe	; 0x4fe <ssd1306_write_command>

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
     6f4:	83 ed       	ldi	r24, 0xD3	; 211
     6f6:	0e 94 7f 02 	call	0x4fe	; 0x4fe <ssd1306_write_command>
	ssd1306_write_command(0x00);
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	0e 94 7f 02 	call	0x4fe	; 0x4fe <ssd1306_write_command>

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(0x00));
     700:	80 e4       	ldi	r24, 0x40	; 64
     702:	0e 94 7f 02 	call	0x4fe	; 0x4fe <ssd1306_write_command>

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
     706:	81 ea       	ldi	r24, 0xA1	; 161
     708:	0e 94 7f 02 	call	0x4fe	; 0x4fe <ssd1306_write_command>

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
     70c:	88 ec       	ldi	r24, 0xC8	; 200
     70e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <ssd1306_write_command>

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
     712:	8a ed       	ldi	r24, 0xDA	; 218
     714:	0e 94 7f 02 	call	0x4fe	; 0x4fe <ssd1306_write_command>
	ssd1306_write_command(0x02);
     718:	82 e0       	ldi	r24, 0x02	; 2
     71a:	0e 94 7f 02 	call	0x4fe	; 0x4fe <ssd1306_write_command>

	//ssd1306_set_contrast(0x8F);
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
     71e:	81 e8       	ldi	r24, 0x81	; 129
     720:	0e 94 7f 02 	call	0x4fe	; 0x4fe <ssd1306_write_command>
	ssd1306_write_command(0x8F);
     724:	8f e8       	ldi	r24, 0x8F	; 143
     726:	0e 94 7f 02 	call	0x4fe	; 0x4fe <ssd1306_write_command>

		
	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
     72a:	84 ea       	ldi	r24, 0xA4	; 164
     72c:	0e 94 7f 02 	call	0x4fe	; 0x4fe <ssd1306_write_command>

	//ssd1306_display_invert_disable();
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
     730:	86 ea       	ldi	r24, 0xA6	; 166
     732:	0e 94 7f 02 	call	0x4fe	; 0x4fe <ssd1306_write_command>

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
     736:	85 ed       	ldi	r24, 0xD5	; 213
     738:	0e 94 7f 02 	call	0x4fe	; 0x4fe <ssd1306_write_command>
	ssd1306_write_command(0x80);
     73c:	80 e8       	ldi	r24, 0x80	; 128
     73e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <ssd1306_write_command>

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
     742:	8d e8       	ldi	r24, 0x8D	; 141
     744:	0e 94 7f 02 	call	0x4fe	; 0x4fe <ssd1306_write_command>
	ssd1306_write_command(0x14);
     748:	84 e1       	ldi	r24, 0x14	; 20
     74a:	0e 94 7f 02 	call	0x4fe	; 0x4fe <ssd1306_write_command>

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
     74e:	8b ed       	ldi	r24, 0xDB	; 219
     750:	0e 94 7f 02 	call	0x4fe	; 0x4fe <ssd1306_write_command>
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
     754:	80 e4       	ldi	r24, 0x40	; 64
     756:	0e 94 7f 02 	call	0x4fe	; 0x4fe <ssd1306_write_command>

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
     75a:	89 ed       	ldi	r24, 0xD9	; 217
     75c:	0e 94 7f 02 	call	0x4fe	; 0x4fe <ssd1306_write_command>
	ssd1306_write_command(0xF1);
     760:	81 ef       	ldi	r24, 0xF1	; 241
     762:	0e 94 7f 02 	call	0x4fe	; 0x4fe <ssd1306_write_command>

	//ssd1306_display_on();
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
     766:	8f ea       	ldi	r24, 0xAF	; 175
     768:	0e 94 7f 02 	call	0x4fe	; 0x4fe <ssd1306_write_command>
}
     76c:	26 96       	adiw	r28, 0x06	; 6
     76e:	cd bf       	out	0x3d, r28	; 61
     770:	de bf       	out	0x3e, r29	; 62
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	08 95       	ret

00000778 <ssd1306_write_text>:
/**
 * \brief Display text on OLED screen.
 * \param string String to display.
 */
void ssd1306_write_text(const char *string)
{
     778:	ef 92       	push	r14
     77a:	ff 92       	push	r15
     77c:	0f 93       	push	r16
     77e:	1f 93       	push	r17
     780:	cf 93       	push	r28
	uint8_t *char_ptr;
	uint8_t i;

	while (*string != 0) {
     782:	dc 01       	movw	r26, r24
     784:	ec 91       	ld	r30, X
     786:	ee 23       	and	r30, r30
     788:	29 f1       	breq	.+74     	; 0x7d4 <ssd1306_write_text+0x5c>
     78a:	7c 01       	movw	r14, r24
     78c:	bf ef       	ldi	r27, 0xFF	; 255
     78e:	eb 1a       	sub	r14, r27
     790:	fb 0a       	sbc	r15, r27
		if (*string < 0x7F) {
     792:	ef 37       	cpi	r30, 0x7F	; 127
     794:	d0 f4       	brcc	.+52     	; 0x7ca <ssd1306_write_text+0x52>
			char_ptr = font_table[*string - 32];
     796:	f0 e0       	ldi	r31, 0x00	; 0
     798:	ee 0f       	add	r30, r30
     79a:	ff 1f       	adc	r31, r31
     79c:	e5 57       	subi	r30, 0x75	; 117
     79e:	fe 4d       	sbci	r31, 0xDE	; 222
     7a0:	00 81       	ld	r16, Z
     7a2:	11 81       	ldd	r17, Z+1	; 0x01
			for (i = 1; i <= char_ptr[0]; i++) {
     7a4:	f8 01       	movw	r30, r16
     7a6:	80 81       	ld	r24, Z
     7a8:	88 23       	and	r24, r24
     7aa:	61 f0       	breq	.+24     	; 0x7c4 <ssd1306_write_text+0x4c>
     7ac:	c1 e0       	ldi	r28, 0x01	; 1
				ssd1306_write_data(char_ptr[i]);
     7ae:	f8 01       	movw	r30, r16
     7b0:	ec 0f       	add	r30, r28
     7b2:	f1 1d       	adc	r31, r1
     7b4:	80 81       	ld	r24, Z
     7b6:	0e 94 b6 02 	call	0x56c	; 0x56c <ssd1306_write_data>
	uint8_t i;

	while (*string != 0) {
		if (*string < 0x7F) {
			char_ptr = font_table[*string - 32];
			for (i = 1; i <= char_ptr[0]; i++) {
     7ba:	cf 5f       	subi	r28, 0xFF	; 255
     7bc:	d8 01       	movw	r26, r16
     7be:	9c 91       	ld	r25, X
     7c0:	9c 17       	cp	r25, r28
     7c2:	a8 f7       	brcc	.-22     	; 0x7ae <ssd1306_write_text+0x36>
				ssd1306_write_data(char_ptr[i]);
			}
			ssd1306_write_data(0x00);
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	0e 94 b6 02 	call	0x56c	; 0x56c <ssd1306_write_data>
void ssd1306_write_text(const char *string)
{
	uint8_t *char_ptr;
	uint8_t i;

	while (*string != 0) {
     7ca:	d7 01       	movw	r26, r14
     7cc:	ed 91       	ld	r30, X+
     7ce:	7d 01       	movw	r14, r26
     7d0:	e1 11       	cpse	r30, r1
     7d2:	df cf       	rjmp	.-66     	; 0x792 <ssd1306_write_text+0x1a>
			}
			ssd1306_write_data(0x00);
		}
			string++;
	}
}
     7d4:	cf 91       	pop	r28
     7d6:	1f 91       	pop	r17
     7d8:	0f 91       	pop	r16
     7da:	ff 90       	pop	r15
     7dc:	ef 90       	pop	r14
     7de:	08 95       	ret

000007e0 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(uint8_t page, uint8_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     7e0:	20 e8       	ldi	r18, 0x80	; 128
     7e2:	82 9f       	mul	r24, r18
     7e4:	c0 01       	movw	r24, r0
     7e6:	11 24       	eor	r1, r1
     7e8:	86 0f       	add	r24, r22
     7ea:	91 1d       	adc	r25, r1
     7ec:	e0 91 16 29 	lds	r30, 0x2916
     7f0:	f0 91 17 29 	lds	r31, 0x2917
     7f4:	e8 0f       	add	r30, r24
     7f6:	f9 1f       	adc	r31, r25
     7f8:	40 83       	st	Z, r20
     7fa:	08 95       	ret

000007fc <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(uint8_t page, uint8_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
     7fc:	20 e8       	ldi	r18, 0x80	; 128
     7fe:	82 9f       	mul	r24, r18
     800:	c0 01       	movw	r24, r0
     802:	11 24       	eor	r1, r1
     804:	86 0f       	add	r24, r22
     806:	91 1d       	adc	r25, r1
     808:	e0 91 16 29 	lds	r30, 0x2916
     80c:	f0 91 17 29 	lds	r31, 0x2917
     810:	e8 0f       	add	r30, r24
     812:	f9 1f       	adc	r31, r25
}
     814:	80 81       	ld	r24, Z
     816:	08 95       	ret

00000818 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
 */
void gfx_mono_ssd1306_put_byte(uint8_t page, uint8_t column,
		uint8_t data, uint8_t force)
{
     818:	1f 93       	push	r17
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
     81e:	18 2f       	mov	r17, r24
     820:	d6 2f       	mov	r29, r22
     822:	c4 2f       	mov	r28, r20
//#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
     824:	21 11       	cpse	r18, r1
     826:	04 c0       	rjmp	.+8      	; 0x830 <gfx_mono_ssd1306_put_byte+0x18>
     828:	0e 94 fe 03 	call	0x7fc	; 0x7fc <gfx_mono_framebuffer_get_byte>
     82c:	8c 17       	cp	r24, r28
     82e:	71 f0       	breq	.+28     	; 0x84c <gfx_mono_ssd1306_put_byte+0x34>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
     830:	4c 2f       	mov	r20, r28
     832:	6d 2f       	mov	r22, r29
     834:	81 2f       	mov	r24, r17
     836:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <gfx_mono_framebuffer_put_byte>
//#endif

	ssd1306_set_page_address(page);
     83a:	81 2f       	mov	r24, r17
     83c:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <ssd1306_set_page_address>
	ssd1306_set_column_address(column);
     840:	8d 2f       	mov	r24, r29
     842:	0e 94 dd 02 	call	0x5ba	; 0x5ba <ssd1306_set_column_address>

	ssd1306_write_data(data);
     846:	8c 2f       	mov	r24, r28
     848:	0e 94 b6 02 	call	0x56c	; 0x56c <ssd1306_write_data>
}
     84c:	df 91       	pop	r29
     84e:	cf 91       	pop	r28
     850:	1f 91       	pop	r17
     852:	08 95       	ret

00000854 <esp8266_init>:
 * @param chsize character size
 * @param clk2en enable double speed
 * @param mpcen enable multiprocessor communication
 */
void usart_config(USART_t *usart_unit,PORT_t *port_unit, USART_CMODE_t mode, USART_PMODE_t pmode, USART_CHSIZE_t chsize, uint8_t clk2xen, uint8_t mpcmen){
	usart_unit->CTRLB = USART_RXEN_bm | USART_TXEN_bm;
     854:	e0 ea       	ldi	r30, 0xA0	; 160
     856:	fa e0       	ldi	r31, 0x0A	; 10
     858:	88 e1       	ldi	r24, 0x18	; 24
     85a:	84 83       	std	Z+4, r24	; 0x04
	usart_unit->CTRLB |= (clk2xen<<USART_CLK2X_bp) | (mpcmen<<USART_MPCM_bp);
     85c:	84 81       	ldd	r24, Z+4	; 0x04
     85e:	84 83       	std	Z+4, r24	; 0x04
	usart_unit->CTRLC = mode |pmode | chsize;
     860:	83 e0       	ldi	r24, 0x03	; 3
     862:	85 83       	std	Z+5, r24	; 0x05

	
	if( (usart_unit == &USARTC0) || (usart_unit == &USARTD0) || (usart_unit == &USARTE0) || (usart_unit == &USARTF0) ){
		port_unit->DIRSET = (1<<3);//USARTx0 TXD pin output
     864:	a0 e8       	ldi	r26, 0x80	; 128
     866:	b6 e0       	ldi	r27, 0x06	; 6
     868:	88 e0       	ldi	r24, 0x08	; 8
     86a:	11 96       	adiw	r26, 0x01	; 1
     86c:	8c 93       	st	X, r24
     86e:	11 97       	sbiw	r26, 0x01	; 1
		port_unit->DIRCLR = (1<<2);//USARTx0 RXD pin input
     870:	84 e0       	ldi	r24, 0x04	; 4
     872:	12 96       	adiw	r26, 0x02	; 2
     874:	8c 93       	st	X, r24
 * @param baud_rate
 * @param bscale_val
 */
void usart_baud(USART_t *usart, unsigned long baud_rate, int bscale_val){
	uint16_t bsel_val = BAUD_VALUE(baud_rate,bscale_val);
	usart->BAUDCTRLA = bsel_val;
     876:	89 e8       	ldi	r24, 0x89	; 137
     878:	86 83       	std	Z+6, r24	; 0x06
	usart->BAUDCTRLB = (bscale_val<<USART_BSCALE_gp) | (bsel_val>>8);
     87a:	80 ed       	ldi	r24, 0xD0	; 208
     87c:	87 83       	std	Z+7, r24	; 0x07
 * @param txcintlvl
 * @param dreintlvl
 */
void usart_set_interrupt_level(USART_t *usart, USART_RXCINTLVL_t rxcintlvl, USART_TXCINTLVL_t txcintlvl, USART_DREINTLVL_t dreintlvl){
	//usart->CTRLA = (rxcintlvl<<USART_RXCINTLVL_gp) | (txcintlvl<<USART_TXCINTLVL_gp) | (dreintlvl<<USART_DREINTLVL_gp);
	usart->CTRLA = (rxcintlvl) | (txcintlvl) | (dreintlvl);
     87e:	80 e3       	ldi	r24, 0x30	; 48
     880:	83 83       	std	Z+3, r24	; 0x03

void esp8266_init(){
	usart_config(&USARTE0,&PORTE,USART_CMODE_ASYNCHRONOUS_gc,USART_PMODE_DISABLED_gc,USART_CHSIZE_8BIT_gc,false,false);
	usart_baud(&USARTE0,115200,-3);
	usart_set_interrupt_level(&USARTE0, USART_RXCINTLVL_HI_gc, USART_TXCINTLVL_OFF_gc, USART_DREINTLVL_OFF_gc);
	create_file_stream(&esp8266_stream,&USARTE0_putchar,&USARTE0_getchar);
     882:	48 e5       	ldi	r20, 0x58	; 88
     884:	52 e0       	ldi	r21, 0x02	; 2
     886:	65 e2       	ldi	r22, 0x25	; 37
     888:	72 e0       	ldi	r23, 0x02	; 2
     88a:	8c ea       	ldi	r24, 0xAC	; 172
     88c:	9c e2       	ldi	r25, 0x2C	; 44
     88e:	0e 94 95 02 	call	0x52a	; 0x52a <create_file_stream>
     892:	08 95       	ret

00000894 <esp8266_receive>:
}


void esp8266_receive(int ms_wait){
     894:	0f 93       	push	r16
     896:	1f 93       	push	r17
     898:	bc 01       	movw	r22, r24
	esp8266_timesnap = rtc_tick;
     89a:	80 91 18 2b 	lds	r24, 0x2B18
     89e:	90 91 19 2b 	lds	r25, 0x2B19
     8a2:	a0 91 1a 2b 	lds	r26, 0x2B1A
     8a6:	b0 91 1b 2b 	lds	r27, 0x2B1B
     8aa:	80 93 12 29 	sts	0x2912, r24
     8ae:	90 93 13 29 	sts	0x2913, r25
     8b2:	a0 93 14 29 	sts	0x2914, r26
     8b6:	b0 93 15 29 	sts	0x2915, r27
	esp8266_wait_timesnap = rtc_tick;
     8ba:	80 91 18 2b 	lds	r24, 0x2B18
     8be:	90 91 19 2b 	lds	r25, 0x2B19
     8c2:	a0 91 1a 2b 	lds	r26, 0x2B1A
     8c6:	b0 91 1b 2b 	lds	r27, 0x2B1B
     8ca:	80 93 0e 29 	sts	0x290E, r24
     8ce:	90 93 0f 29 	sts	0x290F, r25
     8d2:	a0 93 10 29 	sts	0x2910, r26
     8d6:	b0 93 11 29 	sts	0x2911, r27
	//char strout[200];
	//char *strout_p;
	
	while( (rtc_tick-esp8266_wait_timesnap<rtc_ms_ticks(ms_wait))){
     8da:	cb 01       	movw	r24, r22
     8dc:	77 0f       	add	r23, r23
     8de:	aa 0b       	sbc	r26, r26
     8e0:	bb 0b       	sbc	r27, r27
     8e2:	bc 01       	movw	r22, r24
     8e4:	cd 01       	movw	r24, r26
     8e6:	05 2e       	mov	r0, r21
     8e8:	5f e0       	ldi	r21, 0x0F	; 15
     8ea:	66 0f       	add	r22, r22
     8ec:	77 1f       	adc	r23, r23
     8ee:	88 1f       	adc	r24, r24
     8f0:	99 1f       	adc	r25, r25
     8f2:	5a 95       	dec	r21
     8f4:	d1 f7       	brne	.-12     	; 0x8ea <esp8266_receive+0x56>
     8f6:	50 2d       	mov	r21, r0
     8f8:	20 e0       	ldi	r18, 0x00	; 0
     8fa:	3d e7       	ldi	r19, 0x7D	; 125
     8fc:	40 e0       	ldi	r20, 0x00	; 0
     8fe:	50 e0       	ldi	r21, 0x00	; 0
     900:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__divmodsi4>
     904:	89 01       	movw	r16, r18
     906:	9a 01       	movw	r18, r20
     908:	18 c0       	rjmp	.+48     	; 0x93a <esp8266_receive+0xa6>
		while( (rtc_tick-esp8266_timesnap<rtc_ms_ticks(50)));
     90a:	80 91 18 2b 	lds	r24, 0x2B18
     90e:	90 91 19 2b 	lds	r25, 0x2B19
     912:	a0 91 1a 2b 	lds	r26, 0x2B1A
     916:	b0 91 1b 2b 	lds	r27, 0x2B1B
     91a:	40 91 12 29 	lds	r20, 0x2912
     91e:	50 91 13 29 	lds	r21, 0x2913
     922:	60 91 14 29 	lds	r22, 0x2914
     926:	70 91 15 29 	lds	r23, 0x2915
     92a:	84 1b       	sub	r24, r20
     92c:	95 0b       	sbc	r25, r21
     92e:	a6 0b       	sbc	r26, r22
     930:	b7 0b       	sbc	r27, r23
     932:	c3 97       	sbiw	r24, 0x33	; 51
     934:	a1 05       	cpc	r26, r1
     936:	b1 05       	cpc	r27, r1
     938:	40 f3       	brcs	.-48     	; 0x90a <esp8266_receive+0x76>
	esp8266_timesnap = rtc_tick;
	esp8266_wait_timesnap = rtc_tick;
	//char strout[200];
	//char *strout_p;
	
	while( (rtc_tick-esp8266_wait_timesnap<rtc_ms_ticks(ms_wait))){
     93a:	80 91 18 2b 	lds	r24, 0x2B18
     93e:	90 91 19 2b 	lds	r25, 0x2B19
     942:	a0 91 1a 2b 	lds	r26, 0x2B1A
     946:	b0 91 1b 2b 	lds	r27, 0x2B1B
     94a:	40 91 0e 29 	lds	r20, 0x290E
     94e:	50 91 0f 29 	lds	r21, 0x290F
     952:	60 91 10 29 	lds	r22, 0x2910
     956:	70 91 11 29 	lds	r23, 0x2911
     95a:	84 1b       	sub	r24, r20
     95c:	95 0b       	sbc	r25, r21
     95e:	a6 0b       	sbc	r26, r22
     960:	b7 0b       	sbc	r27, r23
     962:	80 17       	cp	r24, r16
     964:	91 07       	cpc	r25, r17
     966:	a2 07       	cpc	r26, r18
     968:	b3 07       	cpc	r27, r19
     96a:	78 f2       	brcs	.-98     	; 0x90a <esp8266_receive+0x76>
		while( (rtc_tick-esp8266_timesnap<rtc_ms_ticks(50)));
	}
	*esp8266_rxc_buff_p = '\0';
     96c:	e0 91 89 22 	lds	r30, 0x2289
     970:	f0 91 8a 22 	lds	r31, 0x228A
     974:	10 82       	st	Z, r1
	esp8266_rxc_buff_p = esp8266_rxc_buff;
     976:	8c e1       	ldi	r24, 0x1C	; 28
     978:	9b e2       	ldi	r25, 0x2B	; 43
     97a:	80 93 89 22 	sts	0x2289, r24
     97e:	90 93 8a 22 	sts	0x228A, r25

}
     982:	1f 91       	pop	r17
     984:	0f 91       	pop	r16
     986:	08 95       	ret

00000988 <esp8266_wait_receive>:

void esp8266_wait_receive(){
     988:	2f 92       	push	r2
     98a:	3f 92       	push	r3
     98c:	4f 92       	push	r4
     98e:	5f 92       	push	r5
     990:	6f 92       	push	r6
     992:	7f 92       	push	r7
     994:	8f 92       	push	r8
     996:	9f 92       	push	r9
     998:	af 92       	push	r10
     99a:	bf 92       	push	r11
     99c:	cf 92       	push	r12
     99e:	df 92       	push	r13
     9a0:	ef 92       	push	r14
     9a2:	ff 92       	push	r15
     9a4:	0f 93       	push	r16
     9a6:	1f 93       	push	r17
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	cd b7       	in	r28, 0x3d	; 61
     9ae:	de b7       	in	r29, 0x3e	; 62
     9b0:	c2 58       	subi	r28, 0x82	; 130
     9b2:	d1 09       	sbc	r29, r1
     9b4:	cd bf       	out	0x3d, r28	; 61
     9b6:	de bf       	out	0x3e, r29	; 62
	

	
	
	
}
     9b8:	8d b6       	in	r8, 0x3d	; 61
     9ba:	9e b6       	in	r9, 0x3e	; 62
	esp8266_rxc_buff_p = esp8266_rxc_buff;

}

void esp8266_wait_receive(){
	esp8266_timesnap = rtc_tick;
     9bc:	80 91 18 2b 	lds	r24, 0x2B18
     9c0:	90 91 19 2b 	lds	r25, 0x2B19
     9c4:	a0 91 1a 2b 	lds	r26, 0x2B1A
     9c8:	b0 91 1b 2b 	lds	r27, 0x2B1B
     9cc:	80 93 12 29 	sts	0x2912, r24
     9d0:	90 93 13 29 	sts	0x2913, r25
     9d4:	a0 93 14 29 	sts	0x2914, r26
     9d8:	b0 93 15 29 	sts	0x2915, r27
	esp8266_wait_timesnap = rtc_tick;
     9dc:	80 91 18 2b 	lds	r24, 0x2B18
     9e0:	90 91 19 2b 	lds	r25, 0x2B19
     9e4:	a0 91 1a 2b 	lds	r26, 0x2B1A
     9e8:	b0 91 1b 2b 	lds	r27, 0x2B1B
     9ec:	80 93 0e 29 	sts	0x290E, r24
     9f0:	90 93 0f 29 	sts	0x290F, r25
     9f4:	a0 93 10 29 	sts	0x2910, r26
     9f8:	b0 93 11 29 	sts	0x2911, r27

	while( (rtc_tick-esp8266_timesnap<rtc_ms_ticks(50)));
     9fc:	80 91 18 2b 	lds	r24, 0x2B18
     a00:	90 91 19 2b 	lds	r25, 0x2B19
     a04:	a0 91 1a 2b 	lds	r26, 0x2B1A
     a08:	b0 91 1b 2b 	lds	r27, 0x2B1B
     a0c:	40 91 12 29 	lds	r20, 0x2912
     a10:	50 91 13 29 	lds	r21, 0x2913
     a14:	60 91 14 29 	lds	r22, 0x2914
     a18:	70 91 15 29 	lds	r23, 0x2915
     a1c:	84 1b       	sub	r24, r20
     a1e:	95 0b       	sbc	r25, r21
     a20:	a6 0b       	sbc	r26, r22
     a22:	b7 0b       	sbc	r27, r23
     a24:	c3 97       	sbiw	r24, 0x33	; 51
     a26:	a1 05       	cpc	r26, r1
     a28:	b1 05       	cpc	r27, r1
     a2a:	40 f3       	brcs	.-48     	; 0x9fc <esp8266_wait_receive+0x74>
	*esp8266_rxc_buff_p = '\0';
     a2c:	e0 91 89 22 	lds	r30, 0x2289
     a30:	f0 91 8a 22 	lds	r31, 0x228A
     a34:	10 82       	st	Z, r1
	printf("%s",esp8266_rxc_buff);
     a36:	8c e1       	ldi	r24, 0x1C	; 28
     a38:	9b e2       	ldi	r25, 0x2B	; 43
     a3a:	9f 93       	push	r25
     a3c:	8f 93       	push	r24
     a3e:	80 e9       	ldi	r24, 0x90	; 144
     a40:	92 e2       	ldi	r25, 0x22	; 34
     a42:	9f 93       	push	r25
     a44:	8f 93       	push	r24
     a46:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <printf>
	char str[10];
	char id[10];
	char len[10];
	char data_str[100];

	if(esp8266_rxc_buff_p>esp8266_rxc_buff){
     a4a:	0f 90       	pop	r0
     a4c:	0f 90       	pop	r0
     a4e:	0f 90       	pop	r0
     a50:	0f 90       	pop	r0
     a52:	80 91 89 22 	lds	r24, 0x2289
     a56:	90 91 8a 22 	lds	r25, 0x228A
     a5a:	8c 51       	subi	r24, 0x1C	; 28
     a5c:	9b 42       	sbci	r25, 0x2B	; 43
     a5e:	09 f0       	breq	.+2      	; 0xa62 <esp8266_wait_receive+0xda>
     a60:	08 f4       	brcc	.+2      	; 0xa64 <esp8266_wait_receive+0xdc>
     a62:	ca c0       	rjmp	.+404    	; 0xbf8 <esp8266_wait_receive+0x270>
			//sscanf (sentence,"%s %*s %s %*s",str,str2);
			sscanf (esp8266_rxc_buff,"\r\r\n+%9[^,],%9[^,],%9[^:]:%s[^\n]\n",str,id,len,data_str);
     a64:	ce 01       	movw	r24, r28
     a66:	4f 96       	adiw	r24, 0x1f	; 31
     a68:	9f 93       	push	r25
     a6a:	8f 93       	push	r24
     a6c:	0a 97       	sbiw	r24, 0x0a	; 10
     a6e:	9f 93       	push	r25
     a70:	8f 93       	push	r24
     a72:	0a 97       	sbiw	r24, 0x0a	; 10
     a74:	9f 93       	push	r25
     a76:	8f 93       	push	r24
     a78:	8e 01       	movw	r16, r28
     a7a:	0f 5f       	subi	r16, 0xFF	; 255
     a7c:	1f 4f       	sbci	r17, 0xFF	; 255
     a7e:	1f 93       	push	r17
     a80:	0f 93       	push	r16
     a82:	83 e9       	ldi	r24, 0x93	; 147
     a84:	92 e2       	ldi	r25, 0x22	; 34
     a86:	9f 93       	push	r25
     a88:	8f 93       	push	r24
     a8a:	8c e1       	ldi	r24, 0x1C	; 28
     a8c:	9b e2       	ldi	r25, 0x2B	; 43
     a8e:	9f 93       	push	r25
     a90:	8f 93       	push	r24
     a92:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <sscanf>
			printf("%s",str);
     a96:	1f 93       	push	r17
     a98:	0f 93       	push	r16
     a9a:	80 e9       	ldi	r24, 0x90	; 144
     a9c:	92 e2       	ldi	r25, 0x22	; 34
     a9e:	9f 93       	push	r25
     aa0:	8f 93       	push	r24
     aa2:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <printf>
			
			
			if(!strcmp(str,"IPD\0")){
     aa6:	6b e8       	ldi	r22, 0x8B	; 139
     aa8:	72 e2       	ldi	r23, 0x22	; 34
     aaa:	c8 01       	movw	r24, r16
     aac:	0e 94 2d 0c 	call	0x185a	; 0x185a <strcmp>
     ab0:	ed b7       	in	r30, 0x3d	; 61
     ab2:	fe b7       	in	r31, 0x3e	; 62
     ab4:	70 96       	adiw	r30, 0x10	; 16
     ab6:	ed bf       	out	0x3d, r30	; 61
     ab8:	fe bf       	out	0x3e, r31	; 62
     aba:	89 2b       	or	r24, r25
     abc:	09 f0       	breq	.+2      	; 0xac0 <esp8266_wait_receive+0x138>
     abe:	9c c0       	rjmp	.+312    	; 0xbf8 <esp8266_wait_receive+0x270>
     ac0:	2d b6       	in	r2, 0x3d	; 61
     ac2:	3e b6       	in	r3, 0x3e	; 62
				int pre_data_len = 6 + strlen(str) + strlen(id) + strlen(len);
     ac4:	d8 01       	movw	r26, r16
     ac6:	f8 01       	movw	r30, r16
     ac8:	01 90       	ld	r0, Z+
     aca:	00 20       	and	r0, r0
     acc:	e9 f7       	brne	.-6      	; 0xac8 <esp8266_wait_receive+0x140>
     ace:	31 97       	sbiw	r30, 0x01	; 1
     ad0:	9f 01       	movw	r18, r30
     ad2:	20 1b       	sub	r18, r16
     ad4:	31 0b       	sbc	r19, r17
     ad6:	1a 96       	adiw	r26, 0x0a	; 10
     ad8:	fd 01       	movw	r30, r26
     ada:	01 90       	ld	r0, Z+
     adc:	00 20       	and	r0, r0
     ade:	e9 f7       	brne	.-6      	; 0xada <esp8266_wait_receive+0x152>
     ae0:	31 97       	sbiw	r30, 0x01	; 1
     ae2:	ea 1b       	sub	r30, r26
     ae4:	fb 0b       	sbc	r31, r27
     ae6:	ce 01       	movw	r24, r28
     ae8:	45 96       	adiw	r24, 0x15	; 21
     aea:	dc 01       	movw	r26, r24
     aec:	0d 90       	ld	r0, X+
     aee:	00 20       	and	r0, r0
     af0:	e9 f7       	brne	.-6      	; 0xaec <esp8266_wait_receive+0x164>
     af2:	11 97       	sbiw	r26, 0x01	; 1
     af4:	a8 1b       	sub	r26, r24
     af6:	b9 0b       	sbc	r27, r25
     af8:	2e 0f       	add	r18, r30
     afa:	3f 1f       	adc	r19, r31
     afc:	2a 5f       	subi	r18, 0xFA	; 250
     afe:	3f 4f       	sbci	r19, 0xFF	; 255
     b00:	59 01       	movw	r10, r18
     b02:	aa 0e       	add	r10, r26
     b04:	bb 1e       	adc	r11, r27
				int data_len = atoi(len);
     b06:	0e 94 0b 0c 	call	0x1816	; 0x1816 <atoi>
     b0a:	3c 01       	movw	r6, r24
				char data[data_len];
     b0c:	2d b7       	in	r18, 0x3d	; 61
     b0e:	3e b7       	in	r19, 0x3e	; 62
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	2d bf       	out	0x3d, r18	; 61
     b16:	3e bf       	out	0x3e, r19	; 62
     b18:	8d b7       	in	r24, 0x3d	; 61
     b1a:	9e b7       	in	r25, 0x3e	; 62
     b1c:	01 96       	adiw	r24, 0x01	; 1
     b1e:	2c 01       	movw	r4, r24

				printf("THE DISPLACEMENT IS : %d\n", pre_data_len);
     b20:	bf 92       	push	r11
     b22:	af 92       	push	r10
     b24:	84 eb       	ldi	r24, 0xB4	; 180
     b26:	92 e2       	ldi	r25, 0x22	; 34
     b28:	9f 93       	push	r25
     b2a:	8f 93       	push	r24
     b2c:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <printf>

				//data_p = data_str;
				for(int i=0;i<data_len;i++){
     b30:	0f 90       	pop	r0
     b32:	0f 90       	pop	r0
     b34:	0f 90       	pop	r0
     b36:	0f 90       	pop	r0
     b38:	16 14       	cp	r1, r6
     b3a:	17 04       	cpc	r1, r7
     b3c:	24 f5       	brge	.+72     	; 0xb86 <esp8266_wait_receive+0x1fe>
     b3e:	85 01       	movw	r16, r10
     b40:	04 5e       	subi	r16, 0xE4	; 228
     b42:	14 4d       	sbci	r17, 0xD4	; 212
     b44:	62 01       	movw	r12, r4
     b46:	c5 01       	movw	r24, r10
     b48:	86 0d       	add	r24, r6
     b4a:	97 1d       	adc	r25, r7
     b4c:	fc 01       	movw	r30, r24
     b4e:	e4 5e       	subi	r30, 0xE4	; 228
     b50:	f4 4d       	sbci	r31, 0xD4	; 212
     b52:	5f 01       	movw	r10, r30
					data[i] = esp8266_rxc_buff[pre_data_len+i];
					printf(".%c\n",data[i]);
     b54:	0f 2e       	mov	r0, r31
     b56:	fe ec       	ldi	r31, 0xCE	; 206
     b58:	ef 2e       	mov	r14, r31
     b5a:	f2 e2       	ldi	r31, 0x22	; 34
     b5c:	ff 2e       	mov	r15, r31
     b5e:	f0 2d       	mov	r31, r0

				printf("THE DISPLACEMENT IS : %d\n", pre_data_len);

				//data_p = data_str;
				for(int i=0;i<data_len;i++){
					data[i] = esp8266_rxc_buff[pre_data_len+i];
     b60:	f8 01       	movw	r30, r16
     b62:	81 91       	ld	r24, Z+
     b64:	8f 01       	movw	r16, r30
     b66:	f6 01       	movw	r30, r12
     b68:	81 93       	st	Z+, r24
     b6a:	6f 01       	movw	r12, r30
					printf(".%c\n",data[i]);
     b6c:	1f 92       	push	r1
     b6e:	8f 93       	push	r24
     b70:	ff 92       	push	r15
     b72:	ef 92       	push	r14
     b74:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <printf>
				char data[data_len];

				printf("THE DISPLACEMENT IS : %d\n", pre_data_len);

				//data_p = data_str;
				for(int i=0;i<data_len;i++){
     b78:	0f 90       	pop	r0
     b7a:	0f 90       	pop	r0
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	0a 15       	cp	r16, r10
     b82:	1b 05       	cpc	r17, r11
     b84:	69 f7       	brne	.-38     	; 0xb60 <esp8266_wait_receive+0x1d8>
					data[i] = esp8266_rxc_buff[pre_data_len+i];
					printf(".%c\n",data[i]);
				}
				data[data_len] = '\0';
     b86:	f2 01       	movw	r30, r4
     b88:	e6 0d       	add	r30, r6
     b8a:	f7 1d       	adc	r31, r7
     b8c:	10 82       	st	Z, r1

				printf ("\n%s\n%s\n%s\n%s\n",str,id,len,data_str);
     b8e:	ce 01       	movw	r24, r28
     b90:	4f 96       	adiw	r24, 0x1f	; 31
     b92:	9f 93       	push	r25
     b94:	8f 93       	push	r24
     b96:	0a 97       	sbiw	r24, 0x0a	; 10
     b98:	9f 93       	push	r25
     b9a:	8f 93       	push	r24
     b9c:	0a 97       	sbiw	r24, 0x0a	; 10
     b9e:	9f 93       	push	r25
     ba0:	8f 93       	push	r24
     ba2:	0a 97       	sbiw	r24, 0x0a	; 10
     ba4:	9f 93       	push	r25
     ba6:	8f 93       	push	r24
     ba8:	83 ed       	ldi	r24, 0xD3	; 211
     baa:	92 e2       	ldi	r25, 0x22	; 34
     bac:	9f 93       	push	r25
     bae:	8f 93       	push	r24
     bb0:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <printf>
     bb4:	2d b7       	in	r18, 0x3d	; 61
     bb6:	3e b7       	in	r19, 0x3e	; 62
     bb8:	26 5f       	subi	r18, 0xF6	; 246
     bba:	3f 4f       	sbci	r19, 0xFF	; 255
     bbc:	2d bf       	out	0x3d, r18	; 61
     bbe:	3e bf       	out	0x3e, r19	; 62
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
     bc0:	00 e0       	ldi	r16, 0x00	; 0
	{
		ssd1306_set_page_address(page);
     bc2:	80 2f       	mov	r24, r16
     bc4:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <ssd1306_set_page_address>
		ssd1306_set_column_address(0);
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	0e 94 dd 02 	call	0x5ba	; 0x5ba <ssd1306_set_column_address>
     bce:	10 e0       	ldi	r17, 0x00	; 0
		for (col = 0; col < 128; ++col)
		{
			ssd1306_write_data(0x00);
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	0e 94 b6 02 	call	0x56c	; 0x56c <ssd1306_write_data>

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
		for (col = 0; col < 128; ++col)
     bd6:	1f 5f       	subi	r17, 0xFF	; 255
     bd8:	10 38       	cpi	r17, 0x80	; 128
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <esp8266_wait_receive+0x248>
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
     bdc:	0f 5f       	subi	r16, 0xFF	; 255
     bde:	04 30       	cpi	r16, 0x04	; 4
     be0:	81 f7       	brne	.-32     	; 0xbc2 <esp8266_wait_receive+0x23a>
							
				ssd1306_clear();
				ssd1306_set_page_address(0);
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <ssd1306_set_page_address>
				ssd1306_set_column_address(0);
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	0e 94 dd 02 	call	0x5ba	; 0x5ba <ssd1306_set_column_address>
				ssd1306_write_text(data);
     bee:	c2 01       	movw	r24, r4
     bf0:	0e 94 bc 03 	call	0x778	; 0x778 <ssd1306_write_text>
     bf4:	2d be       	out	0x3d, r2	; 61
     bf6:	3e be       	out	0x3e, r3	; 62
			}
	}

	
	
	esp8266_rxc_buff_p = esp8266_rxc_buff;
     bf8:	8c e1       	ldi	r24, 0x1C	; 28
     bfa:	9b e2       	ldi	r25, 0x2B	; 43
     bfc:	80 93 89 22 	sts	0x2289, r24
     c00:	90 93 8a 22 	sts	0x228A, r25
	

	
	
	
}
     c04:	8d be       	out	0x3d, r8	; 61
     c06:	9e be       	out	0x3e, r9	; 62
     c08:	ce 57       	subi	r28, 0x7E	; 126
     c0a:	df 4f       	sbci	r29, 0xFF	; 255
     c0c:	cd bf       	out	0x3d, r28	; 61
     c0e:	de bf       	out	0x3e, r29	; 62
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	1f 91       	pop	r17
     c16:	0f 91       	pop	r16
     c18:	ff 90       	pop	r15
     c1a:	ef 90       	pop	r14
     c1c:	df 90       	pop	r13
     c1e:	cf 90       	pop	r12
     c20:	bf 90       	pop	r11
     c22:	af 90       	pop	r10
     c24:	9f 90       	pop	r9
     c26:	8f 90       	pop	r8
     c28:	7f 90       	pop	r7
     c2a:	6f 90       	pop	r6
     c2c:	5f 90       	pop	r5
     c2e:	4f 90       	pop	r4
     c30:	3f 90       	pop	r3
     c32:	2f 90       	pop	r2
     c34:	08 95       	ret

00000c36 <esp8266_wifi_mode>:
	

}


int esp8266_wifi_mode(esp8266_wifi_mode_t mode){
     c36:	0f 93       	push	r16
     c38:	1f 93       	push	r17
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
     c3e:	cd b7       	in	r28, 0x3d	; 61
     c40:	de b7       	in	r29, 0x3e	; 62
     c42:	66 97       	sbiw	r28, 0x16	; 22
     c44:	cd bf       	out	0x3d, r28	; 61
     c46:	de bf       	out	0x3e, r29	; 62
     c48:	18 2f       	mov	r17, r24
	printf("setting wifi mode (CWMODE)\n");
     c4a:	8e eb       	ldi	r24, 0xBE	; 190
     c4c:	93 e2       	ldi	r25, 0x23	; 35
     c4e:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <puts>
	fprintf(&esp8266_stream,"AT+CWMODE=%d\n\r",mode);
     c52:	1f 92       	push	r1
     c54:	1f 93       	push	r17
     c56:	89 ed       	ldi	r24, 0xD9	; 217
     c58:	93 e2       	ldi	r25, 0x23	; 35
     c5a:	9f 93       	push	r25
     c5c:	8f 93       	push	r24
     c5e:	8c ea       	ldi	r24, 0xAC	; 172
     c60:	9c e2       	ldi	r25, 0x2C	; 44
     c62:	9f 93       	push	r25
     c64:	8f 93       	push	r24
     c66:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <fprintf>
	esp8266_receive(2000);
     c6a:	80 ed       	ldi	r24, 0xD0	; 208
     c6c:	97 e0       	ldi	r25, 0x07	; 7
     c6e:	0e 94 4a 04 	call	0x894	; 0x894 <esp8266_receive>

	int myargc;
	char *cmd_args[10];
	tokenize(esp8266_rxc_buff,&myargc," =-,\n\r\"", 10, cmd_args);
     c72:	8e 01       	movw	r16, r28
     c74:	0d 5f       	subi	r16, 0xFD	; 253
     c76:	1f 4f       	sbci	r17, 0xFF	; 255
     c78:	2a e0       	ldi	r18, 0x0A	; 10
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	48 ee       	ldi	r20, 0xE8	; 232
     c7e:	53 e2       	ldi	r21, 0x23	; 35
     c80:	be 01       	movw	r22, r28
     c82:	6f 5f       	subi	r22, 0xFF	; 255
     c84:	7f 4f       	sbci	r23, 0xFF	; 255
     c86:	8c e1       	ldi	r24, 0x1C	; 28
     c88:	9b e2       	ldi	r25, 0x2B	; 43
     c8a:	0e 94 2f 01 	call	0x25e	; 0x25e <tokenize>

	if(!strcmp("OK",cmd_args[2])){
     c8e:	6f 81       	ldd	r22, Y+7	; 0x07
     c90:	78 85       	ldd	r23, Y+8	; 0x08
     c92:	8c ef       	ldi	r24, 0xFC	; 252
     c94:	92 e2       	ldi	r25, 0x22	; 34
     c96:	0e 94 2d 0c 	call	0x185a	; 0x185a <strcmp>
     c9a:	0f 90       	pop	r0
     c9c:	0f 90       	pop	r0
     c9e:	0f 90       	pop	r0
     ca0:	0f 90       	pop	r0
     ca2:	0f 90       	pop	r0
     ca4:	0f 90       	pop	r0
     ca6:	89 2b       	or	r24, r25
     ca8:	39 f4       	brne	.+14     	; 0xcb8 <esp8266_wifi_mode+0x82>
		printf("WIFI MODE CONFIGURED\n");
     caa:	80 ef       	ldi	r24, 0xF0	; 240
     cac:	93 e2       	ldi	r25, 0x23	; 35
     cae:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <puts>
		return 1;
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	06 c0       	rjmp	.+12     	; 0xcc4 <esp8266_wifi_mode+0x8e>
	}
	else {
		printf("FAILED\n");
     cb8:	85 e0       	ldi	r24, 0x05	; 5
     cba:	94 e2       	ldi	r25, 0x24	; 36
     cbc:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <puts>
		return -1;
     cc0:	8f ef       	ldi	r24, 0xFF	; 255
     cc2:	9f ef       	ldi	r25, 0xFF	; 255
	}
}
     cc4:	66 96       	adiw	r28, 0x16	; 22
     cc6:	cd bf       	out	0x3d, r28	; 61
     cc8:	de bf       	out	0x3e, r29	; 62
     cca:	df 91       	pop	r29
     ccc:	cf 91       	pop	r28
     cce:	1f 91       	pop	r17
     cd0:	0f 91       	pop	r16
     cd2:	08 95       	ret

00000cd4 <esp8266_check_wifi_mode>:

esp8266_wifi_mode_t esp8266_check_wifi_mode(){
     cd4:	0f 93       	push	r16
     cd6:	1f 93       	push	r17
     cd8:	cf 93       	push	r28
     cda:	df 93       	push	r29
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	66 97       	sbiw	r28, 0x16	; 22
     ce2:	cd bf       	out	0x3d, r28	; 61
     ce4:	de bf       	out	0x3e, r29	; 62
	printf("checking wifi mode (CWMODE)\n");
     ce6:	8c e0       	ldi	r24, 0x0C	; 12
     ce8:	94 e2       	ldi	r25, 0x24	; 36
     cea:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <puts>
	fprintf(&esp8266_stream,"AT+CWMODE?\n\r");
     cee:	2c ea       	ldi	r18, 0xAC	; 172
     cf0:	3c e2       	ldi	r19, 0x2C	; 44
     cf2:	4c e0       	ldi	r20, 0x0C	; 12
     cf4:	50 e0       	ldi	r21, 0x00	; 0
     cf6:	61 e0       	ldi	r22, 0x01	; 1
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	88 e2       	ldi	r24, 0x28	; 40
     cfc:	94 e2       	ldi	r25, 0x24	; 36
     cfe:	0e 94 b4 0c 	call	0x1968	; 0x1968 <fwrite>
	esp8266_receive(2000);
     d02:	80 ed       	ldi	r24, 0xD0	; 208
     d04:	97 e0       	ldi	r25, 0x07	; 7
     d06:	0e 94 4a 04 	call	0x894	; 0x894 <esp8266_receive>

	int myargc;
	char *cmd_args[10];
	tokenize(esp8266_rxc_buff,&myargc,":\n\r", 10, cmd_args);
     d0a:	8e 01       	movw	r16, r28
     d0c:	0d 5f       	subi	r16, 0xFD	; 253
     d0e:	1f 4f       	sbci	r17, 0xFF	; 255
     d10:	2a e0       	ldi	r18, 0x0A	; 10
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	45 e3       	ldi	r20, 0x35	; 53
     d16:	54 e2       	ldi	r21, 0x24	; 36
     d18:	be 01       	movw	r22, r28
     d1a:	6f 5f       	subi	r22, 0xFF	; 255
     d1c:	7f 4f       	sbci	r23, 0xFF	; 255
     d1e:	8c e1       	ldi	r24, 0x1C	; 28
     d20:	9b e2       	ldi	r25, 0x2B	; 43
     d22:	0e 94 2f 01 	call	0x25e	; 0x25e <tokenize>
	
	if(!strcmp("OK",cmd_args[3])){
     d26:	69 85       	ldd	r22, Y+9	; 0x09
     d28:	7a 85       	ldd	r23, Y+10	; 0x0a
     d2a:	8c ef       	ldi	r24, 0xFC	; 252
     d2c:	92 e2       	ldi	r25, 0x22	; 34
     d2e:	0e 94 2d 0c 	call	0x185a	; 0x185a <strcmp>
     d32:	89 2b       	or	r24, r25
     d34:	99 f4       	brne	.+38     	; 0xd5c <esp8266_check_wifi_mode+0x88>
		printf("WIFI MODE = %s\n", cmd_args[2]);
     d36:	88 85       	ldd	r24, Y+8	; 0x08
     d38:	8f 93       	push	r24
     d3a:	8f 81       	ldd	r24, Y+7	; 0x07
     d3c:	8f 93       	push	r24
     d3e:	89 e3       	ldi	r24, 0x39	; 57
     d40:	94 e2       	ldi	r25, 0x24	; 36
     d42:	9f 93       	push	r25
     d44:	8f 93       	push	r24
     d46:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <printf>
		return (esp8266_wifi_mode_t) atoi(cmd_args[2]);
     d4a:	8f 81       	ldd	r24, Y+7	; 0x07
     d4c:	98 85       	ldd	r25, Y+8	; 0x08
     d4e:	0e 94 0b 0c 	call	0x1816	; 0x1816 <atoi>
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	05 c0       	rjmp	.+10     	; 0xd66 <esp8266_check_wifi_mode+0x92>
	}
	else {
		printf("ERROR\n");
     d5c:	8f e7       	ldi	r24, 0x7F	; 127
     d5e:	93 e2       	ldi	r25, 0x23	; 35
     d60:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <puts>
		return -1;
     d64:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
     d66:	66 96       	adiw	r28, 0x16	; 22
     d68:	cd bf       	out	0x3d, r28	; 61
     d6a:	de bf       	out	0x3e, r29	; 62
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	1f 91       	pop	r17
     d72:	0f 91       	pop	r16
     d74:	08 95       	ret

00000d76 <esp8266_list_access_points>:


int esp8266_list_access_points(ESP8266_available_AP_t *ap_data){
     d76:	6f 92       	push	r6
     d78:	7f 92       	push	r7
     d7a:	8f 92       	push	r8
     d7c:	9f 92       	push	r9
     d7e:	af 92       	push	r10
     d80:	bf 92       	push	r11
     d82:	cf 92       	push	r12
     d84:	df 92       	push	r13
     d86:	ef 92       	push	r14
     d88:	ff 92       	push	r15
     d8a:	0f 93       	push	r16
     d8c:	1f 93       	push	r17
     d8e:	cf 93       	push	r28
     d90:	df 93       	push	r29
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
     d96:	ac 97       	sbiw	r28, 0x2c	; 44
     d98:	cd bf       	out	0x3d, r28	; 61
     d9a:	de bf       	out	0x3e, r29	; 62
     d9c:	68 2e       	mov	r6, r24
     d9e:	79 2e       	mov	r7, r25
	printf("Listing Available AP\n");
     da0:	89 e4       	ldi	r24, 0x49	; 73
     da2:	94 e2       	ldi	r25, 0x24	; 36
     da4:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <puts>
	fprintf(&esp8266_stream,"AT+CWLAP\n\r");
     da8:	2c ea       	ldi	r18, 0xAC	; 172
     daa:	3c e2       	ldi	r19, 0x2C	; 44
     dac:	4a e0       	ldi	r20, 0x0A	; 10
     dae:	50 e0       	ldi	r21, 0x00	; 0
     db0:	61 e0       	ldi	r22, 0x01	; 1
     db2:	70 e0       	ldi	r23, 0x00	; 0
     db4:	8e e5       	ldi	r24, 0x5E	; 94
     db6:	94 e2       	ldi	r25, 0x24	; 36
     db8:	0e 94 b4 0c 	call	0x1968	; 0x1968 <fwrite>
	esp8266_receive(8000);
     dbc:	80 e4       	ldi	r24, 0x40	; 64
     dbe:	9f e1       	ldi	r25, 0x1F	; 31
     dc0:	0e 94 4a 04 	call	0x894	; 0x894 <esp8266_receive>
	//printf("%s",esp8266_rxc_buff);
	

	int myargc;
	char *cmd_args[10];
	tokenize(esp8266_rxc_buff,&myargc," +\n\r", 10, cmd_args);
     dc4:	8e 01       	movw	r16, r28
     dc6:	0d 5f       	subi	r16, 0xFD	; 253
     dc8:	1f 4f       	sbci	r17, 0xFF	; 255
     dca:	2a e0       	ldi	r18, 0x0A	; 10
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	49 e6       	ldi	r20, 0x69	; 105
     dd0:	54 e2       	ldi	r21, 0x24	; 36
     dd2:	be 01       	movw	r22, r28
     dd4:	6f 5f       	subi	r22, 0xFF	; 255
     dd6:	7f 4f       	sbci	r23, 0xFF	; 255
     dd8:	8c e1       	ldi	r24, 0x1C	; 28
     dda:	9b e2       	ldi	r25, 0x2B	; 43
     ddc:	0e 94 2f 01 	call	0x25e	; 0x25e <tokenize>
	
	//TEST////////////////////////////////////////////////////////////////////////////////////////
	int OK_count = 0;
	for(int i=0;i<myargc;i++){
     de0:	89 80       	ldd	r8, Y+1	; 0x01
     de2:	9a 80       	ldd	r9, Y+2	; 0x02
     de4:	18 14       	cp	r1, r8
     de6:	19 04       	cpc	r1, r9
     de8:	0c f0       	brlt	.+2      	; 0xdec <esp8266_list_access_points+0x76>
     dea:	59 c0       	rjmp	.+178    	; 0xe9e <esp8266_list_access_points+0x128>
     dec:	68 01       	movw	r12, r16
     dee:	e1 2c       	mov	r14, r1
     df0:	f1 2c       	mov	r15, r1
     df2:	a1 2c       	mov	r10, r1
     df4:	b1 2c       	mov	r11, r1
		//printf("the token : %d is -> %s\n",i,cmd_args[i]);
		if(!strcmp(cmd_args[i],"OK")){
     df6:	6c ef       	ldi	r22, 0xFC	; 252
     df8:	72 e2       	ldi	r23, 0x22	; 34
     dfa:	f6 01       	movw	r30, r12
     dfc:	81 91       	ld	r24, Z+
     dfe:	91 91       	ld	r25, Z+
     e00:	6f 01       	movw	r12, r30
     e02:	0e 94 2d 0c 	call	0x185a	; 0x185a <strcmp>
     e06:	89 2b       	or	r24, r25
     e08:	09 f4       	brne	.+2      	; 0xe0c <esp8266_list_access_points+0x96>
     e0a:	57 01       	movw	r10, r14
	char *cmd_args[10];
	tokenize(esp8266_rxc_buff,&myargc," +\n\r", 10, cmd_args);
	
	//TEST////////////////////////////////////////////////////////////////////////////////////////
	int OK_count = 0;
	for(int i=0;i<myargc;i++){
     e0c:	ff ef       	ldi	r31, 0xFF	; 255
     e0e:	ef 1a       	sub	r14, r31
     e10:	ff 0a       	sbc	r15, r31
     e12:	e8 14       	cp	r14, r8
     e14:	f9 04       	cpc	r15, r9
     e16:	79 f7       	brne	.-34     	; 0xdf6 <esp8266_list_access_points+0x80>
			OK_count = i;
		}
	}
	
	int i=0;
	for(i=0+2;i<OK_count;i++){
     e18:	83 e0       	ldi	r24, 0x03	; 3
     e1a:	a8 16       	cp	r10, r24
     e1c:	b1 04       	cpc	r11, r1
     e1e:	0c f4       	brge	.+2      	; 0xe22 <esp8266_list_access_points+0xac>
     e20:	43 c0       	rjmp	.+134    	; 0xea8 <esp8266_list_access_points+0x132>
     e22:	6e 01       	movw	r12, r28
     e24:	97 e0       	ldi	r25, 0x07	; 7
     e26:	c9 0e       	add	r12, r25
     e28:	d1 1c       	adc	r13, r1
     e2a:	e6 2c       	mov	r14, r6
     e2c:	f7 2c       	mov	r15, r7
     e2e:	45 01       	movw	r8, r10
     e30:	88 0c       	add	r8, r8
     e32:	99 1c       	adc	r9, r9
     e34:	e3 e0       	ldi	r30, 0x03	; 3
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	ec 0f       	add	r30, r28
     e3a:	fd 1f       	adc	r31, r29
     e3c:	8e 0e       	add	r8, r30
     e3e:	9f 1e       	adc	r9, r31
		int myargc2;
		char *cmd_args2[10];
		tokenize(cmd_args[i],&myargc2,"(),\"",10,cmd_args2);
     e40:	8e 01       	movw	r16, r28
     e42:	09 5e       	subi	r16, 0xE9	; 233
     e44:	1f 4f       	sbci	r17, 0xFF	; 255
     e46:	2a e0       	ldi	r18, 0x0A	; 10
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	4e e6       	ldi	r20, 0x6E	; 110
     e4c:	54 e2       	ldi	r21, 0x24	; 36
     e4e:	be 01       	movw	r22, r28
     e50:	65 5d       	subi	r22, 0xD5	; 213
     e52:	7f 4f       	sbci	r23, 0xFF	; 255
     e54:	f6 01       	movw	r30, r12
     e56:	81 91       	ld	r24, Z+
     e58:	91 91       	ld	r25, Z+
     e5a:	6f 01       	movw	r12, r30
     e5c:	0e 94 2f 01 	call	0x25e	; 0x25e <tokenize>

		ap_data[i-2].ecn = atoi(cmd_args2[1]);
     e60:	89 8d       	ldd	r24, Y+25	; 0x19
     e62:	9a 8d       	ldd	r25, Y+26	; 0x1a
     e64:	0e 94 0b 0c 	call	0x1816	; 0x1816 <atoi>
     e68:	f7 01       	movw	r30, r14
     e6a:	81 93       	st	Z+, r24
		strcpy(ap_data[i-2].ssid,cmd_args2[2]);
     e6c:	6b 8d       	ldd	r22, Y+27	; 0x1b
     e6e:	7c 8d       	ldd	r23, Y+28	; 0x1c
     e70:	cf 01       	movw	r24, r30
     e72:	0e 94 36 0c 	call	0x186c	; 0x186c <strcpy>
		ap_data[i-2].sig_strength = atoi(cmd_args2[3]);
     e76:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e78:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e7a:	0e 94 0b 0c 	call	0x1816	; 0x1816 <atoi>
     e7e:	f7 01       	movw	r30, r14
     e80:	81 a3       	std	Z+33, r24	; 0x21
     e82:	92 a3       	std	Z+34, r25	; 0x22
		strcpy(ap_data[i-2].mac,cmd_args2[4]);
     e84:	6f 8d       	ldd	r22, Y+31	; 0x1f
     e86:	78 a1       	ldd	r23, Y+32	; 0x20
     e88:	c7 01       	movw	r24, r14
     e8a:	83 96       	adiw	r24, 0x23	; 35
     e8c:	0e 94 36 0c 	call	0x186c	; 0x186c <strcpy>
     e90:	f7 e3       	ldi	r31, 0x37	; 55
     e92:	ef 0e       	add	r14, r31
     e94:	f1 1c       	adc	r15, r1
			OK_count = i;
		}
	}
	
	int i=0;
	for(i=0+2;i<OK_count;i++){
     e96:	c8 14       	cp	r12, r8
     e98:	d9 04       	cpc	r13, r9
     e9a:	91 f6       	brne	.-92     	; 0xe40 <esp8266_list_access_points+0xca>
     e9c:	09 c0       	rjmp	.+18     	; 0xeb0 <esp8266_list_access_points+0x13a>
	char *cmd_args[10];
	tokenize(esp8266_rxc_buff,&myargc," +\n\r", 10, cmd_args);
	
	//TEST////////////////////////////////////////////////////////////////////////////////////////
	int OK_count = 0;
	for(int i=0;i<myargc;i++){
     e9e:	68 94       	set
     ea0:	aa 24       	eor	r10, r10
     ea2:	a1 f8       	bld	r10, 1
     ea4:	b1 2c       	mov	r11, r1
     ea6:	04 c0       	rjmp	.+8      	; 0xeb0 <esp8266_list_access_points+0x13a>
			OK_count = i;
		}
	}
	
	int i=0;
	for(i=0+2;i<OK_count;i++){
     ea8:	68 94       	set
     eaa:	aa 24       	eor	r10, r10
     eac:	a1 f8       	bld	r10, 1
     eae:	b1 2c       	mov	r11, r1
	}
		
	//ap_data=available_AP;
	return i-2;

}
     eb0:	c5 01       	movw	r24, r10
     eb2:	02 97       	sbiw	r24, 0x02	; 2
     eb4:	ac 96       	adiw	r28, 0x2c	; 44
     eb6:	cd bf       	out	0x3d, r28	; 61
     eb8:	de bf       	out	0x3e, r29	; 62
     eba:	df 91       	pop	r29
     ebc:	cf 91       	pop	r28
     ebe:	1f 91       	pop	r17
     ec0:	0f 91       	pop	r16
     ec2:	ff 90       	pop	r15
     ec4:	ef 90       	pop	r14
     ec6:	df 90       	pop	r13
     ec8:	cf 90       	pop	r12
     eca:	bf 90       	pop	r11
     ecc:	af 90       	pop	r10
     ece:	9f 90       	pop	r9
     ed0:	8f 90       	pop	r8
     ed2:	7f 90       	pop	r7
     ed4:	6f 90       	pop	r6
     ed6:	08 95       	ret

00000ed8 <esp8266_connect_access_points>:


int esp8266_connect_access_points(char *SSID, char *password){
     ed8:	ef 92       	push	r14
     eda:	ff 92       	push	r15
     edc:	0f 93       	push	r16
     ede:	1f 93       	push	r17
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     ee8:	66 97       	sbiw	r28, 0x16	; 22
     eea:	cd bf       	out	0x3d, r28	; 61
     eec:	de bf       	out	0x3e, r29	; 62
     eee:	18 2f       	mov	r17, r24
     ef0:	09 2f       	mov	r16, r25
     ef2:	f6 2e       	mov	r15, r22
     ef4:	e7 2e       	mov	r14, r23
	printf("Joining Available AP\n");
     ef6:	83 e7       	ldi	r24, 0x73	; 115
     ef8:	94 e2       	ldi	r25, 0x24	; 36
     efa:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <puts>
	fprintf(&esp8266_stream,"AT+CWJAP=\"%s\",\"%s\"\n\r",SSID,password);
     efe:	ef 92       	push	r14
     f00:	ff 92       	push	r15
     f02:	0f 93       	push	r16
     f04:	1f 93       	push	r17
     f06:	88 e8       	ldi	r24, 0x88	; 136
     f08:	94 e2       	ldi	r25, 0x24	; 36
     f0a:	9f 93       	push	r25
     f0c:	8f 93       	push	r24
     f0e:	8c ea       	ldi	r24, 0xAC	; 172
     f10:	9c e2       	ldi	r25, 0x2C	; 44
     f12:	9f 93       	push	r25
     f14:	8f 93       	push	r24
     f16:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <fprintf>
	esp8266_receive(10000);
     f1a:	80 e1       	ldi	r24, 0x10	; 16
     f1c:	97 e2       	ldi	r25, 0x27	; 39
     f1e:	0e 94 4a 04 	call	0x894	; 0x894 <esp8266_receive>
	//printf("%s",esp8266_rxc_buff);
	
	int myargc;
	char *cmd_args[10];
	tokenize(esp8266_rxc_buff,&myargc," =-,\n\r", 10, cmd_args);
     f22:	8e 01       	movw	r16, r28
     f24:	0d 5f       	subi	r16, 0xFD	; 253
     f26:	1f 4f       	sbci	r17, 0xFF	; 255
     f28:	2a e0       	ldi	r18, 0x0A	; 10
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	4d e9       	ldi	r20, 0x9D	; 157
     f2e:	54 e2       	ldi	r21, 0x24	; 36
     f30:	be 01       	movw	r22, r28
     f32:	6f 5f       	subi	r22, 0xFF	; 255
     f34:	7f 4f       	sbci	r23, 0xFF	; 255
     f36:	8c e1       	ldi	r24, 0x1C	; 28
     f38:	9b e2       	ldi	r25, 0x2B	; 43
     f3a:	0e 94 2f 01 	call	0x25e	; 0x25e <tokenize>
		
// 	for(int i=0;i<myargc;i++){
// 	printf("the token : %d is -> %s\n",i,cmd_args[i]);
// 	}
	
	if(!strcmp("OK",cmd_args[3])){
     f3e:	69 85       	ldd	r22, Y+9	; 0x09
     f40:	7a 85       	ldd	r23, Y+10	; 0x0a
     f42:	8c ef       	ldi	r24, 0xFC	; 252
     f44:	92 e2       	ldi	r25, 0x22	; 34
     f46:	0e 94 2d 0c 	call	0x185a	; 0x185a <strcmp>
     f4a:	cd bf       	out	0x3d, r28	; 61
     f4c:	de bf       	out	0x3e, r29	; 62
     f4e:	89 2b       	or	r24, r25
     f50:	89 f4       	brne	.+34     	; 0xf74 <esp8266_connect_access_points+0x9c>
		printf("successfully connected to %s\n",cmd_args[1]);
     f52:	8e 81       	ldd	r24, Y+6	; 0x06
     f54:	8f 93       	push	r24
     f56:	8d 81       	ldd	r24, Y+5	; 0x05
     f58:	8f 93       	push	r24
     f5a:	84 ea       	ldi	r24, 0xA4	; 164
     f5c:	94 e2       	ldi	r25, 0x24	; 36
     f5e:	9f 93       	push	r25
     f60:	8f 93       	push	r24
     f62:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <printf>
		return 1;
     f66:	0f 90       	pop	r0
     f68:	0f 90       	pop	r0
     f6a:	0f 90       	pop	r0
     f6c:	0f 90       	pop	r0
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	06 c0       	rjmp	.+12     	; 0xf80 <esp8266_connect_access_points+0xa8>
	}
	else {
		printf("connection failed\n");
     f74:	82 ec       	ldi	r24, 0xC2	; 194
     f76:	94 e2       	ldi	r25, 0x24	; 36
     f78:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <puts>
		return -1;
     f7c:	8f ef       	ldi	r24, 0xFF	; 255
     f7e:	9f ef       	ldi	r25, 0xFF	; 255
	}
	
	
	
	
}
     f80:	66 96       	adiw	r28, 0x16	; 22
     f82:	cd bf       	out	0x3d, r28	; 61
     f84:	de bf       	out	0x3e, r29	; 62
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	1f 91       	pop	r17
     f8c:	0f 91       	pop	r16
     f8e:	ff 90       	pop	r15
     f90:	ef 90       	pop	r14
     f92:	08 95       	ret

00000f94 <esp8266_check_connected_access_points>:

int esp8266_check_connected_access_points(char *ssid){
     f94:	ef 92       	push	r14
     f96:	ff 92       	push	r15
     f98:	0f 93       	push	r16
     f9a:	1f 93       	push	r17
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
     fa4:	66 97       	sbiw	r28, 0x16	; 22
     fa6:	cd bf       	out	0x3d, r28	; 61
     fa8:	de bf       	out	0x3e, r29	; 62
     faa:	7c 01       	movw	r14, r24
	printf("checking connected AP\n");
     fac:	84 ed       	ldi	r24, 0xD4	; 212
     fae:	94 e2       	ldi	r25, 0x24	; 36
     fb0:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <puts>
	fprintf(&esp8266_stream,"AT+CWJAP?\n\r");
     fb4:	2c ea       	ldi	r18, 0xAC	; 172
     fb6:	3c e2       	ldi	r19, 0x2C	; 44
     fb8:	4b e0       	ldi	r20, 0x0B	; 11
     fba:	50 e0       	ldi	r21, 0x00	; 0
     fbc:	61 e0       	ldi	r22, 0x01	; 1
     fbe:	70 e0       	ldi	r23, 0x00	; 0
     fc0:	8a ee       	ldi	r24, 0xEA	; 234
     fc2:	94 e2       	ldi	r25, 0x24	; 36
     fc4:	0e 94 b4 0c 	call	0x1968	; 0x1968 <fwrite>
	esp8266_receive(2000);
     fc8:	80 ed       	ldi	r24, 0xD0	; 208
     fca:	97 e0       	ldi	r25, 0x07	; 7
     fcc:	0e 94 4a 04 	call	0x894	; 0x894 <esp8266_receive>
	//printf("%s",esp8266_rxc_buff);
	
	int myargc;
	char *cmd_args[10];
	tokenize(esp8266_rxc_buff,&myargc,"\n\r\"", 10, cmd_args);
     fd0:	8e 01       	movw	r16, r28
     fd2:	0d 5f       	subi	r16, 0xFD	; 253
     fd4:	1f 4f       	sbci	r17, 0xFF	; 255
     fd6:	2a e0       	ldi	r18, 0x0A	; 10
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	4c ee       	ldi	r20, 0xEC	; 236
     fdc:	53 e2       	ldi	r21, 0x23	; 35
     fde:	be 01       	movw	r22, r28
     fe0:	6f 5f       	subi	r22, 0xFF	; 255
     fe2:	7f 4f       	sbci	r23, 0xFF	; 255
     fe4:	8c e1       	ldi	r24, 0x1C	; 28
     fe6:	9b e2       	ldi	r25, 0x2B	; 43
     fe8:	0e 94 2f 01 	call	0x25e	; 0x25e <tokenize>
		
// 	for(int i=0;i<myargc;i++){
// 	printf("the token : %d is -> %s\n",i,cmd_args[i]);
// 	}
	
	if(!strcmp("OK",cmd_args[3])){
     fec:	69 85       	ldd	r22, Y+9	; 0x09
     fee:	7a 85       	ldd	r23, Y+10	; 0x0a
     ff0:	8c ef       	ldi	r24, 0xFC	; 252
     ff2:	92 e2       	ldi	r25, 0x22	; 34
     ff4:	0e 94 2d 0c 	call	0x185a	; 0x185a <strcmp>
     ff8:	89 2b       	or	r24, r25
     ffa:	41 f4       	brne	.+16     	; 0x100c <esp8266_check_connected_access_points+0x78>
		strcpy(ssid,cmd_args[2]);
     ffc:	6f 81       	ldd	r22, Y+7	; 0x07
     ffe:	78 85       	ldd	r23, Y+8	; 0x08
    1000:	c7 01       	movw	r24, r14
    1002:	0e 94 36 0c 	call	0x186c	; 0x186c <strcpy>
		return 1;
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	06 c0       	rjmp	.+12     	; 0x1018 <esp8266_check_connected_access_points+0x84>
	}
	else {
		printf("ERROR\n");
    100c:	8f e7       	ldi	r24, 0x7F	; 127
    100e:	93 e2       	ldi	r25, 0x23	; 35
    1010:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <puts>
		return -1;
    1014:	8f ef       	ldi	r24, 0xFF	; 255
    1016:	9f ef       	ldi	r25, 0xFF	; 255
	}
	
	
	
}
    1018:	66 96       	adiw	r28, 0x16	; 22
    101a:	cd bf       	out	0x3d, r28	; 61
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	1f 91       	pop	r17
    1024:	0f 91       	pop	r16
    1026:	ff 90       	pop	r15
    1028:	ef 90       	pop	r14
    102a:	08 95       	ret

0000102c <esp8266_get_IP>:





void esp8266_get_IP(char *IPaddr){
    102c:	ef 92       	push	r14
    102e:	ff 92       	push	r15
    1030:	0f 93       	push	r16
    1032:	1f 93       	push	r17
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	66 97       	sbiw	r28, 0x16	; 22
    103e:	cd bf       	out	0x3d, r28	; 61
    1040:	de bf       	out	0x3e, r29	; 62
    1042:	7c 01       	movw	r14, r24
	printf("Getting IP Address\n");
    1044:	86 e2       	ldi	r24, 0x26	; 38
    1046:	95 e2       	ldi	r25, 0x25	; 37
    1048:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <puts>
	fprintf(&esp8266_stream,"AT+CIFSR\n\r");
    104c:	2c ea       	ldi	r18, 0xAC	; 172
    104e:	3c e2       	ldi	r19, 0x2C	; 44
    1050:	4a e0       	ldi	r20, 0x0A	; 10
    1052:	50 e0       	ldi	r21, 0x00	; 0
    1054:	61 e0       	ldi	r22, 0x01	; 1
    1056:	70 e0       	ldi	r23, 0x00	; 0
    1058:	89 e3       	ldi	r24, 0x39	; 57
    105a:	95 e2       	ldi	r25, 0x25	; 37
    105c:	0e 94 b4 0c 	call	0x1968	; 0x1968 <fwrite>
	esp8266_receive(2000);
    1060:	80 ed       	ldi	r24, 0xD0	; 208
    1062:	97 e0       	ldi	r25, 0x07	; 7
    1064:	0e 94 4a 04 	call	0x894	; 0x894 <esp8266_receive>
	//printf("%s",esp8266_rxc_buff);
	
	int myargc;
	char *cmd_args[10];
	tokenize(esp8266_rxc_buff,&myargc," =-,\n\r\"", 10, cmd_args);
    1068:	8e 01       	movw	r16, r28
    106a:	0d 5f       	subi	r16, 0xFD	; 253
    106c:	1f 4f       	sbci	r17, 0xFF	; 255
    106e:	2a e0       	ldi	r18, 0x0A	; 10
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	48 ee       	ldi	r20, 0xE8	; 232
    1074:	53 e2       	ldi	r21, 0x23	; 35
    1076:	be 01       	movw	r22, r28
    1078:	6f 5f       	subi	r22, 0xFF	; 255
    107a:	7f 4f       	sbci	r23, 0xFF	; 255
    107c:	8c e1       	ldi	r24, 0x1C	; 28
    107e:	9b e2       	ldi	r25, 0x2B	; 43
    1080:	0e 94 2f 01 	call	0x25e	; 0x25e <tokenize>
	// 	for(int i=0;i<myargc;i++){
	// 		printf("the token : %d is -> %s\n",i,cmd_args[i]);
	// 	}
	
	//printf("the IP address is : %s\n", cmd_args[2]);
	strcpy(IPaddr,cmd_args[2]);
    1084:	6f 81       	ldd	r22, Y+7	; 0x07
    1086:	78 85       	ldd	r23, Y+8	; 0x08
    1088:	c7 01       	movw	r24, r14
    108a:	0e 94 36 0c 	call	0x186c	; 0x186c <strcpy>
	
}
    108e:	66 96       	adiw	r28, 0x16	; 22
    1090:	cd bf       	out	0x3d, r28	; 61
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	df 91       	pop	r29
    1096:	cf 91       	pop	r28
    1098:	1f 91       	pop	r17
    109a:	0f 91       	pop	r16
    109c:	ff 90       	pop	r15
    109e:	ef 90       	pop	r14
    10a0:	08 95       	ret

000010a2 <esp8266_get_MAC>:



void esp8266_get_MAC(char *MAC){
    10a2:	ef 92       	push	r14
    10a4:	ff 92       	push	r15
    10a6:	0f 93       	push	r16
    10a8:	1f 93       	push	r17
    10aa:	cf 93       	push	r28
    10ac:	df 93       	push	r29
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
    10b2:	66 97       	sbiw	r28, 0x16	; 22
    10b4:	cd bf       	out	0x3d, r28	; 61
    10b6:	de bf       	out	0x3e, r29	; 62
    10b8:	7c 01       	movw	r14, r24
	printf("Getting MAC Address\n");
    10ba:	84 e4       	ldi	r24, 0x44	; 68
    10bc:	95 e2       	ldi	r25, 0x25	; 37
    10be:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <puts>
	fprintf(&esp8266_stream,"AT+CIFSR\n\r");
    10c2:	2c ea       	ldi	r18, 0xAC	; 172
    10c4:	3c e2       	ldi	r19, 0x2C	; 44
    10c6:	4a e0       	ldi	r20, 0x0A	; 10
    10c8:	50 e0       	ldi	r21, 0x00	; 0
    10ca:	61 e0       	ldi	r22, 0x01	; 1
    10cc:	70 e0       	ldi	r23, 0x00	; 0
    10ce:	89 e3       	ldi	r24, 0x39	; 57
    10d0:	95 e2       	ldi	r25, 0x25	; 37
    10d2:	0e 94 b4 0c 	call	0x1968	; 0x1968 <fwrite>
	esp8266_receive(2000);
    10d6:	80 ed       	ldi	r24, 0xD0	; 208
    10d8:	97 e0       	ldi	r25, 0x07	; 7
    10da:	0e 94 4a 04 	call	0x894	; 0x894 <esp8266_receive>
	//printf("%s",esp8266_rxc_buff);
	
	int myargc;
	char *cmd_args[10];
	tokenize(esp8266_rxc_buff,&myargc," =-,\n\r\"", 10, cmd_args);
    10de:	8e 01       	movw	r16, r28
    10e0:	0d 5f       	subi	r16, 0xFD	; 253
    10e2:	1f 4f       	sbci	r17, 0xFF	; 255
    10e4:	2a e0       	ldi	r18, 0x0A	; 10
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	48 ee       	ldi	r20, 0xE8	; 232
    10ea:	53 e2       	ldi	r21, 0x23	; 35
    10ec:	be 01       	movw	r22, r28
    10ee:	6f 5f       	subi	r22, 0xFF	; 255
    10f0:	7f 4f       	sbci	r23, 0xFF	; 255
    10f2:	8c e1       	ldi	r24, 0x1C	; 28
    10f4:	9b e2       	ldi	r25, 0x2B	; 43
    10f6:	0e 94 2f 01 	call	0x25e	; 0x25e <tokenize>
// 	for(int i=0;i<myargc;i++){
// 		printf("the token : %d is -> %s\n",i,cmd_args[i]);
// 	}

	//printf("the MAC address is : %s\n", cmd_args[4]);
	strcpy(MAC,cmd_args[4]);
    10fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    10fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    10fe:	c7 01       	movw	r24, r14
    1100:	0e 94 36 0c 	call	0x186c	; 0x186c <strcpy>
}
    1104:	66 96       	adiw	r28, 0x16	; 22
    1106:	cd bf       	out	0x3d, r28	; 61
    1108:	de bf       	out	0x3e, r29	; 62
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	1f 91       	pop	r17
    1110:	0f 91       	pop	r16
    1112:	ff 90       	pop	r15
    1114:	ef 90       	pop	r14
    1116:	08 95       	ret

00001118 <esp8266_multiple_connection_enable>:





int esp8266_multiple_connection_enable(uint8_t en){
    1118:	0f 93       	push	r16
    111a:	1f 93       	push	r17
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
    1124:	66 97       	sbiw	r28, 0x16	; 22
    1126:	cd bf       	out	0x3d, r28	; 61
    1128:	de bf       	out	0x3e, r29	; 62
    112a:	18 2f       	mov	r17, r24
	printf("setting CIPMUX=%d\n",en);
    112c:	1f 92       	push	r1
    112e:	8f 93       	push	r24
    1130:	88 e5       	ldi	r24, 0x58	; 88
    1132:	95 e2       	ldi	r25, 0x25	; 37
    1134:	9f 93       	push	r25
    1136:	8f 93       	push	r24
    1138:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <printf>
	fprintf(&esp8266_stream,"AT+CIPMUX=%d\n\r",en);
    113c:	1f 92       	push	r1
    113e:	1f 93       	push	r17
    1140:	8b e6       	ldi	r24, 0x6B	; 107
    1142:	95 e2       	ldi	r25, 0x25	; 37
    1144:	9f 93       	push	r25
    1146:	8f 93       	push	r24
    1148:	8c ea       	ldi	r24, 0xAC	; 172
    114a:	9c e2       	ldi	r25, 0x2C	; 44
    114c:	9f 93       	push	r25
    114e:	8f 93       	push	r24
    1150:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <fprintf>
	esp8266_receive(2000);
    1154:	80 ed       	ldi	r24, 0xD0	; 208
    1156:	97 e0       	ldi	r25, 0x07	; 7
    1158:	0e 94 4a 04 	call	0x894	; 0x894 <esp8266_receive>
	//printf("%s",esp8266_rxc_buff);
	
	int myargc;
	char *cmd_args[10];
	tokenize(esp8266_rxc_buff,&myargc," =-,\n\r\"", 10, cmd_args);
    115c:	8e 01       	movw	r16, r28
    115e:	0d 5f       	subi	r16, 0xFD	; 253
    1160:	1f 4f       	sbci	r17, 0xFF	; 255
    1162:	2a e0       	ldi	r18, 0x0A	; 10
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	48 ee       	ldi	r20, 0xE8	; 232
    1168:	53 e2       	ldi	r21, 0x23	; 35
    116a:	be 01       	movw	r22, r28
    116c:	6f 5f       	subi	r22, 0xFF	; 255
    116e:	7f 4f       	sbci	r23, 0xFF	; 255
    1170:	8c e1       	ldi	r24, 0x1C	; 28
    1172:	9b e2       	ldi	r25, 0x2B	; 43
    1174:	0e 94 2f 01 	call	0x25e	; 0x25e <tokenize>
// 	for(int i=0;i<myargc;i++){
// 		printf("the token : %d is -> %s\n",i,cmd_args[i]);
// 	}
	
	
	if(!strcmp("OK",cmd_args[2])){
    1178:	6f 81       	ldd	r22, Y+7	; 0x07
    117a:	78 85       	ldd	r23, Y+8	; 0x08
    117c:	8c ef       	ldi	r24, 0xFC	; 252
    117e:	92 e2       	ldi	r25, 0x22	; 34
    1180:	0e 94 2d 0c 	call	0x185a	; 0x185a <strcmp>
    1184:	cd bf       	out	0x3d, r28	; 61
    1186:	de bf       	out	0x3e, r29	; 62
    1188:	89 2b       	or	r24, r25
    118a:	39 f4       	brne	.+14     	; 0x119a <esp8266_multiple_connection_enable+0x82>
		printf("successfully enabled multiple connection\n");
    118c:	8a e7       	ldi	r24, 0x7A	; 122
    118e:	95 e2       	ldi	r25, 0x25	; 37
    1190:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <puts>
		return 1;
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	06 c0       	rjmp	.+12     	; 0x11a6 <esp8266_multiple_connection_enable+0x8e>
	}
	else{
		printf("error enabling multiple connection\n");
    119a:	83 ea       	ldi	r24, 0xA3	; 163
    119c:	95 e2       	ldi	r25, 0x25	; 37
    119e:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <puts>
		return -1;
    11a2:	8f ef       	ldi	r24, 0xFF	; 255
    11a4:	9f ef       	ldi	r25, 0xFF	; 255
	}
	
	
}
    11a6:	66 96       	adiw	r28, 0x16	; 22
    11a8:	cd bf       	out	0x3d, r28	; 61
    11aa:	de bf       	out	0x3e, r29	; 62
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	1f 91       	pop	r17
    11b2:	0f 91       	pop	r16
    11b4:	08 95       	ret

000011b6 <esp8266_check_connection_status>:
// 	fprintf(&esp8266_stream,"AT+CWLIF\n\r");
// 	esp8266_receive(2000);
// 	printf("%s",esp8266_rxc_buff);
// }

int esp8266_check_connection_status(ESP8266_cpnnected_AP_t * device){
    11b6:	6f 92       	push	r6
    11b8:	7f 92       	push	r7
    11ba:	8f 92       	push	r8
    11bc:	9f 92       	push	r9
    11be:	af 92       	push	r10
    11c0:	bf 92       	push	r11
    11c2:	cf 92       	push	r12
    11c4:	df 92       	push	r13
    11c6:	ef 92       	push	r14
    11c8:	ff 92       	push	r15
    11ca:	0f 93       	push	r16
    11cc:	1f 93       	push	r17
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
    11d6:	c2 54       	subi	r28, 0x42	; 66
    11d8:	d1 09       	sbc	r29, r1
    11da:	cd bf       	out	0x3d, r28	; 61
    11dc:	de bf       	out	0x3e, r29	; 62
	printf("checking connection status\n");
    11de:	85 e2       	ldi	r24, 0x25	; 37
    11e0:	96 e2       	ldi	r25, 0x26	; 38
    11e2:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <puts>
	fprintf(&esp8266_stream,"AT+CIPSTATUS\n\r");
    11e6:	2c ea       	ldi	r18, 0xAC	; 172
    11e8:	3c e2       	ldi	r19, 0x2C	; 44
    11ea:	4e e0       	ldi	r20, 0x0E	; 14
    11ec:	50 e0       	ldi	r21, 0x00	; 0
    11ee:	61 e0       	ldi	r22, 0x01	; 1
    11f0:	70 e0       	ldi	r23, 0x00	; 0
    11f2:	80 e4       	ldi	r24, 0x40	; 64
    11f4:	96 e2       	ldi	r25, 0x26	; 38
    11f6:	0e 94 b4 0c 	call	0x1968	; 0x1968 <fwrite>
	esp8266_receive(500);
    11fa:	84 ef       	ldi	r24, 0xF4	; 244
    11fc:	91 e0       	ldi	r25, 0x01	; 1
    11fe:	0e 94 4a 04 	call	0x894	; 0x894 <esp8266_receive>
	
	int myargc;
	int myargc2;
	char *cmd_args[10];
	char *cmd_args2[10];
	tokenize(esp8266_rxc_buff,&myargc,"\n\r", 10, cmd_args);
    1202:	8e 01       	movw	r16, r28
    1204:	0b 5f       	subi	r16, 0xFB	; 251
    1206:	1f 4f       	sbci	r17, 0xFF	; 255
    1208:	2a e0       	ldi	r18, 0x0A	; 10
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	44 ef       	ldi	r20, 0xF4	; 244
    120e:	52 e2       	ldi	r21, 0x22	; 34
    1210:	be 01       	movw	r22, r28
    1212:	6f 5f       	subi	r22, 0xFF	; 255
    1214:	7f 4f       	sbci	r23, 0xFF	; 255
    1216:	8c e1       	ldi	r24, 0x1C	; 28
    1218:	9b e2       	ldi	r25, 0x2B	; 43
    121a:	0e 94 2f 01 	call	0x25e	; 0x25e <tokenize>
	
	//printf("THE ARGUMENT COUNT IS : %d\n",myargc);
	
	
	int OK_count = 0;
	for(int i=0;i<myargc;i++){
    121e:	e9 80       	ldd	r14, Y+1	; 0x01
    1220:	fa 80       	ldd	r15, Y+2	; 0x02
    1222:	1e 14       	cp	r1, r14
    1224:	1f 04       	cpc	r1, r15
    1226:	0c f0       	brlt	.+2      	; 0x122a <esp8266_check_connection_status+0x74>
    1228:	73 c0       	rjmp	.+230    	; 0x1310 <esp8266_check_connection_status+0x15a>
    122a:	a1 2c       	mov	r10, r1
    122c:	b1 2c       	mov	r11, r1
		//printf("the token : %d is -> %s\n",i,cmd_args[i]);
		if(!strcmp(cmd_args[i],"OK")){
    122e:	6c ef       	ldi	r22, 0xFC	; 252
    1230:	72 e2       	ldi	r23, 0x22	; 34
    1232:	f8 01       	movw	r30, r16
    1234:	81 91       	ld	r24, Z+
    1236:	91 91       	ld	r25, Z+
    1238:	8f 01       	movw	r16, r30
    123a:	0e 94 2d 0c 	call	0x185a	; 0x185a <strcmp>
    123e:	89 2b       	or	r24, r25
    1240:	c1 f4       	brne	.+48     	; 0x1272 <esp8266_check_connection_status+0xbc>
	
	
	//printf("THE OK COUNT IS TOKEN NO : %d\n",OK_count);
	
	
	tokenize(cmd_args[1],&myargc2,":", 10, cmd_args2);
    1242:	8e 01       	movw	r16, r28
    1244:	07 5e       	subi	r16, 0xE7	; 231
    1246:	1f 4f       	sbci	r17, 0xFF	; 255
    1248:	2a e0       	ldi	r18, 0x0A	; 10
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	4f e4       	ldi	r20, 0x4F	; 79
    124e:	56 e2       	ldi	r21, 0x26	; 38
    1250:	be 01       	movw	r22, r28
    1252:	6d 5f       	subi	r22, 0xFD	; 253
    1254:	7f 4f       	sbci	r23, 0xFF	; 255
    1256:	8f 81       	ldd	r24, Y+7	; 0x07
    1258:	98 85       	ldd	r25, Y+8	; 0x08
    125a:	0e 94 2f 01 	call	0x25e	; 0x25e <tokenize>
	//printf("THE STATUS IS : %s\n",cmd_args2[1]);
	int status = atoi(cmd_args2[1]);
    125e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1260:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1262:	0e 94 0b 0c 	call	0x1816	; 0x1816 <atoi>
    1266:	3c 01       	movw	r6, r24
	
	for(int i=2;i<OK_count;i++){
    1268:	f3 e0       	ldi	r31, 0x03	; 3
    126a:	af 16       	cp	r10, r31
    126c:	b1 04       	cpc	r11, r1
    126e:	44 f4       	brge	.+16     	; 0x1280 <esp8266_check_connection_status+0xca>
    1270:	62 c0       	rjmp	.+196    	; 0x1336 <esp8266_check_connection_status+0x180>
	
	//printf("THE ARGUMENT COUNT IS : %d\n",myargc);
	
	
	int OK_count = 0;
	for(int i=0;i<myargc;i++){
    1272:	8f ef       	ldi	r24, 0xFF	; 255
    1274:	a8 1a       	sub	r10, r24
    1276:	b8 0a       	sbc	r11, r24
    1278:	ae 14       	cp	r10, r14
    127a:	bf 04       	cpc	r11, r15
    127c:	c1 f6       	brne	.-80     	; 0x122e <esp8266_check_connection_status+0x78>
    127e:	48 c0       	rjmp	.+144    	; 0x1310 <esp8266_check_connection_status+0x15a>
    1280:	4e 01       	movw	r8, r28
    1282:	99 e0       	ldi	r25, 0x09	; 9
    1284:	89 0e       	add	r8, r25
    1286:	91 1c       	adc	r9, r1
    1288:	aa 0c       	add	r10, r10
    128a:	bb 1c       	adc	r11, r11
    128c:	e5 e0       	ldi	r30, 0x05	; 5
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	ec 0f       	add	r30, r28
    1292:	fd 1f       	adc	r31, r29
    1294:	ae 0e       	add	r10, r30
    1296:	bf 1e       	adc	r11, r31
		int myargc3;
		char *cmd_args3[10];
		tokenize(cmd_args[i],&myargc3,"+\r\n",10,cmd_args3);
			
		for(int j=0;j<myargc3;j++){
			printf("\tconnected device --------->>>> %s\n",cmd_args3[j]);
    1298:	0f 2e       	mov	r0, r31
    129a:	f5 e5       	ldi	r31, 0x55	; 85
    129c:	cf 2e       	mov	r12, r31
    129e:	f6 e2       	ldi	r31, 0x26	; 38
    12a0:	df 2e       	mov	r13, r31
    12a2:	f0 2d       	mov	r31, r0
	int status = atoi(cmd_args2[1]);
	
	for(int i=2;i<OK_count;i++){
		int myargc3;
		char *cmd_args3[10];
		tokenize(cmd_args[i],&myargc3,"+\r\n",10,cmd_args3);
    12a4:	8e 01       	movw	r16, r28
    12a6:	03 5d       	subi	r16, 0xD3	; 211
    12a8:	1f 4f       	sbci	r17, 0xFF	; 255
    12aa:	2a e0       	ldi	r18, 0x0A	; 10
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	41 e5       	ldi	r20, 0x51	; 81
    12b0:	56 e2       	ldi	r21, 0x26	; 38
    12b2:	be 01       	movw	r22, r28
    12b4:	6f 5b       	subi	r22, 0xBF	; 191
    12b6:	7f 4f       	sbci	r23, 0xFF	; 255
    12b8:	f4 01       	movw	r30, r8
    12ba:	81 91       	ld	r24, Z+
    12bc:	91 91       	ld	r25, Z+
    12be:	4f 01       	movw	r8, r30
    12c0:	0e 94 2f 01 	call	0x25e	; 0x25e <tokenize>
			
		for(int j=0;j<myargc3;j++){
    12c4:	23 96       	adiw	r28, 0x03	; 3
    12c6:	8e ad       	ldd	r24, Y+62	; 0x3e
    12c8:	9f ad       	ldd	r25, Y+63	; 0x3f
    12ca:	23 97       	sbiw	r28, 0x03	; 3
    12cc:	18 16       	cp	r1, r24
    12ce:	19 06       	cpc	r1, r25
    12d0:	dc f4       	brge	.+54     	; 0x1308 <esp8266_check_connection_status+0x152>
    12d2:	e1 2c       	mov	r14, r1
    12d4:	f1 2c       	mov	r15, r1
			printf("\tconnected device --------->>>> %s\n",cmd_args3[j]);
    12d6:	f8 01       	movw	r30, r16
    12d8:	80 81       	ld	r24, Z
    12da:	91 81       	ldd	r25, Z+1	; 0x01
    12dc:	0e 5f       	subi	r16, 0xFE	; 254
    12de:	1f 4f       	sbci	r17, 0xFF	; 255
    12e0:	9f 93       	push	r25
    12e2:	8f 93       	push	r24
    12e4:	df 92       	push	r13
    12e6:	cf 92       	push	r12
    12e8:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <printf>
	for(int i=2;i<OK_count;i++){
		int myargc3;
		char *cmd_args3[10];
		tokenize(cmd_args[i],&myargc3,"+\r\n",10,cmd_args3);
			
		for(int j=0;j<myargc3;j++){
    12ec:	ff ef       	ldi	r31, 0xFF	; 255
    12ee:	ef 1a       	sub	r14, r31
    12f0:	ff 0a       	sbc	r15, r31
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	23 96       	adiw	r28, 0x03	; 3
    12fc:	8e ad       	ldd	r24, Y+62	; 0x3e
    12fe:	9f ad       	ldd	r25, Y+63	; 0x3f
    1300:	23 97       	sbiw	r28, 0x03	; 3
    1302:	e8 16       	cp	r14, r24
    1304:	f9 06       	cpc	r15, r25
    1306:	3c f3       	brlt	.-50     	; 0x12d6 <esp8266_check_connection_status+0x120>
	
	tokenize(cmd_args[1],&myargc2,":", 10, cmd_args2);
	//printf("THE STATUS IS : %s\n",cmd_args2[1]);
	int status = atoi(cmd_args2[1]);
	
	for(int i=2;i<OK_count;i++){
    1308:	8a 14       	cp	r8, r10
    130a:	9b 04       	cpc	r9, r11
    130c:	59 f6       	brne	.-106    	; 0x12a4 <esp8266_check_connection_status+0xee>
    130e:	13 c0       	rjmp	.+38     	; 0x1336 <esp8266_check_connection_status+0x180>
	
	
	//printf("THE OK COUNT IS TOKEN NO : %d\n",OK_count);
	
	
	tokenize(cmd_args[1],&myargc2,":", 10, cmd_args2);
    1310:	8e 01       	movw	r16, r28
    1312:	07 5e       	subi	r16, 0xE7	; 231
    1314:	1f 4f       	sbci	r17, 0xFF	; 255
    1316:	2a e0       	ldi	r18, 0x0A	; 10
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	4f e4       	ldi	r20, 0x4F	; 79
    131c:	56 e2       	ldi	r21, 0x26	; 38
    131e:	be 01       	movw	r22, r28
    1320:	6d 5f       	subi	r22, 0xFD	; 253
    1322:	7f 4f       	sbci	r23, 0xFF	; 255
    1324:	8f 81       	ldd	r24, Y+7	; 0x07
    1326:	98 85       	ldd	r25, Y+8	; 0x08
    1328:	0e 94 2f 01 	call	0x25e	; 0x25e <tokenize>
	//printf("THE STATUS IS : %s\n",cmd_args2[1]);
	int status = atoi(cmd_args2[1]);
    132c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    132e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1330:	0e 94 0b 0c 	call	0x1816	; 0x1816 <atoi>
    1334:	3c 01       	movw	r6, r24
	}
	
	return status;
		
	
}
    1336:	c3 01       	movw	r24, r6
    1338:	ce 5b       	subi	r28, 0xBE	; 190
    133a:	df 4f       	sbci	r29, 0xFF	; 255
    133c:	cd bf       	out	0x3d, r28	; 61
    133e:	de bf       	out	0x3e, r29	; 62
    1340:	df 91       	pop	r29
    1342:	cf 91       	pop	r28
    1344:	1f 91       	pop	r17
    1346:	0f 91       	pop	r16
    1348:	ff 90       	pop	r15
    134a:	ef 90       	pop	r14
    134c:	df 90       	pop	r13
    134e:	cf 90       	pop	r12
    1350:	bf 90       	pop	r11
    1352:	af 90       	pop	r10
    1354:	9f 90       	pop	r9
    1356:	8f 90       	pop	r8
    1358:	7f 90       	pop	r7
    135a:	6f 90       	pop	r6
    135c:	08 95       	ret

0000135e <esp8266_set_server>:

void esp8266_set_server(int port){
    135e:	0f 93       	push	r16
    1360:	1f 93       	push	r17
    1362:	cf 93       	push	r28
    1364:	df 93       	push	r29
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	66 97       	sbiw	r28, 0x16	; 22
    136c:	cd bf       	out	0x3d, r28	; 61
    136e:	de bf       	out	0x3e, r29	; 62
    1370:	18 2f       	mov	r17, r24
    1372:	09 2f       	mov	r16, r25
	printf("setting server\n");
    1374:	89 e7       	ldi	r24, 0x79	; 121
    1376:	96 e2       	ldi	r25, 0x26	; 38
    1378:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <puts>
	fprintf(&esp8266_stream,"AT+CIPSERVER=1,%d\n\r",port);
    137c:	0f 93       	push	r16
    137e:	1f 93       	push	r17
    1380:	88 e8       	ldi	r24, 0x88	; 136
    1382:	96 e2       	ldi	r25, 0x26	; 38
    1384:	9f 93       	push	r25
    1386:	8f 93       	push	r24
    1388:	8c ea       	ldi	r24, 0xAC	; 172
    138a:	9c e2       	ldi	r25, 0x2C	; 44
    138c:	9f 93       	push	r25
    138e:	8f 93       	push	r24
    1390:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <fprintf>
	esp8266_receive(2000);
    1394:	80 ed       	ldi	r24, 0xD0	; 208
    1396:	97 e0       	ldi	r25, 0x07	; 7
    1398:	0e 94 4a 04 	call	0x894	; 0x894 <esp8266_receive>
	//printf("%s",esp8266_rxc_buff);
	
	int myargc;
	char *cmd_args[10];
	tokenize(esp8266_rxc_buff,&myargc," =-,\n\r:\"", 10, cmd_args);
    139c:	8e 01       	movw	r16, r28
    139e:	0d 5f       	subi	r16, 0xFD	; 253
    13a0:	1f 4f       	sbci	r17, 0xFF	; 255
    13a2:	2a e0       	ldi	r18, 0x0A	; 10
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	43 ee       	ldi	r20, 0xE3	; 227
    13a8:	55 e2       	ldi	r21, 0x25	; 37
    13aa:	be 01       	movw	r22, r28
    13ac:	6f 5f       	subi	r22, 0xFF	; 255
    13ae:	7f 4f       	sbci	r23, 0xFF	; 255
    13b0:	8c e1       	ldi	r24, 0x1C	; 28
    13b2:	9b e2       	ldi	r25, 0x2B	; 43
    13b4:	0e 94 2f 01 	call	0x25e	; 0x25e <tokenize>
// 	for(int i=0;i<myargc;i++){
// 		printf("the token : %d is -> %s\n",i,cmd_args[i]);
// 	}	
	
	
	if(!strcmp(cmd_args[3],"OK")){
    13b8:	09 85       	ldd	r16, Y+9	; 0x09
    13ba:	1a 85       	ldd	r17, Y+10	; 0x0a
    13bc:	6c ef       	ldi	r22, 0xFC	; 252
    13be:	72 e2       	ldi	r23, 0x22	; 34
    13c0:	c8 01       	movw	r24, r16
    13c2:	0e 94 2d 0c 	call	0x185a	; 0x185a <strcmp>
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	89 2b       	or	r24, r25
    13d4:	29 f4       	brne	.+10     	; 0x13e0 <esp8266_set_server+0x82>
		printf("server started successfully\n");
    13d6:	8c e9       	ldi	r24, 0x9C	; 156
    13d8:	96 e2       	ldi	r25, 0x26	; 38
    13da:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <puts>
    13de:	13 c0       	rjmp	.+38     	; 0x1406 <esp8266_set_server+0xa8>
	}
	else if( (!strcmp(cmd_args[3],"no")) && (!strcmp(cmd_args[4],"change")) ){
    13e0:	68 eb       	ldi	r22, 0xB8	; 184
    13e2:	76 e2       	ldi	r23, 0x26	; 38
    13e4:	c8 01       	movw	r24, r16
    13e6:	0e 94 2d 0c 	call	0x185a	; 0x185a <strcmp>
    13ea:	89 2b       	or	r24, r25
    13ec:	61 f4       	brne	.+24     	; 0x1406 <esp8266_set_server+0xa8>
    13ee:	6b eb       	ldi	r22, 0xBB	; 187
    13f0:	76 e2       	ldi	r23, 0x26	; 38
    13f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    13f4:	9c 85       	ldd	r25, Y+12	; 0x0c
    13f6:	0e 94 2d 0c 	call	0x185a	; 0x185a <strcmp>
    13fa:	89 2b       	or	r24, r25
    13fc:	21 f4       	brne	.+8      	; 0x1406 <esp8266_set_server+0xa8>
		printf("server already running\n");
    13fe:	82 ec       	ldi	r24, 0xC2	; 194
    1400:	96 e2       	ldi	r25, 0x26	; 38
    1402:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <puts>
	}
}
    1406:	66 96       	adiw	r28, 0x16	; 22
    1408:	cd bf       	out	0x3d, r28	; 61
    140a:	de bf       	out	0x3e, r29	; 62
    140c:	df 91       	pop	r29
    140e:	cf 91       	pop	r28
    1410:	1f 91       	pop	r17
    1412:	0f 91       	pop	r16
    1414:	08 95       	ret

00001416 <esp8266_check_server_timeout>:
		printf("the token : %d is -> %s\n",i,cmd_args[i]);
	}
	
}

int esp8266_check_server_timeout(){
    1416:	0f 93       	push	r16
    1418:	1f 93       	push	r17
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	66 97       	sbiw	r28, 0x16	; 22
    1424:	cd bf       	out	0x3d, r28	; 61
    1426:	de bf       	out	0x3e, r29	; 62
	printf("checking server timeout\n");
    1428:	89 eb       	ldi	r24, 0xB9	; 185
    142a:	97 e2       	ldi	r25, 0x27	; 39
    142c:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <puts>
	fprintf(&esp8266_stream,"AT+CIPSTO?\n\r");
    1430:	2c ea       	ldi	r18, 0xAC	; 172
    1432:	3c e2       	ldi	r19, 0x2C	; 44
    1434:	4c e0       	ldi	r20, 0x0C	; 12
    1436:	50 e0       	ldi	r21, 0x00	; 0
    1438:	61 e0       	ldi	r22, 0x01	; 1
    143a:	70 e0       	ldi	r23, 0x00	; 0
    143c:	81 ed       	ldi	r24, 0xD1	; 209
    143e:	97 e2       	ldi	r25, 0x27	; 39
    1440:	0e 94 b4 0c 	call	0x1968	; 0x1968 <fwrite>
	esp8266_receive(2000);
    1444:	80 ed       	ldi	r24, 0xD0	; 208
    1446:	97 e0       	ldi	r25, 0x07	; 7
    1448:	0e 94 4a 04 	call	0x894	; 0x894 <esp8266_receive>
	//printf("%s",esp8266_rxc_buff);
	
	int myargc;
	char *cmd_args[10];
	tokenize(esp8266_rxc_buff,&myargc," =-,\n\r:\"", 10, cmd_args);
    144c:	8e 01       	movw	r16, r28
    144e:	0d 5f       	subi	r16, 0xFD	; 253
    1450:	1f 4f       	sbci	r17, 0xFF	; 255
    1452:	2a e0       	ldi	r18, 0x0A	; 10
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	43 ee       	ldi	r20, 0xE3	; 227
    1458:	55 e2       	ldi	r21, 0x25	; 37
    145a:	be 01       	movw	r22, r28
    145c:	6f 5f       	subi	r22, 0xFF	; 255
    145e:	7f 4f       	sbci	r23, 0xFF	; 255
    1460:	8c e1       	ldi	r24, 0x1C	; 28
    1462:	9b e2       	ldi	r25, 0x2B	; 43
    1464:	0e 94 2f 01 	call	0x25e	; 0x25e <tokenize>
	//for(int i=0;i<myargc;i++){
		//printf("the token : %d is -> %s\n",i,cmd_args[i]);
	//}
	
	
	if(!strcmp(cmd_args[3],"OK")){
    1468:	6c ef       	ldi	r22, 0xFC	; 252
    146a:	72 e2       	ldi	r23, 0x22	; 34
    146c:	89 85       	ldd	r24, Y+9	; 0x09
    146e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1470:	0e 94 2d 0c 	call	0x185a	; 0x185a <strcmp>
    1474:	89 2b       	or	r24, r25
    1476:	a9 f4       	brne	.+42     	; 0x14a2 <esp8266_check_server_timeout+0x8c>
		printf("server timeout is : %d\n",atoi(cmd_args[2]));
    1478:	8f 81       	ldd	r24, Y+7	; 0x07
    147a:	98 85       	ldd	r25, Y+8	; 0x08
    147c:	0e 94 0b 0c 	call	0x1816	; 0x1816 <atoi>
    1480:	9f 93       	push	r25
    1482:	8f 93       	push	r24
    1484:	8e ed       	ldi	r24, 0xDE	; 222
    1486:	97 e2       	ldi	r25, 0x27	; 39
    1488:	9f 93       	push	r25
    148a:	8f 93       	push	r24
    148c:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <printf>
		return atoi(cmd_args[2]);
    1490:	8f 81       	ldd	r24, Y+7	; 0x07
    1492:	98 85       	ldd	r25, Y+8	; 0x08
    1494:	0e 94 0b 0c 	call	0x1816	; 0x1816 <atoi>
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <esp8266_check_server_timeout+0x90>
	}
	else{
		return -1;
    14a2:	8f ef       	ldi	r24, 0xFF	; 255
    14a4:	9f ef       	ldi	r25, 0xFF	; 255
	}
}
    14a6:	66 96       	adiw	r28, 0x16	; 22
    14a8:	cd bf       	out	0x3d, r28	; 61
    14aa:	de bf       	out	0x3e, r29	; 62
    14ac:	df 91       	pop	r29
    14ae:	cf 91       	pop	r28
    14b0:	1f 91       	pop	r17
    14b2:	0f 91       	pop	r16
    14b4:	08 95       	ret

000014b6 <__vector_58>:
	esp8266_receive(2000);
	printf("%s",esp8266_rxc_buff);
}


ISR(USARTE0_RXC_vect){
    14b6:	1f 92       	push	r1
    14b8:	0f 92       	push	r0
    14ba:	0f b6       	in	r0, 0x3f	; 63
    14bc:	0f 92       	push	r0
    14be:	11 24       	eor	r1, r1
    14c0:	0b b6       	in	r0, 0x3b	; 59
    14c2:	0f 92       	push	r0
    14c4:	8f 93       	push	r24
    14c6:	9f 93       	push	r25
    14c8:	af 93       	push	r26
    14ca:	bf 93       	push	r27
    14cc:	ef 93       	push	r30
    14ce:	ff 93       	push	r31

	*(esp8266_rxc_buff_p++) = USARTE0.DATA;
    14d0:	e0 91 89 22 	lds	r30, 0x2289
    14d4:	f0 91 8a 22 	lds	r31, 0x228A
    14d8:	cf 01       	movw	r24, r30
    14da:	01 96       	adiw	r24, 0x01	; 1
    14dc:	80 93 89 22 	sts	0x2289, r24
    14e0:	90 93 8a 22 	sts	0x228A, r25
    14e4:	80 91 a0 0a 	lds	r24, 0x0AA0
    14e8:	80 83       	st	Z, r24
	esp8266_timesnap = rtc_tick;
    14ea:	80 91 18 2b 	lds	r24, 0x2B18
    14ee:	90 91 19 2b 	lds	r25, 0x2B19
    14f2:	a0 91 1a 2b 	lds	r26, 0x2B1A
    14f6:	b0 91 1b 2b 	lds	r27, 0x2B1B
    14fa:	80 93 12 29 	sts	0x2912, r24
    14fe:	90 93 13 29 	sts	0x2913, r25
    1502:	a0 93 14 29 	sts	0x2914, r26
    1506:	b0 93 15 29 	sts	0x2915, r27
}
    150a:	ff 91       	pop	r31
    150c:	ef 91       	pop	r30
    150e:	bf 91       	pop	r27
    1510:	af 91       	pop	r26
    1512:	9f 91       	pop	r25
    1514:	8f 91       	pop	r24
    1516:	0f 90       	pop	r0
    1518:	0b be       	out	0x3b, r0	; 59
    151a:	0f 90       	pop	r0
    151c:	0f be       	out	0x3f, r0	; 63
    151e:	0f 90       	pop	r0
    1520:	1f 90       	pop	r1
    1522:	18 95       	reti

00001524 <lcd_line_print>:
#include "ssd1306.h"
#include "gfx_mono.h"
#include "esp8266.h"


void lcd_line_print(int line, char *str){
    1524:	ef 92       	push	r14
    1526:	ff 92       	push	r15
    1528:	1f 93       	push	r17
    152a:	cf 93       	push	r28
    152c:	df 93       	push	r29
    152e:	18 2f       	mov	r17, r24
    1530:	7b 01       	movw	r14, r22
    1532:	d0 e0       	ldi	r29, 0x00	; 0
	{
		ssd1306_set_page_address(page);
    1534:	8d 2f       	mov	r24, r29
    1536:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <ssd1306_set_page_address>
		ssd1306_set_column_address(0);
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <ssd1306_set_column_address>
    1540:	c0 e0       	ldi	r28, 0x00	; 0
		for (col = 0; col < 128; ++col)
		{
			ssd1306_write_data(0x00);
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	0e 94 b6 02 	call	0x56c	; 0x56c <ssd1306_write_data>

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
		for (col = 0; col < 128; ++col)
    1548:	cf 5f       	subi	r28, 0xFF	; 255
    154a:	c0 38       	cpi	r28, 0x80	; 128
    154c:	d1 f7       	brne	.-12     	; 0x1542 <lcd_line_print+0x1e>
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
    154e:	df 5f       	subi	r29, 0xFF	; 255
    1550:	d4 30       	cpi	r29, 0x04	; 4
    1552:	81 f7       	brne	.-32     	; 0x1534 <lcd_line_print+0x10>
	ssd1306_clear();
	ssd1306_set_page_address(line);
    1554:	81 2f       	mov	r24, r17
    1556:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <ssd1306_set_page_address>
	ssd1306_set_column_address(0);
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <ssd1306_set_column_address>
	ssd1306_write_text(str);
    1560:	c7 01       	movw	r24, r14
    1562:	0e 94 bc 03 	call	0x778	; 0x778 <ssd1306_write_text>
}
    1566:	df 91       	pop	r29
    1568:	cf 91       	pop	r28
    156a:	1f 91       	pop	r17
    156c:	ff 90       	pop	r15
    156e:	ef 90       	pop	r14
    1570:	08 95       	ret

00001572 <main>:




int main(void)
{
    1572:	cf 93       	push	r28
    1574:	df 93       	push	r29
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
    157a:	c6 58       	subi	r28, 0x86	; 134
    157c:	d2 40       	sbci	r29, 0x02	; 2
    157e:	cd bf       	out	0x3d, r28	; 61
    1580:	de bf       	out	0x3e, r29	; 62
	//
	rtc_init();
    1582:	0e 94 6f 01 	call	0x2de	; 0x2de <rtc_init>
	
	
	//changing the clock to 32MHz
	enable_oscillator(OSC_RC32MEN_bm);
    1586:	82 e0       	ldi	r24, 0x02	; 2
    1588:	0e 94 ff 01 	call	0x3fe	; 0x3fe <enable_oscillator>
}
/**
 * system clock dividing factor
 */
void sysclk_prescaler(CLK_PSADIV_t psbcdiva, CLK_PSBCDIV_t psbcdivb){
	ccp_ioreg();
    158c:	88 ed       	ldi	r24, 0xD8	; 216
    158e:	84 bf       	out	0x34, r24	; 52
	CLK.PSCTRL = psbcdiva | psbcdivb;
    1590:	10 92 41 00 	sts	0x0041, r1
	sysclk_prescaler(CLK_PSADIV_1_gc,CLK_PSBCDIV_1_1_gc);
	sysclk_source(CLK_SCLKSEL_RC32M_gc);
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	0e 94 05 02 	call	0x40a	; 0x40a <sysclk_source>
 * @param chsize character size
 * @param clk2en enable double speed
 * @param mpcen enable multiprocessor communication
 */
void usart_config(USART_t *usart_unit,PORT_t *port_unit, USART_CMODE_t mode, USART_PMODE_t pmode, USART_CHSIZE_t chsize, uint8_t clk2xen, uint8_t mpcmen){
	usart_unit->CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    159a:	e0 ea       	ldi	r30, 0xA0	; 160
    159c:	f8 e0       	ldi	r31, 0x08	; 8
    159e:	88 e1       	ldi	r24, 0x18	; 24
    15a0:	84 83       	std	Z+4, r24	; 0x04
	usart_unit->CTRLB |= (clk2xen<<USART_CLK2X_bp) | (mpcmen<<USART_MPCM_bp);
    15a2:	84 81       	ldd	r24, Z+4	; 0x04
    15a4:	84 83       	std	Z+4, r24	; 0x04
	usart_unit->CTRLC = mode |pmode | chsize;
    15a6:	83 e0       	ldi	r24, 0x03	; 3
    15a8:	85 83       	std	Z+5, r24	; 0x05

	
	if( (usart_unit == &USARTC0) || (usart_unit == &USARTD0) || (usart_unit == &USARTE0) || (usart_unit == &USARTF0) ){
		port_unit->DIRSET = (1<<3);//USARTx0 TXD pin output
    15aa:	a0 e4       	ldi	r26, 0x40	; 64
    15ac:	b6 e0       	ldi	r27, 0x06	; 6
    15ae:	88 e0       	ldi	r24, 0x08	; 8
    15b0:	11 96       	adiw	r26, 0x01	; 1
    15b2:	8c 93       	st	X, r24
    15b4:	11 97       	sbiw	r26, 0x01	; 1
		port_unit->DIRCLR = (1<<2);//USARTx0 RXD pin input
    15b6:	84 e0       	ldi	r24, 0x04	; 4
    15b8:	12 96       	adiw	r26, 0x02	; 2
    15ba:	8c 93       	st	X, r24
 * @param baud_rate
 * @param bscale_val
 */
void usart_baud(USART_t *usart, unsigned long baud_rate, int bscale_val){
	uint16_t bsel_val = BAUD_VALUE(baud_rate,bscale_val);
	usart->BAUDCTRLA = bsel_val;
    15bc:	89 e8       	ldi	r24, 0x89	; 137
    15be:	86 83       	std	Z+6, r24	; 0x06
	usart->BAUDCTRLB = (bscale_val<<USART_BSCALE_gp) | (bsel_val>>8);
    15c0:	80 ed       	ldi	r24, 0xD0	; 208
    15c2:	87 83       	std	Z+7, r24	; 0x07

	usart_config(&USARTC0,&PORTC,USART_CMODE_ASYNCHRONOUS_gc,USART_PMODE_DISABLED_gc,USART_CHSIZE_8BIT_gc,false,false);
	usart_baud(&USARTC0,115200,-3);
	FILE my_stdio;
	create_file_stream(&my_stdio,&USARTC0_putchar,&USARTC0_getchar);
    15c4:	4d e3       	ldi	r20, 0x3D	; 61
    15c6:	52 e0       	ldi	r21, 0x02	; 2
    15c8:	65 e1       	ldi	r22, 0x15	; 21
    15ca:	72 e0       	ldi	r23, 0x02	; 2
    15cc:	8e 01       	movw	r16, r28
    15ce:	0f 5f       	subi	r16, 0xFF	; 255
    15d0:	1f 4f       	sbci	r17, 0xFF	; 255
    15d2:	c8 01       	movw	r24, r16
    15d4:	0e 94 95 02 	call	0x52a	; 0x52a <create_file_stream>
/**
 * initializing the stdio file stream over uart
 */
void set_stdio_stream(FILE* stdio_file)
{
	stdout = stdin = stdio_file;
    15d8:	ea eb       	ldi	r30, 0xBA	; 186
    15da:	fc e2       	ldi	r31, 0x2C	; 44
    15dc:	00 83       	st	Z, r16
    15de:	11 83       	std	Z+1, r17	; 0x01
    15e0:	02 83       	std	Z+2, r16	; 0x02
    15e2:	13 83       	std	Z+3, r17	; 0x03
	set_stdio_stream(&my_stdio);



	port_direction_set_mask(&PORTR,1<<0);
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	80 93 e1 07 	sts	0x07E1, r24
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
    15ea:	88 e1       	ldi	r24, 0x18	; 24
    15ec:	99 e2       	ldi	r25, 0x29	; 41
    15ee:	80 93 16 29 	sts	0x2916, r24
    15f2:	90 93 17 29 	sts	0x2917, r25
	uint8_t page;
	uint8_t column;
	
	gfx_mono_set_framebuffer(framebuffer);
	
	ssd1306_init();
    15f6:	0e 94 30 03 	call	0x660	; 0x660 <ssd1306_init>
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(address));
    15fa:	80 e4       	ldi	r24, 0x40	; 64
    15fc:	0e 94 7f 02 	call	0x4fe	; 0x4fe <ssd1306_write_command>
	//ssd1306_clear();
	
	ssd1306_set_display_start_line_address(0);
	

	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
    1600:	00 e0       	ldi	r16, 0x00	; 0
    1602:	0c c0       	rjmp	.+24     	; 0x161c <main+0xaa>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_ssd1306_put_byte(page, column, 0x00, 1);
    1604:	21 e0       	ldi	r18, 0x01	; 1
    1606:	40 e0       	ldi	r20, 0x00	; 0
    1608:	61 2f       	mov	r22, r17
    160a:	80 2f       	mov	r24, r16
    160c:	0e 94 0c 04 	call	0x818	; 0x818 <gfx_mono_ssd1306_put_byte>
	
	ssd1306_set_display_start_line_address(0);
	

	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
    1610:	1f 5f       	subi	r17, 0xFF	; 255
    1612:	10 38       	cpi	r17, 0x80	; 128
    1614:	b9 f7       	brne	.-18     	; 0x1604 <main+0x92>
	//ssd1306_clear();
	
	ssd1306_set_display_start_line_address(0);
	

	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
    1616:	0f 5f       	subi	r16, 0xFF	; 255
    1618:	04 30       	cpi	r16, 0x04	; 4
    161a:	11 f0       	breq	.+4      	; 0x1620 <main+0xae>




int main(void)
{
    161c:	10 e0       	ldi	r17, 0x00	; 0
    161e:	f2 cf       	rjmp	.-28     	; 0x1604 <main+0x92>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_ssd1306_put_byte(page, column, 0x00, 1);
		}
	}
	
	ssd1306_set_page_address(0);
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <ssd1306_set_page_address>
	ssd1306_write_text("EMON");
    1626:	84 e7       	ldi	r24, 0x74	; 116
    1628:	98 e2       	ldi	r25, 0x28	; 40
    162a:	0e 94 bc 03 	call	0x778	; 0x778 <ssd1306_write_text>
	
	rtc_ms_delay(1000);
    162e:	88 ee       	ldi	r24, 0xE8	; 232
    1630:	93 e0       	ldi	r25, 0x03	; 3
    1632:	0e 94 87 01 	call	0x30e	; 0x30e <rtc_ms_delay>
	
	lcd_line_print(0,"initializing wifi");
    1636:	69 e7       	ldi	r22, 0x79	; 121
    1638:	78 e2       	ldi	r23, 0x28	; 40
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	0e 94 92 0a 	call	0x1524	; 0x1524 <lcd_line_print>
	esp8266_init();
    1642:	0e 94 2a 04 	call	0x854	; 0x854 <esp8266_init>


	esp8266_wifi_mode(1);
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	0e 94 1b 06 	call	0xc36	; 0xc36 <esp8266_wifi_mode>
	esp8266_check_wifi_mode();
    164c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <esp8266_check_wifi_mode>
		
	esp8266_multiple_connection_enable(1);
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	0e 94 8c 08 	call	0x1118	; 0x1118 <esp8266_multiple_connection_enable>
		
	ESP8266_available_AP_t myAPdata[10];
	int n = esp8266_list_access_points(myAPdata);
    1656:	ce 01       	movw	r24, r28
    1658:	0f 96       	adiw	r24, 0x0f	; 15
    165a:	0e 94 bb 06 	call	0xd76	; 0xd76 <esp8266_list_access_points>
    165e:	6c 01       	movw	r12, r24
		
	for(int i=0;i<n;i++){
    1660:	18 16       	cp	r1, r24
    1662:	19 06       	cpc	r1, r25
    1664:	0c f0       	brlt	.+2      	; 0x1668 <main+0xf6>
    1666:	51 c0       	rjmp	.+162    	; 0x170a <main+0x198>
    1668:	8e 01       	movw	r16, r28
    166a:	01 5f       	subi	r16, 0xF1	; 241
    166c:	1f 4f       	sbci	r17, 0xFF	; 255
    166e:	87 e3       	ldi	r24, 0x37	; 55
    1670:	8c 9d       	mul	r24, r12
    1672:	70 01       	movw	r14, r0
    1674:	8d 9d       	mul	r24, r13
    1676:	f0 0c       	add	r15, r0
    1678:	11 24       	eor	r1, r1
    167a:	e0 0e       	add	r14, r16
    167c:	f1 1e       	adc	r15, r17
	printf("AP INFO :%d,%s,%d,%s\n",myAPdata[i].ecn, myAPdata[i].ssid,myAPdata[i].sig_strength,myAPdata[i].mac );
    167e:	0f 2e       	mov	r0, r31
    1680:	fb e8       	ldi	r31, 0x8B	; 139
    1682:	af 2e       	mov	r10, r31
    1684:	f8 e2       	ldi	r31, 0x28	; 40
    1686:	bf 2e       	mov	r11, r31
    1688:	f0 2d       	mov	r31, r0
    168a:	c8 01       	movw	r24, r16
    168c:	83 96       	adiw	r24, 0x23	; 35
    168e:	9f 93       	push	r25
    1690:	8f 93       	push	r24
    1692:	f8 01       	movw	r30, r16
    1694:	82 a1       	ldd	r24, Z+34	; 0x22
    1696:	8f 93       	push	r24
    1698:	81 a1       	ldd	r24, Z+33	; 0x21
    169a:	8f 93       	push	r24
    169c:	c8 01       	movw	r24, r16
    169e:	01 96       	adiw	r24, 0x01	; 1
    16a0:	9f 93       	push	r25
    16a2:	8f 93       	push	r24
    16a4:	80 81       	ld	r24, Z
    16a6:	1f 92       	push	r1
    16a8:	8f 93       	push	r24
    16aa:	bf 92       	push	r11
    16ac:	af 92       	push	r10
    16ae:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <printf>
    16b2:	09 5c       	subi	r16, 0xC9	; 201
    16b4:	1f 4f       	sbci	r17, 0xFF	; 255
	esp8266_multiple_connection_enable(1);
		
	ESP8266_available_AP_t myAPdata[10];
	int n = esp8266_list_access_points(myAPdata);
		
	for(int i=0;i<n;i++){
    16b6:	cd bf       	out	0x3d, r28	; 61
    16b8:	de bf       	out	0x3e, r29	; 62
    16ba:	0e 15       	cp	r16, r14
    16bc:	1f 05       	cpc	r17, r15
    16be:	29 f7       	brne	.-54     	; 0x168a <main+0x118>
    16c0:	8e 01       	movw	r16, r28
    16c2:	00 5f       	subi	r16, 0xF0	; 240
    16c4:	1f 4f       	sbci	r17, 0xFF	; 255
    16c6:	e1 2c       	mov	r14, r1
    16c8:	f1 2c       	mov	r15, r1
    16ca:	a1 2c       	mov	r10, r1
    16cc:	b1 2c       	mov	r11, r1
	printf("AP INFO :%d,%s,%d,%s\n",myAPdata[i].ecn, myAPdata[i].ssid,myAPdata[i].sig_strength,myAPdata[i].mac );
	}
		
	int ssid_found_flag = 0;
	for(int i=0;i<n;i++){
		if(!strcmp(myAPdata[i].ssid,"Emon")){
    16ce:	6e ea       	ldi	r22, 0xAE	; 174
    16d0:	78 e2       	ldi	r23, 0x28	; 40
    16d2:	c8 01       	movw	r24, r16
    16d4:	0e 94 2d 0c 	call	0x185a	; 0x185a <strcmp>
    16d8:	89 2b       	or	r24, r25
    16da:	61 f4       	brne	.+24     	; 0x16f4 <main+0x182>
			printf("FOUND SSID : Emon\n");
    16dc:	81 ea       	ldi	r24, 0xA1	; 161
    16de:	98 e2       	ldi	r25, 0x28	; 40
    16e0:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <puts>
			esp8266_connect_access_points(myAPdata[i].ssid,"19031992");
    16e4:	63 eb       	ldi	r22, 0xB3	; 179
    16e6:	78 e2       	ldi	r23, 0x28	; 40
    16e8:	c8 01       	movw	r24, r16
    16ea:	0e 94 6c 07 	call	0xed8	; 0xed8 <esp8266_connect_access_points>
			ssid_found_flag = 1;
    16ee:	aa 24       	eor	r10, r10
    16f0:	a3 94       	inc	r10
    16f2:	b1 2c       	mov	r11, r1
	for(int i=0;i<n;i++){
	printf("AP INFO :%d,%s,%d,%s\n",myAPdata[i].ecn, myAPdata[i].ssid,myAPdata[i].sig_strength,myAPdata[i].mac );
	}
		
	int ssid_found_flag = 0;
	for(int i=0;i<n;i++){
    16f4:	9f ef       	ldi	r25, 0xFF	; 255
    16f6:	e9 1a       	sub	r14, r25
    16f8:	f9 0a       	sbc	r15, r25
    16fa:	09 5c       	subi	r16, 0xC9	; 201
    16fc:	1f 4f       	sbci	r17, 0xFF	; 255
    16fe:	ec 14       	cp	r14, r12
    1700:	fd 04       	cpc	r15, r13
    1702:	29 f7       	brne	.-54     	; 0x16ce <main+0x15c>
		}
		else{
				
		}
	}
	if(ssid_found_flag!= 1){
    1704:	aa 94       	dec	r10
    1706:	ab 28       	or	r10, r11
    1708:	21 f0       	breq	.+8      	; 0x1712 <main+0x1a0>
		printf("could not find SSID\n");
    170a:	8c eb       	ldi	r24, 0xBC	; 188
    170c:	98 e2       	ldi	r25, 0x28	; 40
    170e:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <puts>
	}
		
	char connected_ssid[32];
	esp8266_check_connected_access_points(connected_ssid);
    1712:	8e 01       	movw	r16, r28
    1714:	0b 5c       	subi	r16, 0xCB	; 203
    1716:	1d 4f       	sbci	r17, 0xFD	; 253
    1718:	c8 01       	movw	r24, r16
    171a:	0e 94 ca 07 	call	0xf94	; 0xf94 <esp8266_check_connected_access_points>
	printf("the connected SSID is %s\n",connected_ssid);
    171e:	1f 93       	push	r17
    1720:	0f 93       	push	r16
    1722:	80 ed       	ldi	r24, 0xD0	; 208
    1724:	98 e2       	ldi	r25, 0x28	; 40
    1726:	9f 93       	push	r25
    1728:	8f 93       	push	r24
    172a:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <printf>
	//esp8266_disconnect_access_points();
	
	
	char IPaddr[20];
	char MACaddr[30];	
	esp8266_get_IP(IPaddr);
    172e:	00 5e       	subi	r16, 0xE0	; 224
    1730:	1f 4f       	sbci	r17, 0xFF	; 255
    1732:	c8 01       	movw	r24, r16
    1734:	0e 94 16 08 	call	0x102c	; 0x102c <esp8266_get_IP>
	esp8266_get_MAC(MACaddr);
    1738:	7e 01       	movw	r14, r28
    173a:	f7 e9       	ldi	r31, 0x97	; 151
    173c:	ef 1a       	sub	r14, r31
    173e:	fd ef       	ldi	r31, 0xFD	; 253
    1740:	ff 0a       	sbc	r15, r31
    1742:	c7 01       	movw	r24, r14
    1744:	0e 94 51 08 	call	0x10a2	; 0x10a2 <esp8266_get_MAC>
	printf("YOU IP IS %s and MAC is %s\n",IPaddr,MACaddr);
    1748:	ff 92       	push	r15
    174a:	ef 92       	push	r14
    174c:	1f 93       	push	r17
    174e:	0f 93       	push	r16
    1750:	8a ee       	ldi	r24, 0xEA	; 234
    1752:	98 e2       	ldi	r25, 0x28	; 40
    1754:	9f 93       	push	r25
    1756:	8f 93       	push	r24
    1758:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <printf>
	lcd_line_print(1, IPaddr);
    175c:	b8 01       	movw	r22, r16
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	0e 94 92 0a 	call	0x1524	; 0x1524 <lcd_line_print>
	
	
	esp8266_set_server(8000);
    1766:	80 e4       	ldi	r24, 0x40	; 64
    1768:	9f e1       	ldi	r25, 0x1F	; 31
    176a:	0e 94 af 09 	call	0x135e	; 0x135e <esp8266_set_server>
	esp8266_check_server_timeout();
    176e:	0e 94 0b 0a 	call	0x1416	; 0x1416 <esp8266_check_server_timeout>
// 	}
	
	
	
	
	printf("DONE\n");
    1772:	86 e0       	ldi	r24, 0x06	; 6
    1774:	99 e2       	ldi	r25, 0x29	; 41
    1776:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <puts>
    177a:	cd bf       	out	0x3d, r28	; 61
    177c:	de bf       	out	0x3e, r29	; 62
    while (1) 
    {
		esp8266_check_connection_status(NULL);
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	0e 94 db 08 	call	0x11b6	; 0x11b6 <esp8266_check_connection_status>
		rtc_ms_delay(1000);
    1786:	88 ee       	ldi	r24, 0xE8	; 232
    1788:	93 e0       	ldi	r25, 0x03	; 3
    178a:	0e 94 87 01 	call	0x30e	; 0x30e <rtc_ms_delay>
// 					printf("unknown command\n");
// 				}

				
				
				esp8266_wait_receive();
    178e:	0e 94 c4 04 	call	0x988	; 0x988 <esp8266_wait_receive>

}
    1792:	f5 cf       	rjmp	.-22     	; 0x177e <main+0x20c>

00001794 <__udivmodsi4>:
    1794:	a1 e2       	ldi	r26, 0x21	; 33
    1796:	1a 2e       	mov	r1, r26
    1798:	aa 1b       	sub	r26, r26
    179a:	bb 1b       	sub	r27, r27
    179c:	fd 01       	movw	r30, r26
    179e:	0d c0       	rjmp	.+26     	; 0x17ba <__udivmodsi4_ep>

000017a0 <__udivmodsi4_loop>:
    17a0:	aa 1f       	adc	r26, r26
    17a2:	bb 1f       	adc	r27, r27
    17a4:	ee 1f       	adc	r30, r30
    17a6:	ff 1f       	adc	r31, r31
    17a8:	a2 17       	cp	r26, r18
    17aa:	b3 07       	cpc	r27, r19
    17ac:	e4 07       	cpc	r30, r20
    17ae:	f5 07       	cpc	r31, r21
    17b0:	20 f0       	brcs	.+8      	; 0x17ba <__udivmodsi4_ep>
    17b2:	a2 1b       	sub	r26, r18
    17b4:	b3 0b       	sbc	r27, r19
    17b6:	e4 0b       	sbc	r30, r20
    17b8:	f5 0b       	sbc	r31, r21

000017ba <__udivmodsi4_ep>:
    17ba:	66 1f       	adc	r22, r22
    17bc:	77 1f       	adc	r23, r23
    17be:	88 1f       	adc	r24, r24
    17c0:	99 1f       	adc	r25, r25
    17c2:	1a 94       	dec	r1
    17c4:	69 f7       	brne	.-38     	; 0x17a0 <__udivmodsi4_loop>
    17c6:	60 95       	com	r22
    17c8:	70 95       	com	r23
    17ca:	80 95       	com	r24
    17cc:	90 95       	com	r25
    17ce:	9b 01       	movw	r18, r22
    17d0:	ac 01       	movw	r20, r24
    17d2:	bd 01       	movw	r22, r26
    17d4:	cf 01       	movw	r24, r30
    17d6:	08 95       	ret

000017d8 <__divmodsi4>:
    17d8:	05 2e       	mov	r0, r21
    17da:	97 fb       	bst	r25, 7
    17dc:	1e f4       	brtc	.+6      	; 0x17e4 <__divmodsi4+0xc>
    17de:	00 94       	com	r0
    17e0:	0e 94 03 0c 	call	0x1806	; 0x1806 <__negsi2>
    17e4:	57 fd       	sbrc	r21, 7
    17e6:	07 d0       	rcall	.+14     	; 0x17f6 <__divmodsi4_neg2>
    17e8:	0e 94 ca 0b 	call	0x1794	; 0x1794 <__udivmodsi4>
    17ec:	07 fc       	sbrc	r0, 7
    17ee:	03 d0       	rcall	.+6      	; 0x17f6 <__divmodsi4_neg2>
    17f0:	4e f4       	brtc	.+18     	; 0x1804 <__divmodsi4_exit>
    17f2:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <__negsi2>

000017f6 <__divmodsi4_neg2>:
    17f6:	50 95       	com	r21
    17f8:	40 95       	com	r20
    17fa:	30 95       	com	r19
    17fc:	21 95       	neg	r18
    17fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1800:	4f 4f       	sbci	r20, 0xFF	; 255
    1802:	5f 4f       	sbci	r21, 0xFF	; 255

00001804 <__divmodsi4_exit>:
    1804:	08 95       	ret

00001806 <__negsi2>:
    1806:	90 95       	com	r25
    1808:	80 95       	com	r24
    180a:	70 95       	com	r23
    180c:	61 95       	neg	r22
    180e:	7f 4f       	sbci	r23, 0xFF	; 255
    1810:	8f 4f       	sbci	r24, 0xFF	; 255
    1812:	9f 4f       	sbci	r25, 0xFF	; 255
    1814:	08 95       	ret

00001816 <atoi>:
    1816:	fc 01       	movw	r30, r24
    1818:	88 27       	eor	r24, r24
    181a:	99 27       	eor	r25, r25
    181c:	e8 94       	clt
    181e:	21 91       	ld	r18, Z+
    1820:	20 32       	cpi	r18, 0x20	; 32
    1822:	e9 f3       	breq	.-6      	; 0x181e <atoi+0x8>
    1824:	29 30       	cpi	r18, 0x09	; 9
    1826:	10 f0       	brcs	.+4      	; 0x182c <atoi+0x16>
    1828:	2e 30       	cpi	r18, 0x0E	; 14
    182a:	c8 f3       	brcs	.-14     	; 0x181e <atoi+0x8>
    182c:	2b 32       	cpi	r18, 0x2B	; 43
    182e:	41 f0       	breq	.+16     	; 0x1840 <atoi+0x2a>
    1830:	2d 32       	cpi	r18, 0x2D	; 45
    1832:	39 f4       	brne	.+14     	; 0x1842 <atoi+0x2c>
    1834:	68 94       	set
    1836:	04 c0       	rjmp	.+8      	; 0x1840 <atoi+0x2a>
    1838:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <__mulhi_const_10>
    183c:	82 0f       	add	r24, r18
    183e:	91 1d       	adc	r25, r1
    1840:	21 91       	ld	r18, Z+
    1842:	20 53       	subi	r18, 0x30	; 48
    1844:	2a 30       	cpi	r18, 0x0A	; 10
    1846:	c0 f3       	brcs	.-16     	; 0x1838 <atoi+0x22>
    1848:	1e f4       	brtc	.+6      	; 0x1850 <atoi+0x3a>
    184a:	90 95       	com	r25
    184c:	81 95       	neg	r24
    184e:	9f 4f       	sbci	r25, 0xFF	; 255
    1850:	08 95       	ret

00001852 <strtok>:
    1852:	4c e0       	ldi	r20, 0x0C	; 12
    1854:	59 e2       	ldi	r21, 0x29	; 41
    1856:	0c 94 3d 0c 	jmp	0x187a	; 0x187a <strtok_r>

0000185a <strcmp>:
    185a:	fb 01       	movw	r30, r22
    185c:	dc 01       	movw	r26, r24
    185e:	8d 91       	ld	r24, X+
    1860:	01 90       	ld	r0, Z+
    1862:	80 19       	sub	r24, r0
    1864:	01 10       	cpse	r0, r1
    1866:	d9 f3       	breq	.-10     	; 0x185e <strcmp+0x4>
    1868:	99 0b       	sbc	r25, r25
    186a:	08 95       	ret

0000186c <strcpy>:
    186c:	fb 01       	movw	r30, r22
    186e:	dc 01       	movw	r26, r24
    1870:	01 90       	ld	r0, Z+
    1872:	0d 92       	st	X+, r0
    1874:	00 20       	and	r0, r0
    1876:	e1 f7       	brne	.-8      	; 0x1870 <strcpy+0x4>
    1878:	08 95       	ret

0000187a <strtok_r>:
    187a:	fa 01       	movw	r30, r20
    187c:	a1 91       	ld	r26, Z+
    187e:	b0 81       	ld	r27, Z
    1880:	00 97       	sbiw	r24, 0x00	; 0
    1882:	19 f4       	brne	.+6      	; 0x188a <strtok_r+0x10>
    1884:	10 97       	sbiw	r26, 0x00	; 0
    1886:	e1 f0       	breq	.+56     	; 0x18c0 <strtok_r+0x46>
    1888:	cd 01       	movw	r24, r26
    188a:	dc 01       	movw	r26, r24
    188c:	cd 01       	movw	r24, r26
    188e:	0d 90       	ld	r0, X+
    1890:	00 20       	and	r0, r0
    1892:	11 f4       	brne	.+4      	; 0x1898 <strtok_r+0x1e>
    1894:	c0 01       	movw	r24, r0
    1896:	13 c0       	rjmp	.+38     	; 0x18be <strtok_r+0x44>
    1898:	fb 01       	movw	r30, r22
    189a:	21 91       	ld	r18, Z+
    189c:	22 23       	and	r18, r18
    189e:	19 f0       	breq	.+6      	; 0x18a6 <strtok_r+0x2c>
    18a0:	20 15       	cp	r18, r0
    18a2:	d9 f7       	brne	.-10     	; 0x189a <strtok_r+0x20>
    18a4:	f3 cf       	rjmp	.-26     	; 0x188c <strtok_r+0x12>
    18a6:	fb 01       	movw	r30, r22
    18a8:	21 91       	ld	r18, Z+
    18aa:	20 15       	cp	r18, r0
    18ac:	19 f4       	brne	.+6      	; 0x18b4 <strtok_r+0x3a>
    18ae:	1e 92       	st	-X, r1
    18b0:	11 96       	adiw	r26, 0x01	; 1
    18b2:	06 c0       	rjmp	.+12     	; 0x18c0 <strtok_r+0x46>
    18b4:	22 23       	and	r18, r18
    18b6:	c1 f7       	brne	.-16     	; 0x18a8 <strtok_r+0x2e>
    18b8:	0d 90       	ld	r0, X+
    18ba:	00 20       	and	r0, r0
    18bc:	a1 f7       	brne	.-24     	; 0x18a6 <strtok_r+0x2c>
    18be:	d0 01       	movw	r26, r0
    18c0:	fa 01       	movw	r30, r20
    18c2:	a1 93       	st	Z+, r26
    18c4:	b0 83       	st	Z, r27
    18c6:	08 95       	ret

000018c8 <__mulhi_const_10>:
    18c8:	7a e0       	ldi	r23, 0x0A	; 10
    18ca:	97 9f       	mul	r25, r23
    18cc:	90 2d       	mov	r25, r0
    18ce:	87 9f       	mul	r24, r23
    18d0:	80 2d       	mov	r24, r0
    18d2:	91 0d       	add	r25, r1
    18d4:	11 24       	eor	r1, r1
    18d6:	08 95       	ret

000018d8 <fprintf>:
    18d8:	cf 93       	push	r28
    18da:	df 93       	push	r29
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
    18e0:	ae 01       	movw	r20, r28
    18e2:	46 5f       	subi	r20, 0xF6	; 246
    18e4:	5f 4f       	sbci	r21, 0xFF	; 255
    18e6:	68 85       	ldd	r22, Y+8	; 0x08
    18e8:	79 85       	ldd	r23, Y+9	; 0x09
    18ea:	8e 81       	ldd	r24, Y+6	; 0x06
    18ec:	9f 81       	ldd	r25, Y+7	; 0x07
    18ee:	0e 94 56 0d 	call	0x1aac	; 0x1aac <vfprintf>
    18f2:	df 91       	pop	r29
    18f4:	cf 91       	pop	r28
    18f6:	08 95       	ret

000018f8 <fputc>:
    18f8:	0f 93       	push	r16
    18fa:	1f 93       	push	r17
    18fc:	cf 93       	push	r28
    18fe:	df 93       	push	r29
    1900:	fb 01       	movw	r30, r22
    1902:	23 81       	ldd	r18, Z+3	; 0x03
    1904:	21 fd       	sbrc	r18, 1
    1906:	03 c0       	rjmp	.+6      	; 0x190e <fputc+0x16>
    1908:	8f ef       	ldi	r24, 0xFF	; 255
    190a:	9f ef       	ldi	r25, 0xFF	; 255
    190c:	28 c0       	rjmp	.+80     	; 0x195e <fputc+0x66>
    190e:	22 ff       	sbrs	r18, 2
    1910:	16 c0       	rjmp	.+44     	; 0x193e <fputc+0x46>
    1912:	46 81       	ldd	r20, Z+6	; 0x06
    1914:	57 81       	ldd	r21, Z+7	; 0x07
    1916:	24 81       	ldd	r18, Z+4	; 0x04
    1918:	35 81       	ldd	r19, Z+5	; 0x05
    191a:	42 17       	cp	r20, r18
    191c:	53 07       	cpc	r21, r19
    191e:	44 f4       	brge	.+16     	; 0x1930 <fputc+0x38>
    1920:	a0 81       	ld	r26, Z
    1922:	b1 81       	ldd	r27, Z+1	; 0x01
    1924:	9d 01       	movw	r18, r26
    1926:	2f 5f       	subi	r18, 0xFF	; 255
    1928:	3f 4f       	sbci	r19, 0xFF	; 255
    192a:	20 83       	st	Z, r18
    192c:	31 83       	std	Z+1, r19	; 0x01
    192e:	8c 93       	st	X, r24
    1930:	26 81       	ldd	r18, Z+6	; 0x06
    1932:	37 81       	ldd	r19, Z+7	; 0x07
    1934:	2f 5f       	subi	r18, 0xFF	; 255
    1936:	3f 4f       	sbci	r19, 0xFF	; 255
    1938:	26 83       	std	Z+6, r18	; 0x06
    193a:	37 83       	std	Z+7, r19	; 0x07
    193c:	10 c0       	rjmp	.+32     	; 0x195e <fputc+0x66>
    193e:	eb 01       	movw	r28, r22
    1940:	09 2f       	mov	r16, r25
    1942:	18 2f       	mov	r17, r24
    1944:	00 84       	ldd	r0, Z+8	; 0x08
    1946:	f1 85       	ldd	r31, Z+9	; 0x09
    1948:	e0 2d       	mov	r30, r0
    194a:	19 95       	eicall
    194c:	89 2b       	or	r24, r25
    194e:	e1 f6       	brne	.-72     	; 0x1908 <fputc+0x10>
    1950:	8e 81       	ldd	r24, Y+6	; 0x06
    1952:	9f 81       	ldd	r25, Y+7	; 0x07
    1954:	01 96       	adiw	r24, 0x01	; 1
    1956:	8e 83       	std	Y+6, r24	; 0x06
    1958:	9f 83       	std	Y+7, r25	; 0x07
    195a:	81 2f       	mov	r24, r17
    195c:	90 2f       	mov	r25, r16
    195e:	df 91       	pop	r29
    1960:	cf 91       	pop	r28
    1962:	1f 91       	pop	r17
    1964:	0f 91       	pop	r16
    1966:	08 95       	ret

00001968 <fwrite>:
    1968:	8f 92       	push	r8
    196a:	9f 92       	push	r9
    196c:	af 92       	push	r10
    196e:	bf 92       	push	r11
    1970:	cf 92       	push	r12
    1972:	df 92       	push	r13
    1974:	ef 92       	push	r14
    1976:	ff 92       	push	r15
    1978:	0f 93       	push	r16
    197a:	1f 93       	push	r17
    197c:	cf 93       	push	r28
    197e:	df 93       	push	r29
    1980:	5b 01       	movw	r10, r22
    1982:	4a 01       	movw	r8, r20
    1984:	79 01       	movw	r14, r18
    1986:	d9 01       	movw	r26, r18
    1988:	13 96       	adiw	r26, 0x03	; 3
    198a:	2c 91       	ld	r18, X
    198c:	21 ff       	sbrs	r18, 1
    198e:	1d c0       	rjmp	.+58     	; 0x19ca <fwrite+0x62>
    1990:	c0 e0       	ldi	r28, 0x00	; 0
    1992:	d0 e0       	ldi	r29, 0x00	; 0
    1994:	c8 15       	cp	r28, r8
    1996:	d9 05       	cpc	r29, r9
    1998:	d9 f0       	breq	.+54     	; 0x19d0 <fwrite+0x68>
    199a:	8c 01       	movw	r16, r24
    199c:	6c 01       	movw	r12, r24
    199e:	ca 0c       	add	r12, r10
    19a0:	db 1c       	adc	r13, r11
    19a2:	c8 01       	movw	r24, r16
    19a4:	0c 15       	cp	r16, r12
    19a6:	1d 05       	cpc	r17, r13
    19a8:	71 f0       	breq	.+28     	; 0x19c6 <fwrite+0x5e>
    19aa:	0f 5f       	subi	r16, 0xFF	; 255
    19ac:	1f 4f       	sbci	r17, 0xFF	; 255
    19ae:	d7 01       	movw	r26, r14
    19b0:	18 96       	adiw	r26, 0x08	; 8
    19b2:	ed 91       	ld	r30, X+
    19b4:	fc 91       	ld	r31, X
    19b6:	19 97       	sbiw	r26, 0x09	; 9
    19b8:	b7 01       	movw	r22, r14
    19ba:	dc 01       	movw	r26, r24
    19bc:	8c 91       	ld	r24, X
    19be:	19 95       	eicall
    19c0:	89 2b       	or	r24, r25
    19c2:	79 f3       	breq	.-34     	; 0x19a2 <fwrite+0x3a>
    19c4:	05 c0       	rjmp	.+10     	; 0x19d0 <fwrite+0x68>
    19c6:	21 96       	adiw	r28, 0x01	; 1
    19c8:	e5 cf       	rjmp	.-54     	; 0x1994 <fwrite+0x2c>
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	01 c0       	rjmp	.+2      	; 0x19d2 <fwrite+0x6a>
    19d0:	ce 01       	movw	r24, r28
    19d2:	df 91       	pop	r29
    19d4:	cf 91       	pop	r28
    19d6:	1f 91       	pop	r17
    19d8:	0f 91       	pop	r16
    19da:	ff 90       	pop	r15
    19dc:	ef 90       	pop	r14
    19de:	df 90       	pop	r13
    19e0:	cf 90       	pop	r12
    19e2:	bf 90       	pop	r11
    19e4:	af 90       	pop	r10
    19e6:	9f 90       	pop	r9
    19e8:	8f 90       	pop	r8
    19ea:	08 95       	ret

000019ec <printf>:
    19ec:	cf 93       	push	r28
    19ee:	df 93       	push	r29
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    19f4:	ae 01       	movw	r20, r28
    19f6:	4a 5f       	subi	r20, 0xFA	; 250
    19f8:	5f 4f       	sbci	r21, 0xFF	; 255
    19fa:	fa 01       	movw	r30, r20
    19fc:	61 91       	ld	r22, Z+
    19fe:	71 91       	ld	r23, Z+
    1a00:	af 01       	movw	r20, r30
    1a02:	80 91 bc 2c 	lds	r24, 0x2CBC
    1a06:	90 91 bd 2c 	lds	r25, 0x2CBD
    1a0a:	0e 94 56 0d 	call	0x1aac	; 0x1aac <vfprintf>
    1a0e:	df 91       	pop	r29
    1a10:	cf 91       	pop	r28
    1a12:	08 95       	ret

00001a14 <puts>:
    1a14:	0f 93       	push	r16
    1a16:	1f 93       	push	r17
    1a18:	cf 93       	push	r28
    1a1a:	df 93       	push	r29
    1a1c:	e0 91 bc 2c 	lds	r30, 0x2CBC
    1a20:	f0 91 bd 2c 	lds	r31, 0x2CBD
    1a24:	23 81       	ldd	r18, Z+3	; 0x03
    1a26:	21 ff       	sbrs	r18, 1
    1a28:	1b c0       	rjmp	.+54     	; 0x1a60 <puts+0x4c>
    1a2a:	8c 01       	movw	r16, r24
    1a2c:	d0 e0       	ldi	r29, 0x00	; 0
    1a2e:	c0 e0       	ldi	r28, 0x00	; 0
    1a30:	f8 01       	movw	r30, r16
    1a32:	81 91       	ld	r24, Z+
    1a34:	8f 01       	movw	r16, r30
    1a36:	60 91 bc 2c 	lds	r22, 0x2CBC
    1a3a:	70 91 bd 2c 	lds	r23, 0x2CBD
    1a3e:	db 01       	movw	r26, r22
    1a40:	18 96       	adiw	r26, 0x08	; 8
    1a42:	ed 91       	ld	r30, X+
    1a44:	fc 91       	ld	r31, X
    1a46:	19 97       	sbiw	r26, 0x09	; 9
    1a48:	88 23       	and	r24, r24
    1a4a:	31 f0       	breq	.+12     	; 0x1a58 <puts+0x44>
    1a4c:	19 95       	eicall
    1a4e:	89 2b       	or	r24, r25
    1a50:	79 f3       	breq	.-34     	; 0x1a30 <puts+0x1c>
    1a52:	df ef       	ldi	r29, 0xFF	; 255
    1a54:	cf ef       	ldi	r28, 0xFF	; 255
    1a56:	ec cf       	rjmp	.-40     	; 0x1a30 <puts+0x1c>
    1a58:	8a e0       	ldi	r24, 0x0A	; 10
    1a5a:	19 95       	eicall
    1a5c:	89 2b       	or	r24, r25
    1a5e:	19 f0       	breq	.+6      	; 0x1a66 <puts+0x52>
    1a60:	8f ef       	ldi	r24, 0xFF	; 255
    1a62:	9f ef       	ldi	r25, 0xFF	; 255
    1a64:	02 c0       	rjmp	.+4      	; 0x1a6a <puts+0x56>
    1a66:	8d 2f       	mov	r24, r29
    1a68:	9c 2f       	mov	r25, r28
    1a6a:	df 91       	pop	r29
    1a6c:	cf 91       	pop	r28
    1a6e:	1f 91       	pop	r17
    1a70:	0f 91       	pop	r16
    1a72:	08 95       	ret

00001a74 <sscanf>:
    1a74:	cf 93       	push	r28
    1a76:	df 93       	push	r29
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
    1a7c:	2e 97       	sbiw	r28, 0x0e	; 14
    1a7e:	cd bf       	out	0x3d, r28	; 61
    1a80:	de bf       	out	0x3e, r29	; 62
    1a82:	85 e0       	ldi	r24, 0x05	; 5
    1a84:	8c 83       	std	Y+4, r24	; 0x04
    1a86:	8c 89       	ldd	r24, Y+20	; 0x14
    1a88:	9d 89       	ldd	r25, Y+21	; 0x15
    1a8a:	89 83       	std	Y+1, r24	; 0x01
    1a8c:	9a 83       	std	Y+2, r25	; 0x02
    1a8e:	ae 01       	movw	r20, r28
    1a90:	48 5e       	subi	r20, 0xE8	; 232
    1a92:	5f 4f       	sbci	r21, 0xFF	; 255
    1a94:	6e 89       	ldd	r22, Y+22	; 0x16
    1a96:	7f 89       	ldd	r23, Y+23	; 0x17
    1a98:	ce 01       	movw	r24, r28
    1a9a:	01 96       	adiw	r24, 0x01	; 1
    1a9c:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <vfscanf>
    1aa0:	2e 96       	adiw	r28, 0x0e	; 14
    1aa2:	cd bf       	out	0x3d, r28	; 61
    1aa4:	de bf       	out	0x3e, r29	; 62
    1aa6:	df 91       	pop	r29
    1aa8:	cf 91       	pop	r28
    1aaa:	08 95       	ret

00001aac <vfprintf>:
    1aac:	2f 92       	push	r2
    1aae:	3f 92       	push	r3
    1ab0:	4f 92       	push	r4
    1ab2:	5f 92       	push	r5
    1ab4:	6f 92       	push	r6
    1ab6:	7f 92       	push	r7
    1ab8:	8f 92       	push	r8
    1aba:	9f 92       	push	r9
    1abc:	af 92       	push	r10
    1abe:	bf 92       	push	r11
    1ac0:	cf 92       	push	r12
    1ac2:	df 92       	push	r13
    1ac4:	ef 92       	push	r14
    1ac6:	ff 92       	push	r15
    1ac8:	0f 93       	push	r16
    1aca:	1f 93       	push	r17
    1acc:	cf 93       	push	r28
    1ace:	df 93       	push	r29
    1ad0:	cd b7       	in	r28, 0x3d	; 61
    1ad2:	de b7       	in	r29, 0x3e	; 62
    1ad4:	2c 97       	sbiw	r28, 0x0c	; 12
    1ad6:	cd bf       	out	0x3d, r28	; 61
    1ad8:	de bf       	out	0x3e, r29	; 62
    1ada:	7c 01       	movw	r14, r24
    1adc:	6b 01       	movw	r12, r22
    1ade:	8a 01       	movw	r16, r20
    1ae0:	fc 01       	movw	r30, r24
    1ae2:	16 82       	std	Z+6, r1	; 0x06
    1ae4:	17 82       	std	Z+7, r1	; 0x07
    1ae6:	83 81       	ldd	r24, Z+3	; 0x03
    1ae8:	81 ff       	sbrs	r24, 1
    1aea:	bd c1       	rjmp	.+890    	; 0x1e66 <vfprintf+0x3ba>
    1aec:	ce 01       	movw	r24, r28
    1aee:	01 96       	adiw	r24, 0x01	; 1
    1af0:	4c 01       	movw	r8, r24
    1af2:	f7 01       	movw	r30, r14
    1af4:	93 81       	ldd	r25, Z+3	; 0x03
    1af6:	f6 01       	movw	r30, r12
    1af8:	93 fd       	sbrc	r25, 3
    1afa:	85 91       	lpm	r24, Z+
    1afc:	93 ff       	sbrs	r25, 3
    1afe:	81 91       	ld	r24, Z+
    1b00:	6f 01       	movw	r12, r30
    1b02:	88 23       	and	r24, r24
    1b04:	09 f4       	brne	.+2      	; 0x1b08 <vfprintf+0x5c>
    1b06:	ab c1       	rjmp	.+854    	; 0x1e5e <vfprintf+0x3b2>
    1b08:	85 32       	cpi	r24, 0x25	; 37
    1b0a:	39 f4       	brne	.+14     	; 0x1b1a <vfprintf+0x6e>
    1b0c:	93 fd       	sbrc	r25, 3
    1b0e:	85 91       	lpm	r24, Z+
    1b10:	93 ff       	sbrs	r25, 3
    1b12:	81 91       	ld	r24, Z+
    1b14:	6f 01       	movw	r12, r30
    1b16:	85 32       	cpi	r24, 0x25	; 37
    1b18:	29 f4       	brne	.+10     	; 0x1b24 <vfprintf+0x78>
    1b1a:	b7 01       	movw	r22, r14
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <fputc>
    1b22:	e7 cf       	rjmp	.-50     	; 0x1af2 <vfprintf+0x46>
    1b24:	51 2c       	mov	r5, r1
    1b26:	31 2c       	mov	r3, r1
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	20 32       	cpi	r18, 0x20	; 32
    1b2c:	a0 f4       	brcc	.+40     	; 0x1b56 <vfprintf+0xaa>
    1b2e:	8b 32       	cpi	r24, 0x2B	; 43
    1b30:	69 f0       	breq	.+26     	; 0x1b4c <vfprintf+0xa0>
    1b32:	30 f4       	brcc	.+12     	; 0x1b40 <vfprintf+0x94>
    1b34:	80 32       	cpi	r24, 0x20	; 32
    1b36:	59 f0       	breq	.+22     	; 0x1b4e <vfprintf+0xa2>
    1b38:	83 32       	cpi	r24, 0x23	; 35
    1b3a:	69 f4       	brne	.+26     	; 0x1b56 <vfprintf+0xaa>
    1b3c:	20 61       	ori	r18, 0x10	; 16
    1b3e:	2c c0       	rjmp	.+88     	; 0x1b98 <vfprintf+0xec>
    1b40:	8d 32       	cpi	r24, 0x2D	; 45
    1b42:	39 f0       	breq	.+14     	; 0x1b52 <vfprintf+0xa6>
    1b44:	80 33       	cpi	r24, 0x30	; 48
    1b46:	39 f4       	brne	.+14     	; 0x1b56 <vfprintf+0xaa>
    1b48:	21 60       	ori	r18, 0x01	; 1
    1b4a:	26 c0       	rjmp	.+76     	; 0x1b98 <vfprintf+0xec>
    1b4c:	22 60       	ori	r18, 0x02	; 2
    1b4e:	24 60       	ori	r18, 0x04	; 4
    1b50:	23 c0       	rjmp	.+70     	; 0x1b98 <vfprintf+0xec>
    1b52:	28 60       	ori	r18, 0x08	; 8
    1b54:	21 c0       	rjmp	.+66     	; 0x1b98 <vfprintf+0xec>
    1b56:	27 fd       	sbrc	r18, 7
    1b58:	27 c0       	rjmp	.+78     	; 0x1ba8 <vfprintf+0xfc>
    1b5a:	30 ed       	ldi	r19, 0xD0	; 208
    1b5c:	38 0f       	add	r19, r24
    1b5e:	3a 30       	cpi	r19, 0x0A	; 10
    1b60:	78 f4       	brcc	.+30     	; 0x1b80 <vfprintf+0xd4>
    1b62:	26 ff       	sbrs	r18, 6
    1b64:	06 c0       	rjmp	.+12     	; 0x1b72 <vfprintf+0xc6>
    1b66:	fa e0       	ldi	r31, 0x0A	; 10
    1b68:	5f 9e       	mul	r5, r31
    1b6a:	30 0d       	add	r19, r0
    1b6c:	11 24       	eor	r1, r1
    1b6e:	53 2e       	mov	r5, r19
    1b70:	13 c0       	rjmp	.+38     	; 0x1b98 <vfprintf+0xec>
    1b72:	8a e0       	ldi	r24, 0x0A	; 10
    1b74:	38 9e       	mul	r3, r24
    1b76:	30 0d       	add	r19, r0
    1b78:	11 24       	eor	r1, r1
    1b7a:	33 2e       	mov	r3, r19
    1b7c:	20 62       	ori	r18, 0x20	; 32
    1b7e:	0c c0       	rjmp	.+24     	; 0x1b98 <vfprintf+0xec>
    1b80:	8e 32       	cpi	r24, 0x2E	; 46
    1b82:	21 f4       	brne	.+8      	; 0x1b8c <vfprintf+0xe0>
    1b84:	26 fd       	sbrc	r18, 6
    1b86:	6b c1       	rjmp	.+726    	; 0x1e5e <vfprintf+0x3b2>
    1b88:	20 64       	ori	r18, 0x40	; 64
    1b8a:	06 c0       	rjmp	.+12     	; 0x1b98 <vfprintf+0xec>
    1b8c:	8c 36       	cpi	r24, 0x6C	; 108
    1b8e:	11 f4       	brne	.+4      	; 0x1b94 <vfprintf+0xe8>
    1b90:	20 68       	ori	r18, 0x80	; 128
    1b92:	02 c0       	rjmp	.+4      	; 0x1b98 <vfprintf+0xec>
    1b94:	88 36       	cpi	r24, 0x68	; 104
    1b96:	41 f4       	brne	.+16     	; 0x1ba8 <vfprintf+0xfc>
    1b98:	f6 01       	movw	r30, r12
    1b9a:	93 fd       	sbrc	r25, 3
    1b9c:	85 91       	lpm	r24, Z+
    1b9e:	93 ff       	sbrs	r25, 3
    1ba0:	81 91       	ld	r24, Z+
    1ba2:	6f 01       	movw	r12, r30
    1ba4:	81 11       	cpse	r24, r1
    1ba6:	c1 cf       	rjmp	.-126    	; 0x1b2a <vfprintf+0x7e>
    1ba8:	98 2f       	mov	r25, r24
    1baa:	9f 7d       	andi	r25, 0xDF	; 223
    1bac:	95 54       	subi	r25, 0x45	; 69
    1bae:	93 30       	cpi	r25, 0x03	; 3
    1bb0:	28 f4       	brcc	.+10     	; 0x1bbc <vfprintf+0x110>
    1bb2:	0c 5f       	subi	r16, 0xFC	; 252
    1bb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb6:	ff e3       	ldi	r31, 0x3F	; 63
    1bb8:	f9 83       	std	Y+1, r31	; 0x01
    1bba:	0d c0       	rjmp	.+26     	; 0x1bd6 <vfprintf+0x12a>
    1bbc:	83 36       	cpi	r24, 0x63	; 99
    1bbe:	31 f0       	breq	.+12     	; 0x1bcc <vfprintf+0x120>
    1bc0:	83 37       	cpi	r24, 0x73	; 115
    1bc2:	71 f0       	breq	.+28     	; 0x1be0 <vfprintf+0x134>
    1bc4:	83 35       	cpi	r24, 0x53	; 83
    1bc6:	09 f0       	breq	.+2      	; 0x1bca <vfprintf+0x11e>
    1bc8:	5b c0       	rjmp	.+182    	; 0x1c80 <vfprintf+0x1d4>
    1bca:	22 c0       	rjmp	.+68     	; 0x1c10 <vfprintf+0x164>
    1bcc:	f8 01       	movw	r30, r16
    1bce:	80 81       	ld	r24, Z
    1bd0:	89 83       	std	Y+1, r24	; 0x01
    1bd2:	0e 5f       	subi	r16, 0xFE	; 254
    1bd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd6:	44 24       	eor	r4, r4
    1bd8:	43 94       	inc	r4
    1bda:	51 2c       	mov	r5, r1
    1bdc:	54 01       	movw	r10, r8
    1bde:	15 c0       	rjmp	.+42     	; 0x1c0a <vfprintf+0x15e>
    1be0:	38 01       	movw	r6, r16
    1be2:	f2 e0       	ldi	r31, 0x02	; 2
    1be4:	6f 0e       	add	r6, r31
    1be6:	71 1c       	adc	r7, r1
    1be8:	f8 01       	movw	r30, r16
    1bea:	a0 80       	ld	r10, Z
    1bec:	b1 80       	ldd	r11, Z+1	; 0x01
    1bee:	26 ff       	sbrs	r18, 6
    1bf0:	03 c0       	rjmp	.+6      	; 0x1bf8 <vfprintf+0x14c>
    1bf2:	65 2d       	mov	r22, r5
    1bf4:	70 e0       	ldi	r23, 0x00	; 0
    1bf6:	02 c0       	rjmp	.+4      	; 0x1bfc <vfprintf+0x150>
    1bf8:	6f ef       	ldi	r22, 0xFF	; 255
    1bfa:	7f ef       	ldi	r23, 0xFF	; 255
    1bfc:	c5 01       	movw	r24, r10
    1bfe:	2c 87       	std	Y+12, r18	; 0x0c
    1c00:	0e 94 46 12 	call	0x248c	; 0x248c <strnlen>
    1c04:	2c 01       	movw	r4, r24
    1c06:	83 01       	movw	r16, r6
    1c08:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c0a:	2f 77       	andi	r18, 0x7F	; 127
    1c0c:	22 2e       	mov	r2, r18
    1c0e:	17 c0       	rjmp	.+46     	; 0x1c3e <vfprintf+0x192>
    1c10:	38 01       	movw	r6, r16
    1c12:	f2 e0       	ldi	r31, 0x02	; 2
    1c14:	6f 0e       	add	r6, r31
    1c16:	71 1c       	adc	r7, r1
    1c18:	f8 01       	movw	r30, r16
    1c1a:	a0 80       	ld	r10, Z
    1c1c:	b1 80       	ldd	r11, Z+1	; 0x01
    1c1e:	26 ff       	sbrs	r18, 6
    1c20:	03 c0       	rjmp	.+6      	; 0x1c28 <vfprintf+0x17c>
    1c22:	65 2d       	mov	r22, r5
    1c24:	70 e0       	ldi	r23, 0x00	; 0
    1c26:	02 c0       	rjmp	.+4      	; 0x1c2c <vfprintf+0x180>
    1c28:	6f ef       	ldi	r22, 0xFF	; 255
    1c2a:	7f ef       	ldi	r23, 0xFF	; 255
    1c2c:	c5 01       	movw	r24, r10
    1c2e:	2c 87       	std	Y+12, r18	; 0x0c
    1c30:	0e 94 3b 12 	call	0x2476	; 0x2476 <strnlen_P>
    1c34:	2c 01       	movw	r4, r24
    1c36:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c38:	20 68       	ori	r18, 0x80	; 128
    1c3a:	22 2e       	mov	r2, r18
    1c3c:	83 01       	movw	r16, r6
    1c3e:	23 fc       	sbrc	r2, 3
    1c40:	1b c0       	rjmp	.+54     	; 0x1c78 <vfprintf+0x1cc>
    1c42:	83 2d       	mov	r24, r3
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	48 16       	cp	r4, r24
    1c48:	59 06       	cpc	r5, r25
    1c4a:	b0 f4       	brcc	.+44     	; 0x1c78 <vfprintf+0x1cc>
    1c4c:	b7 01       	movw	r22, r14
    1c4e:	80 e2       	ldi	r24, 0x20	; 32
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <fputc>
    1c56:	3a 94       	dec	r3
    1c58:	f4 cf       	rjmp	.-24     	; 0x1c42 <vfprintf+0x196>
    1c5a:	f5 01       	movw	r30, r10
    1c5c:	27 fc       	sbrc	r2, 7
    1c5e:	85 91       	lpm	r24, Z+
    1c60:	27 fe       	sbrs	r2, 7
    1c62:	81 91       	ld	r24, Z+
    1c64:	5f 01       	movw	r10, r30
    1c66:	b7 01       	movw	r22, r14
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <fputc>
    1c6e:	31 10       	cpse	r3, r1
    1c70:	3a 94       	dec	r3
    1c72:	f1 e0       	ldi	r31, 0x01	; 1
    1c74:	4f 1a       	sub	r4, r31
    1c76:	51 08       	sbc	r5, r1
    1c78:	41 14       	cp	r4, r1
    1c7a:	51 04       	cpc	r5, r1
    1c7c:	71 f7       	brne	.-36     	; 0x1c5a <vfprintf+0x1ae>
    1c7e:	e5 c0       	rjmp	.+458    	; 0x1e4a <vfprintf+0x39e>
    1c80:	84 36       	cpi	r24, 0x64	; 100
    1c82:	11 f0       	breq	.+4      	; 0x1c88 <vfprintf+0x1dc>
    1c84:	89 36       	cpi	r24, 0x69	; 105
    1c86:	39 f5       	brne	.+78     	; 0x1cd6 <vfprintf+0x22a>
    1c88:	f8 01       	movw	r30, r16
    1c8a:	27 ff       	sbrs	r18, 7
    1c8c:	07 c0       	rjmp	.+14     	; 0x1c9c <vfprintf+0x1f0>
    1c8e:	60 81       	ld	r22, Z
    1c90:	71 81       	ldd	r23, Z+1	; 0x01
    1c92:	82 81       	ldd	r24, Z+2	; 0x02
    1c94:	93 81       	ldd	r25, Z+3	; 0x03
    1c96:	0c 5f       	subi	r16, 0xFC	; 252
    1c98:	1f 4f       	sbci	r17, 0xFF	; 255
    1c9a:	08 c0       	rjmp	.+16     	; 0x1cac <vfprintf+0x200>
    1c9c:	60 81       	ld	r22, Z
    1c9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ca0:	07 2e       	mov	r0, r23
    1ca2:	00 0c       	add	r0, r0
    1ca4:	88 0b       	sbc	r24, r24
    1ca6:	99 0b       	sbc	r25, r25
    1ca8:	0e 5f       	subi	r16, 0xFE	; 254
    1caa:	1f 4f       	sbci	r17, 0xFF	; 255
    1cac:	2f 76       	andi	r18, 0x6F	; 111
    1cae:	72 2e       	mov	r7, r18
    1cb0:	97 ff       	sbrs	r25, 7
    1cb2:	09 c0       	rjmp	.+18     	; 0x1cc6 <vfprintf+0x21a>
    1cb4:	90 95       	com	r25
    1cb6:	80 95       	com	r24
    1cb8:	70 95       	com	r23
    1cba:	61 95       	neg	r22
    1cbc:	7f 4f       	sbci	r23, 0xFF	; 255
    1cbe:	8f 4f       	sbci	r24, 0xFF	; 255
    1cc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc2:	20 68       	ori	r18, 0x80	; 128
    1cc4:	72 2e       	mov	r7, r18
    1cc6:	2a e0       	ldi	r18, 0x0A	; 10
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	a4 01       	movw	r20, r8
    1ccc:	0e 94 a8 12 	call	0x2550	; 0x2550 <__ultoa_invert>
    1cd0:	a8 2e       	mov	r10, r24
    1cd2:	a8 18       	sub	r10, r8
    1cd4:	44 c0       	rjmp	.+136    	; 0x1d5e <vfprintf+0x2b2>
    1cd6:	85 37       	cpi	r24, 0x75	; 117
    1cd8:	29 f4       	brne	.+10     	; 0x1ce4 <vfprintf+0x238>
    1cda:	2f 7e       	andi	r18, 0xEF	; 239
    1cdc:	b2 2e       	mov	r11, r18
    1cde:	2a e0       	ldi	r18, 0x0A	; 10
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	25 c0       	rjmp	.+74     	; 0x1d2e <vfprintf+0x282>
    1ce4:	f2 2f       	mov	r31, r18
    1ce6:	f9 7f       	andi	r31, 0xF9	; 249
    1ce8:	bf 2e       	mov	r11, r31
    1cea:	8f 36       	cpi	r24, 0x6F	; 111
    1cec:	c1 f0       	breq	.+48     	; 0x1d1e <vfprintf+0x272>
    1cee:	18 f4       	brcc	.+6      	; 0x1cf6 <vfprintf+0x24a>
    1cf0:	88 35       	cpi	r24, 0x58	; 88
    1cf2:	79 f0       	breq	.+30     	; 0x1d12 <vfprintf+0x266>
    1cf4:	b4 c0       	rjmp	.+360    	; 0x1e5e <vfprintf+0x3b2>
    1cf6:	80 37       	cpi	r24, 0x70	; 112
    1cf8:	19 f0       	breq	.+6      	; 0x1d00 <vfprintf+0x254>
    1cfa:	88 37       	cpi	r24, 0x78	; 120
    1cfc:	21 f0       	breq	.+8      	; 0x1d06 <vfprintf+0x25a>
    1cfe:	af c0       	rjmp	.+350    	; 0x1e5e <vfprintf+0x3b2>
    1d00:	2f 2f       	mov	r18, r31
    1d02:	20 61       	ori	r18, 0x10	; 16
    1d04:	b2 2e       	mov	r11, r18
    1d06:	b4 fe       	sbrs	r11, 4
    1d08:	0d c0       	rjmp	.+26     	; 0x1d24 <vfprintf+0x278>
    1d0a:	8b 2d       	mov	r24, r11
    1d0c:	84 60       	ori	r24, 0x04	; 4
    1d0e:	b8 2e       	mov	r11, r24
    1d10:	09 c0       	rjmp	.+18     	; 0x1d24 <vfprintf+0x278>
    1d12:	24 ff       	sbrs	r18, 4
    1d14:	0a c0       	rjmp	.+20     	; 0x1d2a <vfprintf+0x27e>
    1d16:	9f 2f       	mov	r25, r31
    1d18:	96 60       	ori	r25, 0x06	; 6
    1d1a:	b9 2e       	mov	r11, r25
    1d1c:	06 c0       	rjmp	.+12     	; 0x1d2a <vfprintf+0x27e>
    1d1e:	28 e0       	ldi	r18, 0x08	; 8
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	05 c0       	rjmp	.+10     	; 0x1d2e <vfprintf+0x282>
    1d24:	20 e1       	ldi	r18, 0x10	; 16
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	02 c0       	rjmp	.+4      	; 0x1d2e <vfprintf+0x282>
    1d2a:	20 e1       	ldi	r18, 0x10	; 16
    1d2c:	32 e0       	ldi	r19, 0x02	; 2
    1d2e:	f8 01       	movw	r30, r16
    1d30:	b7 fe       	sbrs	r11, 7
    1d32:	07 c0       	rjmp	.+14     	; 0x1d42 <vfprintf+0x296>
    1d34:	60 81       	ld	r22, Z
    1d36:	71 81       	ldd	r23, Z+1	; 0x01
    1d38:	82 81       	ldd	r24, Z+2	; 0x02
    1d3a:	93 81       	ldd	r25, Z+3	; 0x03
    1d3c:	0c 5f       	subi	r16, 0xFC	; 252
    1d3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d40:	06 c0       	rjmp	.+12     	; 0x1d4e <vfprintf+0x2a2>
    1d42:	60 81       	ld	r22, Z
    1d44:	71 81       	ldd	r23, Z+1	; 0x01
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	0e 5f       	subi	r16, 0xFE	; 254
    1d4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d4e:	a4 01       	movw	r20, r8
    1d50:	0e 94 a8 12 	call	0x2550	; 0x2550 <__ultoa_invert>
    1d54:	a8 2e       	mov	r10, r24
    1d56:	a8 18       	sub	r10, r8
    1d58:	fb 2d       	mov	r31, r11
    1d5a:	ff 77       	andi	r31, 0x7F	; 127
    1d5c:	7f 2e       	mov	r7, r31
    1d5e:	76 fe       	sbrs	r7, 6
    1d60:	0b c0       	rjmp	.+22     	; 0x1d78 <vfprintf+0x2cc>
    1d62:	37 2d       	mov	r19, r7
    1d64:	3e 7f       	andi	r19, 0xFE	; 254
    1d66:	a5 14       	cp	r10, r5
    1d68:	50 f4       	brcc	.+20     	; 0x1d7e <vfprintf+0x2d2>
    1d6a:	74 fe       	sbrs	r7, 4
    1d6c:	0a c0       	rjmp	.+20     	; 0x1d82 <vfprintf+0x2d6>
    1d6e:	72 fc       	sbrc	r7, 2
    1d70:	08 c0       	rjmp	.+16     	; 0x1d82 <vfprintf+0x2d6>
    1d72:	37 2d       	mov	r19, r7
    1d74:	3e 7e       	andi	r19, 0xEE	; 238
    1d76:	05 c0       	rjmp	.+10     	; 0x1d82 <vfprintf+0x2d6>
    1d78:	ba 2c       	mov	r11, r10
    1d7a:	37 2d       	mov	r19, r7
    1d7c:	03 c0       	rjmp	.+6      	; 0x1d84 <vfprintf+0x2d8>
    1d7e:	ba 2c       	mov	r11, r10
    1d80:	01 c0       	rjmp	.+2      	; 0x1d84 <vfprintf+0x2d8>
    1d82:	b5 2c       	mov	r11, r5
    1d84:	34 ff       	sbrs	r19, 4
    1d86:	0d c0       	rjmp	.+26     	; 0x1da2 <vfprintf+0x2f6>
    1d88:	fe 01       	movw	r30, r28
    1d8a:	ea 0d       	add	r30, r10
    1d8c:	f1 1d       	adc	r31, r1
    1d8e:	80 81       	ld	r24, Z
    1d90:	80 33       	cpi	r24, 0x30	; 48
    1d92:	11 f4       	brne	.+4      	; 0x1d98 <vfprintf+0x2ec>
    1d94:	39 7e       	andi	r19, 0xE9	; 233
    1d96:	09 c0       	rjmp	.+18     	; 0x1daa <vfprintf+0x2fe>
    1d98:	32 ff       	sbrs	r19, 2
    1d9a:	06 c0       	rjmp	.+12     	; 0x1da8 <vfprintf+0x2fc>
    1d9c:	b3 94       	inc	r11
    1d9e:	b3 94       	inc	r11
    1da0:	04 c0       	rjmp	.+8      	; 0x1daa <vfprintf+0x2fe>
    1da2:	83 2f       	mov	r24, r19
    1da4:	86 78       	andi	r24, 0x86	; 134
    1da6:	09 f0       	breq	.+2      	; 0x1daa <vfprintf+0x2fe>
    1da8:	b3 94       	inc	r11
    1daa:	33 fd       	sbrc	r19, 3
    1dac:	13 c0       	rjmp	.+38     	; 0x1dd4 <vfprintf+0x328>
    1dae:	30 ff       	sbrs	r19, 0
    1db0:	06 c0       	rjmp	.+12     	; 0x1dbe <vfprintf+0x312>
    1db2:	5a 2c       	mov	r5, r10
    1db4:	b3 14       	cp	r11, r3
    1db6:	18 f4       	brcc	.+6      	; 0x1dbe <vfprintf+0x312>
    1db8:	53 0c       	add	r5, r3
    1dba:	5b 18       	sub	r5, r11
    1dbc:	b3 2c       	mov	r11, r3
    1dbe:	b3 14       	cp	r11, r3
    1dc0:	68 f4       	brcc	.+26     	; 0x1ddc <vfprintf+0x330>
    1dc2:	b7 01       	movw	r22, r14
    1dc4:	80 e2       	ldi	r24, 0x20	; 32
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	3c 87       	std	Y+12, r19	; 0x0c
    1dca:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <fputc>
    1dce:	b3 94       	inc	r11
    1dd0:	3c 85       	ldd	r19, Y+12	; 0x0c
    1dd2:	f5 cf       	rjmp	.-22     	; 0x1dbe <vfprintf+0x312>
    1dd4:	b3 14       	cp	r11, r3
    1dd6:	10 f4       	brcc	.+4      	; 0x1ddc <vfprintf+0x330>
    1dd8:	3b 18       	sub	r3, r11
    1dda:	01 c0       	rjmp	.+2      	; 0x1dde <vfprintf+0x332>
    1ddc:	31 2c       	mov	r3, r1
    1dde:	34 ff       	sbrs	r19, 4
    1de0:	12 c0       	rjmp	.+36     	; 0x1e06 <vfprintf+0x35a>
    1de2:	b7 01       	movw	r22, r14
    1de4:	80 e3       	ldi	r24, 0x30	; 48
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	3c 87       	std	Y+12, r19	; 0x0c
    1dea:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <fputc>
    1dee:	3c 85       	ldd	r19, Y+12	; 0x0c
    1df0:	32 ff       	sbrs	r19, 2
    1df2:	17 c0       	rjmp	.+46     	; 0x1e22 <vfprintf+0x376>
    1df4:	31 fd       	sbrc	r19, 1
    1df6:	03 c0       	rjmp	.+6      	; 0x1dfe <vfprintf+0x352>
    1df8:	88 e7       	ldi	r24, 0x78	; 120
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	02 c0       	rjmp	.+4      	; 0x1e02 <vfprintf+0x356>
    1dfe:	88 e5       	ldi	r24, 0x58	; 88
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	b7 01       	movw	r22, r14
    1e04:	0c c0       	rjmp	.+24     	; 0x1e1e <vfprintf+0x372>
    1e06:	83 2f       	mov	r24, r19
    1e08:	86 78       	andi	r24, 0x86	; 134
    1e0a:	59 f0       	breq	.+22     	; 0x1e22 <vfprintf+0x376>
    1e0c:	31 ff       	sbrs	r19, 1
    1e0e:	02 c0       	rjmp	.+4      	; 0x1e14 <vfprintf+0x368>
    1e10:	8b e2       	ldi	r24, 0x2B	; 43
    1e12:	01 c0       	rjmp	.+2      	; 0x1e16 <vfprintf+0x36a>
    1e14:	80 e2       	ldi	r24, 0x20	; 32
    1e16:	37 fd       	sbrc	r19, 7
    1e18:	8d e2       	ldi	r24, 0x2D	; 45
    1e1a:	b7 01       	movw	r22, r14
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <fputc>
    1e22:	a5 14       	cp	r10, r5
    1e24:	38 f4       	brcc	.+14     	; 0x1e34 <vfprintf+0x388>
    1e26:	b7 01       	movw	r22, r14
    1e28:	80 e3       	ldi	r24, 0x30	; 48
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <fputc>
    1e30:	5a 94       	dec	r5
    1e32:	f7 cf       	rjmp	.-18     	; 0x1e22 <vfprintf+0x376>
    1e34:	aa 94       	dec	r10
    1e36:	f4 01       	movw	r30, r8
    1e38:	ea 0d       	add	r30, r10
    1e3a:	f1 1d       	adc	r31, r1
    1e3c:	80 81       	ld	r24, Z
    1e3e:	b7 01       	movw	r22, r14
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <fputc>
    1e46:	a1 10       	cpse	r10, r1
    1e48:	f5 cf       	rjmp	.-22     	; 0x1e34 <vfprintf+0x388>
    1e4a:	33 20       	and	r3, r3
    1e4c:	09 f4       	brne	.+2      	; 0x1e50 <vfprintf+0x3a4>
    1e4e:	51 ce       	rjmp	.-862    	; 0x1af2 <vfprintf+0x46>
    1e50:	b7 01       	movw	r22, r14
    1e52:	80 e2       	ldi	r24, 0x20	; 32
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <fputc>
    1e5a:	3a 94       	dec	r3
    1e5c:	f6 cf       	rjmp	.-20     	; 0x1e4a <vfprintf+0x39e>
    1e5e:	f7 01       	movw	r30, r14
    1e60:	86 81       	ldd	r24, Z+6	; 0x06
    1e62:	97 81       	ldd	r25, Z+7	; 0x07
    1e64:	02 c0       	rjmp	.+4      	; 0x1e6a <vfprintf+0x3be>
    1e66:	8f ef       	ldi	r24, 0xFF	; 255
    1e68:	9f ef       	ldi	r25, 0xFF	; 255
    1e6a:	2c 96       	adiw	r28, 0x0c	; 12
    1e6c:	cd bf       	out	0x3d, r28	; 61
    1e6e:	de bf       	out	0x3e, r29	; 62
    1e70:	df 91       	pop	r29
    1e72:	cf 91       	pop	r28
    1e74:	1f 91       	pop	r17
    1e76:	0f 91       	pop	r16
    1e78:	ff 90       	pop	r15
    1e7a:	ef 90       	pop	r14
    1e7c:	df 90       	pop	r13
    1e7e:	cf 90       	pop	r12
    1e80:	bf 90       	pop	r11
    1e82:	af 90       	pop	r10
    1e84:	9f 90       	pop	r9
    1e86:	8f 90       	pop	r8
    1e88:	7f 90       	pop	r7
    1e8a:	6f 90       	pop	r6
    1e8c:	5f 90       	pop	r5
    1e8e:	4f 90       	pop	r4
    1e90:	3f 90       	pop	r3
    1e92:	2f 90       	pop	r2
    1e94:	08 95       	ret

00001e96 <putval>:
    1e96:	20 fd       	sbrc	r18, 0
    1e98:	09 c0       	rjmp	.+18     	; 0x1eac <putval+0x16>
    1e9a:	fc 01       	movw	r30, r24
    1e9c:	23 fd       	sbrc	r18, 3
    1e9e:	05 c0       	rjmp	.+10     	; 0x1eaa <putval+0x14>
    1ea0:	22 ff       	sbrs	r18, 2
    1ea2:	02 c0       	rjmp	.+4      	; 0x1ea8 <putval+0x12>
    1ea4:	73 83       	std	Z+3, r23	; 0x03
    1ea6:	62 83       	std	Z+2, r22	; 0x02
    1ea8:	51 83       	std	Z+1, r21	; 0x01
    1eaa:	40 83       	st	Z, r20
    1eac:	08 95       	ret

00001eae <mulacc>:
    1eae:	44 fd       	sbrc	r20, 4
    1eb0:	10 c0       	rjmp	.+32     	; 0x1ed2 <mulacc+0x24>
    1eb2:	46 fd       	sbrc	r20, 6
    1eb4:	10 c0       	rjmp	.+32     	; 0x1ed6 <mulacc+0x28>
    1eb6:	db 01       	movw	r26, r22
    1eb8:	fc 01       	movw	r30, r24
    1eba:	aa 0f       	add	r26, r26
    1ebc:	bb 1f       	adc	r27, r27
    1ebe:	ee 1f       	adc	r30, r30
    1ec0:	ff 1f       	adc	r31, r31
    1ec2:	10 94       	com	r1
    1ec4:	d1 f7       	brne	.-12     	; 0x1eba <mulacc+0xc>
    1ec6:	6a 0f       	add	r22, r26
    1ec8:	7b 1f       	adc	r23, r27
    1eca:	8e 1f       	adc	r24, r30
    1ecc:	9f 1f       	adc	r25, r31
    1ece:	31 e0       	ldi	r19, 0x01	; 1
    1ed0:	03 c0       	rjmp	.+6      	; 0x1ed8 <mulacc+0x2a>
    1ed2:	33 e0       	ldi	r19, 0x03	; 3
    1ed4:	01 c0       	rjmp	.+2      	; 0x1ed8 <mulacc+0x2a>
    1ed6:	34 e0       	ldi	r19, 0x04	; 4
    1ed8:	66 0f       	add	r22, r22
    1eda:	77 1f       	adc	r23, r23
    1edc:	88 1f       	adc	r24, r24
    1ede:	99 1f       	adc	r25, r25
    1ee0:	31 50       	subi	r19, 0x01	; 1
    1ee2:	d1 f7       	brne	.-12     	; 0x1ed8 <mulacc+0x2a>
    1ee4:	62 0f       	add	r22, r18
    1ee6:	71 1d       	adc	r23, r1
    1ee8:	81 1d       	adc	r24, r1
    1eea:	91 1d       	adc	r25, r1
    1eec:	08 95       	ret

00001eee <skip_spaces>:
    1eee:	0f 93       	push	r16
    1ef0:	1f 93       	push	r17
    1ef2:	cf 93       	push	r28
    1ef4:	df 93       	push	r29
    1ef6:	8c 01       	movw	r16, r24
    1ef8:	c8 01       	movw	r24, r16
    1efa:	0e 94 51 12 	call	0x24a2	; 0x24a2 <fgetc>
    1efe:	ec 01       	movw	r28, r24
    1f00:	97 fd       	sbrc	r25, 7
    1f02:	08 c0       	rjmp	.+16     	; 0x1f14 <skip_spaces+0x26>
    1f04:	0e 94 27 12 	call	0x244e	; 0x244e <isspace>
    1f08:	89 2b       	or	r24, r25
    1f0a:	b1 f7       	brne	.-20     	; 0x1ef8 <skip_spaces+0xa>
    1f0c:	b8 01       	movw	r22, r16
    1f0e:	ce 01       	movw	r24, r28
    1f10:	0e 94 8f 12 	call	0x251e	; 0x251e <ungetc>
    1f14:	ce 01       	movw	r24, r28
    1f16:	df 91       	pop	r29
    1f18:	cf 91       	pop	r28
    1f1a:	1f 91       	pop	r17
    1f1c:	0f 91       	pop	r16
    1f1e:	08 95       	ret

00001f20 <conv_int>:
    1f20:	8f 92       	push	r8
    1f22:	9f 92       	push	r9
    1f24:	af 92       	push	r10
    1f26:	bf 92       	push	r11
    1f28:	cf 92       	push	r12
    1f2a:	df 92       	push	r13
    1f2c:	ef 92       	push	r14
    1f2e:	ff 92       	push	r15
    1f30:	0f 93       	push	r16
    1f32:	1f 93       	push	r17
    1f34:	cf 93       	push	r28
    1f36:	df 93       	push	r29
    1f38:	1f 92       	push	r1
    1f3a:	cd b7       	in	r28, 0x3d	; 61
    1f3c:	de b7       	in	r29, 0x3e	; 62
    1f3e:	8c 01       	movw	r16, r24
    1f40:	c6 2e       	mov	r12, r22
    1f42:	7a 01       	movw	r14, r20
    1f44:	29 83       	std	Y+1, r18	; 0x01
    1f46:	0e 94 51 12 	call	0x24a2	; 0x24a2 <fgetc>
    1f4a:	ac 01       	movw	r20, r24
    1f4c:	55 27       	eor	r21, r21
    1f4e:	29 81       	ldd	r18, Y+1	; 0x01
    1f50:	4b 32       	cpi	r20, 0x2B	; 43
    1f52:	51 05       	cpc	r21, r1
    1f54:	21 f0       	breq	.+8      	; 0x1f5e <conv_int+0x3e>
    1f56:	4d 32       	cpi	r20, 0x2D	; 45
    1f58:	51 05       	cpc	r21, r1
    1f5a:	69 f4       	brne	.+26     	; 0x1f76 <conv_int+0x56>
    1f5c:	20 68       	ori	r18, 0x80	; 128
    1f5e:	ca 94       	dec	r12
    1f60:	c1 10       	cpse	r12, r1
    1f62:	02 c0       	rjmp	.+4      	; 0x1f68 <conv_int+0x48>
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	76 c0       	rjmp	.+236    	; 0x2054 <conv_int+0x134>
    1f68:	c8 01       	movw	r24, r16
    1f6a:	29 83       	std	Y+1, r18	; 0x01
    1f6c:	0e 94 51 12 	call	0x24a2	; 0x24a2 <fgetc>
    1f70:	29 81       	ldd	r18, Y+1	; 0x01
    1f72:	97 fd       	sbrc	r25, 7
    1f74:	f7 cf       	rjmp	.-18     	; 0x1f64 <conv_int+0x44>
    1f76:	32 2f       	mov	r19, r18
    1f78:	3d 7f       	andi	r19, 0xFD	; 253
    1f7a:	d3 2e       	mov	r13, r19
    1f7c:	32 2f       	mov	r19, r18
    1f7e:	30 73       	andi	r19, 0x30	; 48
    1f80:	49 f5       	brne	.+82     	; 0x1fd4 <conv_int+0xb4>
    1f82:	80 33       	cpi	r24, 0x30	; 48
    1f84:	39 f5       	brne	.+78     	; 0x1fd4 <conv_int+0xb4>
    1f86:	bb 24       	eor	r11, r11
    1f88:	ba 94       	dec	r11
    1f8a:	bc 0c       	add	r11, r12
    1f8c:	09 f4       	brne	.+2      	; 0x1f90 <conv_int+0x70>
    1f8e:	4e c0       	rjmp	.+156    	; 0x202c <conv_int+0x10c>
    1f90:	c8 01       	movw	r24, r16
    1f92:	29 83       	std	Y+1, r18	; 0x01
    1f94:	0e 94 51 12 	call	0x24a2	; 0x24a2 <fgetc>
    1f98:	29 81       	ldd	r18, Y+1	; 0x01
    1f9a:	97 fd       	sbrc	r25, 7
    1f9c:	47 c0       	rjmp	.+142    	; 0x202c <conv_int+0x10c>
    1f9e:	38 2f       	mov	r19, r24
    1fa0:	3f 7d       	andi	r19, 0xDF	; 223
    1fa2:	38 35       	cpi	r19, 0x58	; 88
    1fa4:	69 f4       	brne	.+26     	; 0x1fc0 <conv_int+0xa0>
    1fa6:	8d 2d       	mov	r24, r13
    1fa8:	82 64       	ori	r24, 0x42	; 66
    1faa:	d8 2e       	mov	r13, r24
    1fac:	ca 94       	dec	r12
    1fae:	ca 94       	dec	r12
    1fb0:	cc 20       	and	r12, r12
    1fb2:	e1 f1       	breq	.+120    	; 0x202c <conv_int+0x10c>
    1fb4:	c8 01       	movw	r24, r16
    1fb6:	0e 94 51 12 	call	0x24a2	; 0x24a2 <fgetc>
    1fba:	97 ff       	sbrs	r25, 7
    1fbc:	0b c0       	rjmp	.+22     	; 0x1fd4 <conv_int+0xb4>
    1fbe:	36 c0       	rjmp	.+108    	; 0x202c <conv_int+0x10c>
    1fc0:	26 ff       	sbrs	r18, 6
    1fc2:	04 c0       	rjmp	.+8      	; 0x1fcc <conv_int+0xac>
    1fc4:	2d 2d       	mov	r18, r13
    1fc6:	22 60       	ori	r18, 0x02	; 2
    1fc8:	d2 2e       	mov	r13, r18
    1fca:	03 c0       	rjmp	.+6      	; 0x1fd2 <conv_int+0xb2>
    1fcc:	3d 2d       	mov	r19, r13
    1fce:	32 61       	ori	r19, 0x12	; 18
    1fd0:	d3 2e       	mov	r13, r19
    1fd2:	cb 2c       	mov	r12, r11
    1fd4:	81 2c       	mov	r8, r1
    1fd6:	91 2c       	mov	r9, r1
    1fd8:	54 01       	movw	r10, r8
    1fda:	20 ed       	ldi	r18, 0xD0	; 208
    1fdc:	28 0f       	add	r18, r24
    1fde:	28 30       	cpi	r18, 0x08	; 8
    1fe0:	80 f0       	brcs	.+32     	; 0x2002 <conv_int+0xe2>
    1fe2:	d4 fe       	sbrs	r13, 4
    1fe4:	04 c0       	rjmp	.+8      	; 0x1fee <conv_int+0xce>
    1fe6:	b8 01       	movw	r22, r16
    1fe8:	0e 94 8f 12 	call	0x251e	; 0x251e <ungetc>
    1fec:	1c c0       	rjmp	.+56     	; 0x2026 <conv_int+0x106>
    1fee:	2a 30       	cpi	r18, 0x0A	; 10
    1ff0:	40 f0       	brcs	.+16     	; 0x2002 <conv_int+0xe2>
    1ff2:	d6 fe       	sbrs	r13, 6
    1ff4:	f8 cf       	rjmp	.-16     	; 0x1fe6 <conv_int+0xc6>
    1ff6:	2f 7d       	andi	r18, 0xDF	; 223
    1ff8:	3f ee       	ldi	r19, 0xEF	; 239
    1ffa:	32 0f       	add	r19, r18
    1ffc:	36 30       	cpi	r19, 0x06	; 6
    1ffe:	98 f7       	brcc	.-26     	; 0x1fe6 <conv_int+0xc6>
    2000:	27 50       	subi	r18, 0x07	; 7
    2002:	4d 2d       	mov	r20, r13
    2004:	c5 01       	movw	r24, r10
    2006:	b4 01       	movw	r22, r8
    2008:	0e 94 57 0f 	call	0x1eae	; 0x1eae <mulacc>
    200c:	4b 01       	movw	r8, r22
    200e:	5c 01       	movw	r10, r24
    2010:	8d 2d       	mov	r24, r13
    2012:	82 60       	ori	r24, 0x02	; 2
    2014:	d8 2e       	mov	r13, r24
    2016:	ca 94       	dec	r12
    2018:	cc 20       	and	r12, r12
    201a:	59 f0       	breq	.+22     	; 0x2032 <conv_int+0x112>
    201c:	c8 01       	movw	r24, r16
    201e:	0e 94 51 12 	call	0x24a2	; 0x24a2 <fgetc>
    2022:	97 ff       	sbrs	r25, 7
    2024:	da cf       	rjmp	.-76     	; 0x1fda <conv_int+0xba>
    2026:	d1 fc       	sbrc	r13, 1
    2028:	04 c0       	rjmp	.+8      	; 0x2032 <conv_int+0x112>
    202a:	9c cf       	rjmp	.-200    	; 0x1f64 <conv_int+0x44>
    202c:	81 2c       	mov	r8, r1
    202e:	91 2c       	mov	r9, r1
    2030:	54 01       	movw	r10, r8
    2032:	d7 fe       	sbrs	r13, 7
    2034:	08 c0       	rjmp	.+16     	; 0x2046 <conv_int+0x126>
    2036:	b0 94       	com	r11
    2038:	a0 94       	com	r10
    203a:	90 94       	com	r9
    203c:	80 94       	com	r8
    203e:	81 1c       	adc	r8, r1
    2040:	91 1c       	adc	r9, r1
    2042:	a1 1c       	adc	r10, r1
    2044:	b1 1c       	adc	r11, r1
    2046:	2d 2d       	mov	r18, r13
    2048:	b5 01       	movw	r22, r10
    204a:	a4 01       	movw	r20, r8
    204c:	c7 01       	movw	r24, r14
    204e:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <putval>
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	0f 90       	pop	r0
    2056:	df 91       	pop	r29
    2058:	cf 91       	pop	r28
    205a:	1f 91       	pop	r17
    205c:	0f 91       	pop	r16
    205e:	ff 90       	pop	r15
    2060:	ef 90       	pop	r14
    2062:	df 90       	pop	r13
    2064:	cf 90       	pop	r12
    2066:	bf 90       	pop	r11
    2068:	af 90       	pop	r10
    206a:	9f 90       	pop	r9
    206c:	8f 90       	pop	r8
    206e:	08 95       	ret

00002070 <conv_brk>:
    2070:	6f 92       	push	r6
    2072:	7f 92       	push	r7
    2074:	8f 92       	push	r8
    2076:	9f 92       	push	r9
    2078:	af 92       	push	r10
    207a:	bf 92       	push	r11
    207c:	cf 92       	push	r12
    207e:	df 92       	push	r13
    2080:	ef 92       	push	r14
    2082:	ff 92       	push	r15
    2084:	0f 93       	push	r16
    2086:	1f 93       	push	r17
    2088:	cf 93       	push	r28
    208a:	df 93       	push	r29
    208c:	cd b7       	in	r28, 0x3d	; 61
    208e:	de b7       	in	r29, 0x3e	; 62
    2090:	a1 97       	sbiw	r28, 0x21	; 33
    2092:	cd bf       	out	0x3d, r28	; 61
    2094:	de bf       	out	0x3e, r29	; 62
    2096:	5c 01       	movw	r10, r24
    2098:	7a 01       	movw	r14, r20
    209a:	ce 01       	movw	r24, r28
    209c:	01 96       	adiw	r24, 0x01	; 1
    209e:	6c 01       	movw	r12, r24
    20a0:	80 e2       	ldi	r24, 0x20	; 32
    20a2:	f6 01       	movw	r30, r12
    20a4:	11 92       	st	Z+, r1
    20a6:	8a 95       	dec	r24
    20a8:	e9 f7       	brne	.-6      	; 0x20a4 <conv_brk+0x34>
    20aa:	f5 01       	movw	r30, r10
    20ac:	83 80       	ldd	r8, Z+3	; 0x03
    20ae:	40 e0       	ldi	r20, 0x00	; 0
    20b0:	50 e0       	ldi	r21, 0x00	; 0
    20b2:	91 2c       	mov	r9, r1
    20b4:	71 2c       	mov	r7, r1
    20b6:	70 e0       	ldi	r23, 0x00	; 0
    20b8:	a1 e0       	ldi	r26, 0x01	; 1
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	f9 01       	movw	r30, r18
    20be:	83 fc       	sbrc	r8, 3
    20c0:	85 91       	lpm	r24, Z+
    20c2:	83 fe       	sbrs	r8, 3
    20c4:	81 91       	ld	r24, Z+
    20c6:	8f 01       	movw	r16, r30
    20c8:	98 2f       	mov	r25, r24
    20ca:	9f 01       	movw	r18, r30
    20cc:	81 11       	cpse	r24, r1
    20ce:	03 c0       	rjmp	.+6      	; 0x20d6 <conv_brk+0x66>
    20d0:	80 e0       	ldi	r24, 0x00	; 0
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	7c c0       	rjmp	.+248    	; 0x21ce <conv_brk+0x15e>
    20d6:	8e 35       	cpi	r24, 0x5E	; 94
    20d8:	19 f4       	brne	.+6      	; 0x20e0 <conv_brk+0x70>
    20da:	41 15       	cp	r20, r1
    20dc:	51 05       	cpc	r21, r1
    20de:	49 f1       	breq	.+82     	; 0x2132 <conv_brk+0xc2>
    20e0:	e7 2f       	mov	r30, r23
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	e4 17       	cp	r30, r20
    20e6:	f5 07       	cpc	r31, r21
    20e8:	3c f4       	brge	.+14     	; 0x20f8 <conv_brk+0x88>
    20ea:	8d 35       	cpi	r24, 0x5D	; 93
    20ec:	59 f1       	breq	.+86     	; 0x2144 <conv_brk+0xd4>
    20ee:	8d 32       	cpi	r24, 0x2D	; 45
    20f0:	19 f4       	brne	.+6      	; 0x20f8 <conv_brk+0x88>
    20f2:	77 20       	and	r7, r7
    20f4:	01 f1       	breq	.+64     	; 0x2136 <conv_brk+0xc6>
    20f6:	03 c0       	rjmp	.+6      	; 0x20fe <conv_brk+0x8e>
    20f8:	71 10       	cpse	r7, r1
    20fa:	01 c0       	rjmp	.+2      	; 0x20fe <conv_brk+0x8e>
    20fc:	98 2e       	mov	r9, r24
    20fe:	89 2f       	mov	r24, r25
    2100:	86 95       	lsr	r24
    2102:	86 95       	lsr	r24
    2104:	86 95       	lsr	r24
    2106:	86 01       	movw	r16, r12
    2108:	08 0f       	add	r16, r24
    210a:	11 1d       	adc	r17, r1
    210c:	89 2f       	mov	r24, r25
    210e:	87 70       	andi	r24, 0x07	; 7
    2110:	3d 01       	movw	r6, r26
    2112:	01 c0       	rjmp	.+2      	; 0x2116 <conv_brk+0xa6>
    2114:	66 0c       	add	r6, r6
    2116:	8a 95       	dec	r24
    2118:	ea f7       	brpl	.-6      	; 0x2114 <conv_brk+0xa4>
    211a:	f8 01       	movw	r30, r16
    211c:	80 81       	ld	r24, Z
    211e:	86 29       	or	r24, r6
    2120:	80 83       	st	Z, r24
    2122:	99 15       	cp	r25, r9
    2124:	59 f0       	breq	.+22     	; 0x213c <conv_brk+0xcc>
    2126:	99 15       	cp	r25, r9
    2128:	10 f4       	brcc	.+4      	; 0x212e <conv_brk+0xbe>
    212a:	9f 5f       	subi	r25, 0xFF	; 255
    212c:	e8 cf       	rjmp	.-48     	; 0x20fe <conv_brk+0x8e>
    212e:	91 50       	subi	r25, 0x01	; 1
    2130:	e6 cf       	rjmp	.-52     	; 0x20fe <conv_brk+0x8e>
    2132:	71 e0       	ldi	r23, 0x01	; 1
    2134:	04 c0       	rjmp	.+8      	; 0x213e <conv_brk+0xce>
    2136:	77 24       	eor	r7, r7
    2138:	73 94       	inc	r7
    213a:	01 c0       	rjmp	.+2      	; 0x213e <conv_brk+0xce>
    213c:	71 2c       	mov	r7, r1
    213e:	4f 5f       	subi	r20, 0xFF	; 255
    2140:	5f 4f       	sbci	r21, 0xFF	; 255
    2142:	bc cf       	rjmp	.-136    	; 0x20bc <conv_brk+0x4c>
    2144:	77 20       	and	r7, r7
    2146:	19 f0       	breq	.+6      	; 0x214e <conv_brk+0xde>
    2148:	8e 81       	ldd	r24, Y+6	; 0x06
    214a:	80 62       	ori	r24, 0x20	; 32
    214c:	8e 83       	std	Y+6, r24	; 0x06
    214e:	71 11       	cpse	r23, r1
    2150:	03 c0       	rjmp	.+6      	; 0x2158 <conv_brk+0xe8>
    2152:	99 24       	eor	r9, r9
    2154:	93 94       	inc	r9
    2156:	16 c0       	rjmp	.+44     	; 0x2184 <conv_brk+0x114>
    2158:	f6 01       	movw	r30, r12
    215a:	9e 01       	movw	r18, r28
    215c:	2f 5d       	subi	r18, 0xDF	; 223
    215e:	3f 4f       	sbci	r19, 0xFF	; 255
    2160:	80 81       	ld	r24, Z
    2162:	80 95       	com	r24
    2164:	81 93       	st	Z+, r24
    2166:	e2 17       	cp	r30, r18
    2168:	f3 07       	cpc	r31, r19
    216a:	d1 f7       	brne	.-12     	; 0x2160 <conv_brk+0xf0>
    216c:	f2 cf       	rjmp	.-28     	; 0x2152 <conv_brk+0xe2>
    216e:	e1 14       	cp	r14, r1
    2170:	f1 04       	cpc	r15, r1
    2172:	29 f0       	breq	.+10     	; 0x217e <conv_brk+0x10e>
    2174:	f7 01       	movw	r30, r14
    2176:	80 83       	st	Z, r24
    2178:	c7 01       	movw	r24, r14
    217a:	01 96       	adiw	r24, 0x01	; 1
    217c:	7c 01       	movw	r14, r24
    217e:	61 50       	subi	r22, 0x01	; 1
    2180:	91 2c       	mov	r9, r1
    2182:	f9 f0       	breq	.+62     	; 0x21c2 <conv_brk+0x152>
    2184:	c5 01       	movw	r24, r10
    2186:	69 a3       	std	Y+33, r22	; 0x21
    2188:	0e 94 51 12 	call	0x24a2	; 0x24a2 <fgetc>
    218c:	69 a1       	ldd	r22, Y+33	; 0x21
    218e:	97 fd       	sbrc	r25, 7
    2190:	16 c0       	rjmp	.+44     	; 0x21be <conv_brk+0x14e>
    2192:	28 2f       	mov	r18, r24
    2194:	26 95       	lsr	r18
    2196:	26 95       	lsr	r18
    2198:	26 95       	lsr	r18
    219a:	f6 01       	movw	r30, r12
    219c:	e2 0f       	add	r30, r18
    219e:	f1 1d       	adc	r31, r1
    21a0:	20 81       	ld	r18, Z
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	ac 01       	movw	r20, r24
    21a6:	47 70       	andi	r20, 0x07	; 7
    21a8:	55 27       	eor	r21, r21
    21aa:	02 c0       	rjmp	.+4      	; 0x21b0 <conv_brk+0x140>
    21ac:	35 95       	asr	r19
    21ae:	27 95       	ror	r18
    21b0:	4a 95       	dec	r20
    21b2:	e2 f7       	brpl	.-8      	; 0x21ac <conv_brk+0x13c>
    21b4:	20 fd       	sbrc	r18, 0
    21b6:	db cf       	rjmp	.-74     	; 0x216e <conv_brk+0xfe>
    21b8:	b5 01       	movw	r22, r10
    21ba:	0e 94 8f 12 	call	0x251e	; 0x251e <ungetc>
    21be:	91 10       	cpse	r9, r1
    21c0:	87 cf       	rjmp	.-242    	; 0x20d0 <conv_brk+0x60>
    21c2:	e1 14       	cp	r14, r1
    21c4:	f1 04       	cpc	r15, r1
    21c6:	11 f0       	breq	.+4      	; 0x21cc <conv_brk+0x15c>
    21c8:	f7 01       	movw	r30, r14
    21ca:	10 82       	st	Z, r1
    21cc:	c8 01       	movw	r24, r16
    21ce:	a1 96       	adiw	r28, 0x21	; 33
    21d0:	cd bf       	out	0x3d, r28	; 61
    21d2:	de bf       	out	0x3e, r29	; 62
    21d4:	df 91       	pop	r29
    21d6:	cf 91       	pop	r28
    21d8:	1f 91       	pop	r17
    21da:	0f 91       	pop	r16
    21dc:	ff 90       	pop	r15
    21de:	ef 90       	pop	r14
    21e0:	df 90       	pop	r13
    21e2:	cf 90       	pop	r12
    21e4:	bf 90       	pop	r11
    21e6:	af 90       	pop	r10
    21e8:	9f 90       	pop	r9
    21ea:	8f 90       	pop	r8
    21ec:	7f 90       	pop	r7
    21ee:	6f 90       	pop	r6
    21f0:	08 95       	ret

000021f2 <vfscanf>:
    21f2:	4f 92       	push	r4
    21f4:	5f 92       	push	r5
    21f6:	7f 92       	push	r7
    21f8:	8f 92       	push	r8
    21fa:	9f 92       	push	r9
    21fc:	af 92       	push	r10
    21fe:	bf 92       	push	r11
    2200:	cf 92       	push	r12
    2202:	df 92       	push	r13
    2204:	ef 92       	push	r14
    2206:	ff 92       	push	r15
    2208:	0f 93       	push	r16
    220a:	1f 93       	push	r17
    220c:	cf 93       	push	r28
    220e:	df 93       	push	r29
    2210:	1f 92       	push	r1
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
    2216:	6c 01       	movw	r12, r24
    2218:	2b 01       	movw	r4, r22
    221a:	5a 01       	movw	r10, r20
    221c:	fc 01       	movw	r30, r24
    221e:	16 82       	std	Z+6, r1	; 0x06
    2220:	17 82       	std	Z+7, r1	; 0x07
    2222:	71 2c       	mov	r7, r1
    2224:	f6 01       	movw	r30, r12
    2226:	f3 80       	ldd	r15, Z+3	; 0x03
    2228:	f2 01       	movw	r30, r4
    222a:	f3 fc       	sbrc	r15, 3
    222c:	85 91       	lpm	r24, Z+
    222e:	f3 fe       	sbrs	r15, 3
    2230:	81 91       	ld	r24, Z+
    2232:	38 2f       	mov	r19, r24
    2234:	2f 01       	movw	r4, r30
    2236:	88 23       	and	r24, r24
    2238:	09 f4       	brne	.+2      	; 0x223c <vfscanf+0x4a>
    223a:	f3 c0       	rjmp	.+486    	; 0x2422 <vfscanf+0x230>
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	39 83       	std	Y+1, r19	; 0x01
    2240:	0e 94 27 12 	call	0x244e	; 0x244e <isspace>
    2244:	39 81       	ldd	r19, Y+1	; 0x01
    2246:	89 2b       	or	r24, r25
    2248:	21 f0       	breq	.+8      	; 0x2252 <vfscanf+0x60>
    224a:	c6 01       	movw	r24, r12
    224c:	0e 94 77 0f 	call	0x1eee	; 0x1eee <skip_spaces>
    2250:	e9 cf       	rjmp	.-46     	; 0x2224 <vfscanf+0x32>
    2252:	35 32       	cpi	r19, 0x25	; 37
    2254:	41 f4       	brne	.+16     	; 0x2266 <vfscanf+0x74>
    2256:	f2 01       	movw	r30, r4
    2258:	f3 fc       	sbrc	r15, 3
    225a:	35 91       	lpm	r19, Z+
    225c:	f3 fe       	sbrs	r15, 3
    225e:	31 91       	ld	r19, Z+
    2260:	2f 01       	movw	r4, r30
    2262:	35 32       	cpi	r19, 0x25	; 37
    2264:	69 f4       	brne	.+26     	; 0x2280 <vfscanf+0x8e>
    2266:	c6 01       	movw	r24, r12
    2268:	39 83       	std	Y+1, r19	; 0x01
    226a:	0e 94 51 12 	call	0x24a2	; 0x24a2 <fgetc>
    226e:	39 81       	ldd	r19, Y+1	; 0x01
    2270:	97 fd       	sbrc	r25, 7
    2272:	d5 c0       	rjmp	.+426    	; 0x241e <vfscanf+0x22c>
    2274:	38 17       	cp	r19, r24
    2276:	b1 f2       	breq	.-84     	; 0x2224 <vfscanf+0x32>
    2278:	b6 01       	movw	r22, r12
    227a:	0e 94 8f 12 	call	0x251e	; 0x251e <ungetc>
    227e:	d1 c0       	rjmp	.+418    	; 0x2422 <vfscanf+0x230>
    2280:	3a 32       	cpi	r19, 0x2A	; 42
    2282:	39 f4       	brne	.+14     	; 0x2292 <vfscanf+0xa0>
    2284:	f3 fc       	sbrc	r15, 3
    2286:	35 91       	lpm	r19, Z+
    2288:	f3 fe       	sbrs	r15, 3
    228a:	31 91       	ld	r19, Z+
    228c:	2f 01       	movw	r4, r30
    228e:	51 e0       	ldi	r21, 0x01	; 1
    2290:	01 c0       	rjmp	.+2      	; 0x2294 <vfscanf+0xa2>
    2292:	50 e0       	ldi	r21, 0x00	; 0
    2294:	42 01       	movw	r8, r4
    2296:	10 e0       	ldi	r17, 0x00	; 0
    2298:	20 ed       	ldi	r18, 0xD0	; 208
    229a:	23 0f       	add	r18, r19
    229c:	2a 30       	cpi	r18, 0x0A	; 10
    229e:	90 f4       	brcc	.+36     	; 0x22c4 <vfscanf+0xd2>
    22a0:	52 60       	ori	r21, 0x02	; 2
    22a2:	61 2f       	mov	r22, r17
    22a4:	70 e0       	ldi	r23, 0x00	; 0
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	40 e2       	ldi	r20, 0x20	; 32
    22ac:	59 83       	std	Y+1, r21	; 0x01
    22ae:	0e 94 57 0f 	call	0x1eae	; 0x1eae <mulacc>
    22b2:	16 2f       	mov	r17, r22
    22b4:	f4 01       	movw	r30, r8
    22b6:	f3 fc       	sbrc	r15, 3
    22b8:	35 91       	lpm	r19, Z+
    22ba:	f3 fe       	sbrs	r15, 3
    22bc:	31 91       	ld	r19, Z+
    22be:	4f 01       	movw	r8, r30
    22c0:	59 81       	ldd	r21, Y+1	; 0x01
    22c2:	ea cf       	rjmp	.-44     	; 0x2298 <vfscanf+0xa6>
    22c4:	05 2f       	mov	r16, r21
    22c6:	23 2f       	mov	r18, r19
    22c8:	24 01       	movw	r4, r8
    22ca:	51 ff       	sbrs	r21, 1
    22cc:	03 c0       	rjmp	.+6      	; 0x22d4 <vfscanf+0xe2>
    22ce:	11 11       	cpse	r17, r1
    22d0:	02 c0       	rjmp	.+4      	; 0x22d6 <vfscanf+0xe4>
    22d2:	a7 c0       	rjmp	.+334    	; 0x2422 <vfscanf+0x230>
    22d4:	1f ef       	ldi	r17, 0xFF	; 255
    22d6:	38 36       	cpi	r19, 0x68	; 104
    22d8:	19 f0       	breq	.+6      	; 0x22e0 <vfscanf+0xee>
    22da:	3c 36       	cpi	r19, 0x6C	; 108
    22dc:	59 f0       	breq	.+22     	; 0x22f4 <vfscanf+0x102>
    22de:	11 c0       	rjmp	.+34     	; 0x2302 <vfscanf+0x110>
    22e0:	f4 01       	movw	r30, r8
    22e2:	f3 fc       	sbrc	r15, 3
    22e4:	25 91       	lpm	r18, Z+
    22e6:	f3 fe       	sbrs	r15, 3
    22e8:	21 91       	ld	r18, Z+
    22ea:	2f 01       	movw	r4, r30
    22ec:	28 36       	cpi	r18, 0x68	; 104
    22ee:	49 f4       	brne	.+18     	; 0x2302 <vfscanf+0x110>
    22f0:	05 2f       	mov	r16, r21
    22f2:	08 60       	ori	r16, 0x08	; 8
    22f4:	04 60       	ori	r16, 0x04	; 4
    22f6:	f2 01       	movw	r30, r4
    22f8:	f3 fc       	sbrc	r15, 3
    22fa:	25 91       	lpm	r18, Z+
    22fc:	f3 fe       	sbrs	r15, 3
    22fe:	21 91       	ld	r18, Z+
    2300:	2f 01       	movw	r4, r30
    2302:	22 23       	and	r18, r18
    2304:	09 f4       	brne	.+2      	; 0x2308 <vfscanf+0x116>
    2306:	8d c0       	rjmp	.+282    	; 0x2422 <vfscanf+0x230>
    2308:	62 2f       	mov	r22, r18
    230a:	70 e0       	ldi	r23, 0x00	; 0
    230c:	8c e0       	ldi	r24, 0x0C	; 12
    230e:	92 e0       	ldi	r25, 0x02	; 2
    2310:	29 83       	std	Y+1, r18	; 0x01
    2312:	0e 94 30 12 	call	0x2460	; 0x2460 <strchr_P>
    2316:	29 81       	ldd	r18, Y+1	; 0x01
    2318:	89 2b       	or	r24, r25
    231a:	09 f4       	brne	.+2      	; 0x231e <vfscanf+0x12c>
    231c:	82 c0       	rjmp	.+260    	; 0x2422 <vfscanf+0x230>
    231e:	00 fd       	sbrc	r16, 0
    2320:	07 c0       	rjmp	.+14     	; 0x2330 <vfscanf+0x13e>
    2322:	f5 01       	movw	r30, r10
    2324:	e0 80       	ld	r14, Z
    2326:	f1 80       	ldd	r15, Z+1	; 0x01
    2328:	c5 01       	movw	r24, r10
    232a:	02 96       	adiw	r24, 0x02	; 2
    232c:	5c 01       	movw	r10, r24
    232e:	02 c0       	rjmp	.+4      	; 0x2334 <vfscanf+0x142>
    2330:	e1 2c       	mov	r14, r1
    2332:	f1 2c       	mov	r15, r1
    2334:	2e 36       	cpi	r18, 0x6E	; 110
    2336:	51 f4       	brne	.+20     	; 0x234c <vfscanf+0x15a>
    2338:	f6 01       	movw	r30, r12
    233a:	46 81       	ldd	r20, Z+6	; 0x06
    233c:	57 81       	ldd	r21, Z+7	; 0x07
    233e:	60 e0       	ldi	r22, 0x00	; 0
    2340:	70 e0       	ldi	r23, 0x00	; 0
    2342:	20 2f       	mov	r18, r16
    2344:	c7 01       	movw	r24, r14
    2346:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <putval>
    234a:	6c cf       	rjmp	.-296    	; 0x2224 <vfscanf+0x32>
    234c:	23 36       	cpi	r18, 0x63	; 99
    234e:	91 f4       	brne	.+36     	; 0x2374 <vfscanf+0x182>
    2350:	01 ff       	sbrs	r16, 1
    2352:	11 e0       	ldi	r17, 0x01	; 1
    2354:	c6 01       	movw	r24, r12
    2356:	0e 94 51 12 	call	0x24a2	; 0x24a2 <fgetc>
    235a:	97 fd       	sbrc	r25, 7
    235c:	60 c0       	rjmp	.+192    	; 0x241e <vfscanf+0x22c>
    235e:	e1 14       	cp	r14, r1
    2360:	f1 04       	cpc	r15, r1
    2362:	29 f0       	breq	.+10     	; 0x236e <vfscanf+0x17c>
    2364:	f7 01       	movw	r30, r14
    2366:	80 83       	st	Z, r24
    2368:	c7 01       	movw	r24, r14
    236a:	01 96       	adiw	r24, 0x01	; 1
    236c:	7c 01       	movw	r14, r24
    236e:	11 50       	subi	r17, 0x01	; 1
    2370:	89 f7       	brne	.-30     	; 0x2354 <vfscanf+0x162>
    2372:	51 c0       	rjmp	.+162    	; 0x2416 <vfscanf+0x224>
    2374:	2b 35       	cpi	r18, 0x5B	; 91
    2376:	59 f4       	brne	.+22     	; 0x238e <vfscanf+0x19c>
    2378:	92 01       	movw	r18, r4
    237a:	a7 01       	movw	r20, r14
    237c:	61 2f       	mov	r22, r17
    237e:	c6 01       	movw	r24, r12
    2380:	0e 94 38 10 	call	0x2070	; 0x2070 <conv_brk>
    2384:	2c 01       	movw	r4, r24
    2386:	89 2b       	or	r24, r25
    2388:	09 f0       	breq	.+2      	; 0x238c <vfscanf+0x19a>
    238a:	45 c0       	rjmp	.+138    	; 0x2416 <vfscanf+0x224>
    238c:	3f c0       	rjmp	.+126    	; 0x240c <vfscanf+0x21a>
    238e:	c6 01       	movw	r24, r12
    2390:	29 83       	std	Y+1, r18	; 0x01
    2392:	0e 94 77 0f 	call	0x1eee	; 0x1eee <skip_spaces>
    2396:	29 81       	ldd	r18, Y+1	; 0x01
    2398:	97 fd       	sbrc	r25, 7
    239a:	41 c0       	rjmp	.+130    	; 0x241e <vfscanf+0x22c>
    239c:	2f 36       	cpi	r18, 0x6F	; 111
    239e:	59 f1       	breq	.+86     	; 0x23f6 <vfscanf+0x204>
    23a0:	28 f4       	brcc	.+10     	; 0x23ac <vfscanf+0x1ba>
    23a2:	24 36       	cpi	r18, 0x64	; 100
    23a4:	31 f1       	breq	.+76     	; 0x23f2 <vfscanf+0x200>
    23a6:	29 36       	cpi	r18, 0x69	; 105
    23a8:	49 f1       	breq	.+82     	; 0x23fc <vfscanf+0x20a>
    23aa:	27 c0       	rjmp	.+78     	; 0x23fa <vfscanf+0x208>
    23ac:	23 37       	cpi	r18, 0x73	; 115
    23ae:	69 f0       	breq	.+26     	; 0x23ca <vfscanf+0x1d8>
    23b0:	25 37       	cpi	r18, 0x75	; 117
    23b2:	f9 f0       	breq	.+62     	; 0x23f2 <vfscanf+0x200>
    23b4:	22 c0       	rjmp	.+68     	; 0x23fa <vfscanf+0x208>
    23b6:	e1 14       	cp	r14, r1
    23b8:	f1 04       	cpc	r15, r1
    23ba:	29 f0       	breq	.+10     	; 0x23c6 <vfscanf+0x1d4>
    23bc:	f7 01       	movw	r30, r14
    23be:	80 82       	st	Z, r8
    23c0:	c7 01       	movw	r24, r14
    23c2:	01 96       	adiw	r24, 0x01	; 1
    23c4:	7c 01       	movw	r14, r24
    23c6:	11 50       	subi	r17, 0x01	; 1
    23c8:	71 f0       	breq	.+28     	; 0x23e6 <vfscanf+0x1f4>
    23ca:	c6 01       	movw	r24, r12
    23cc:	0e 94 51 12 	call	0x24a2	; 0x24a2 <fgetc>
    23d0:	4c 01       	movw	r8, r24
    23d2:	97 fd       	sbrc	r25, 7
    23d4:	08 c0       	rjmp	.+16     	; 0x23e6 <vfscanf+0x1f4>
    23d6:	0e 94 27 12 	call	0x244e	; 0x244e <isspace>
    23da:	89 2b       	or	r24, r25
    23dc:	61 f3       	breq	.-40     	; 0x23b6 <vfscanf+0x1c4>
    23de:	b6 01       	movw	r22, r12
    23e0:	c4 01       	movw	r24, r8
    23e2:	0e 94 8f 12 	call	0x251e	; 0x251e <ungetc>
    23e6:	e1 14       	cp	r14, r1
    23e8:	f1 04       	cpc	r15, r1
    23ea:	a9 f0       	breq	.+42     	; 0x2416 <vfscanf+0x224>
    23ec:	f7 01       	movw	r30, r14
    23ee:	10 82       	st	Z, r1
    23f0:	12 c0       	rjmp	.+36     	; 0x2416 <vfscanf+0x224>
    23f2:	00 62       	ori	r16, 0x20	; 32
    23f4:	03 c0       	rjmp	.+6      	; 0x23fc <vfscanf+0x20a>
    23f6:	00 61       	ori	r16, 0x10	; 16
    23f8:	01 c0       	rjmp	.+2      	; 0x23fc <vfscanf+0x20a>
    23fa:	00 64       	ori	r16, 0x40	; 64
    23fc:	20 2f       	mov	r18, r16
    23fe:	a7 01       	movw	r20, r14
    2400:	61 2f       	mov	r22, r17
    2402:	c6 01       	movw	r24, r12
    2404:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <conv_int>
    2408:	81 11       	cpse	r24, r1
    240a:	05 c0       	rjmp	.+10     	; 0x2416 <vfscanf+0x224>
    240c:	f6 01       	movw	r30, r12
    240e:	83 81       	ldd	r24, Z+3	; 0x03
    2410:	80 73       	andi	r24, 0x30	; 48
    2412:	29 f4       	brne	.+10     	; 0x241e <vfscanf+0x22c>
    2414:	06 c0       	rjmp	.+12     	; 0x2422 <vfscanf+0x230>
    2416:	00 fd       	sbrc	r16, 0
    2418:	05 cf       	rjmp	.-502    	; 0x2224 <vfscanf+0x32>
    241a:	73 94       	inc	r7
    241c:	03 cf       	rjmp	.-506    	; 0x2224 <vfscanf+0x32>
    241e:	77 20       	and	r7, r7
    2420:	19 f0       	breq	.+6      	; 0x2428 <vfscanf+0x236>
    2422:	87 2d       	mov	r24, r7
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	02 c0       	rjmp	.+4      	; 0x242c <vfscanf+0x23a>
    2428:	8f ef       	ldi	r24, 0xFF	; 255
    242a:	9f ef       	ldi	r25, 0xFF	; 255
    242c:	0f 90       	pop	r0
    242e:	df 91       	pop	r29
    2430:	cf 91       	pop	r28
    2432:	1f 91       	pop	r17
    2434:	0f 91       	pop	r16
    2436:	ff 90       	pop	r15
    2438:	ef 90       	pop	r14
    243a:	df 90       	pop	r13
    243c:	cf 90       	pop	r12
    243e:	bf 90       	pop	r11
    2440:	af 90       	pop	r10
    2442:	9f 90       	pop	r9
    2444:	8f 90       	pop	r8
    2446:	7f 90       	pop	r7
    2448:	5f 90       	pop	r5
    244a:	4f 90       	pop	r4
    244c:	08 95       	ret

0000244e <isspace>:
    244e:	91 11       	cpse	r25, r1
    2450:	0c 94 06 13 	jmp	0x260c	; 0x260c <__ctype_isfalse>
    2454:	80 32       	cpi	r24, 0x20	; 32
    2456:	19 f0       	breq	.+6      	; 0x245e <isspace+0x10>
    2458:	89 50       	subi	r24, 0x09	; 9
    245a:	85 50       	subi	r24, 0x05	; 5
    245c:	c8 f7       	brcc	.-14     	; 0x2450 <isspace+0x2>
    245e:	08 95       	ret

00002460 <strchr_P>:
    2460:	fc 01       	movw	r30, r24
    2462:	05 90       	lpm	r0, Z+
    2464:	06 16       	cp	r0, r22
    2466:	21 f0       	breq	.+8      	; 0x2470 <strchr_P+0x10>
    2468:	00 20       	and	r0, r0
    246a:	d9 f7       	brne	.-10     	; 0x2462 <strchr_P+0x2>
    246c:	c0 01       	movw	r24, r0
    246e:	08 95       	ret
    2470:	31 97       	sbiw	r30, 0x01	; 1
    2472:	cf 01       	movw	r24, r30
    2474:	08 95       	ret

00002476 <strnlen_P>:
    2476:	fc 01       	movw	r30, r24
    2478:	05 90       	lpm	r0, Z+
    247a:	61 50       	subi	r22, 0x01	; 1
    247c:	70 40       	sbci	r23, 0x00	; 0
    247e:	01 10       	cpse	r0, r1
    2480:	d8 f7       	brcc	.-10     	; 0x2478 <strnlen_P+0x2>
    2482:	80 95       	com	r24
    2484:	90 95       	com	r25
    2486:	8e 0f       	add	r24, r30
    2488:	9f 1f       	adc	r25, r31
    248a:	08 95       	ret

0000248c <strnlen>:
    248c:	fc 01       	movw	r30, r24
    248e:	61 50       	subi	r22, 0x01	; 1
    2490:	70 40       	sbci	r23, 0x00	; 0
    2492:	01 90       	ld	r0, Z+
    2494:	01 10       	cpse	r0, r1
    2496:	d8 f7       	brcc	.-10     	; 0x248e <strnlen+0x2>
    2498:	80 95       	com	r24
    249a:	90 95       	com	r25
    249c:	8e 0f       	add	r24, r30
    249e:	9f 1f       	adc	r25, r31
    24a0:	08 95       	ret

000024a2 <fgetc>:
    24a2:	cf 93       	push	r28
    24a4:	df 93       	push	r29
    24a6:	ec 01       	movw	r28, r24
    24a8:	2b 81       	ldd	r18, Y+3	; 0x03
    24aa:	20 ff       	sbrs	r18, 0
    24ac:	33 c0       	rjmp	.+102    	; 0x2514 <fgetc+0x72>
    24ae:	26 ff       	sbrs	r18, 6
    24b0:	0a c0       	rjmp	.+20     	; 0x24c6 <fgetc+0x24>
    24b2:	2f 7b       	andi	r18, 0xBF	; 191
    24b4:	2b 83       	std	Y+3, r18	; 0x03
    24b6:	8e 81       	ldd	r24, Y+6	; 0x06
    24b8:	9f 81       	ldd	r25, Y+7	; 0x07
    24ba:	01 96       	adiw	r24, 0x01	; 1
    24bc:	8e 83       	std	Y+6, r24	; 0x06
    24be:	9f 83       	std	Y+7, r25	; 0x07
    24c0:	8a 81       	ldd	r24, Y+2	; 0x02
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	29 c0       	rjmp	.+82     	; 0x2518 <fgetc+0x76>
    24c6:	22 ff       	sbrs	r18, 2
    24c8:	0f c0       	rjmp	.+30     	; 0x24e8 <fgetc+0x46>
    24ca:	e8 81       	ld	r30, Y
    24cc:	f9 81       	ldd	r31, Y+1	; 0x01
    24ce:	80 81       	ld	r24, Z
    24d0:	08 2e       	mov	r0, r24
    24d2:	00 0c       	add	r0, r0
    24d4:	99 0b       	sbc	r25, r25
    24d6:	00 97       	sbiw	r24, 0x00	; 0
    24d8:	19 f4       	brne	.+6      	; 0x24e0 <fgetc+0x3e>
    24da:	20 62       	ori	r18, 0x20	; 32
    24dc:	2b 83       	std	Y+3, r18	; 0x03
    24de:	1a c0       	rjmp	.+52     	; 0x2514 <fgetc+0x72>
    24e0:	31 96       	adiw	r30, 0x01	; 1
    24e2:	e8 83       	st	Y, r30
    24e4:	f9 83       	std	Y+1, r31	; 0x01
    24e6:	0e c0       	rjmp	.+28     	; 0x2504 <fgetc+0x62>
    24e8:	ea 85       	ldd	r30, Y+10	; 0x0a
    24ea:	fb 85       	ldd	r31, Y+11	; 0x0b
    24ec:	19 95       	eicall
    24ee:	97 ff       	sbrs	r25, 7
    24f0:	09 c0       	rjmp	.+18     	; 0x2504 <fgetc+0x62>
    24f2:	2b 81       	ldd	r18, Y+3	; 0x03
    24f4:	01 96       	adiw	r24, 0x01	; 1
    24f6:	11 f0       	breq	.+4      	; 0x24fc <fgetc+0x5a>
    24f8:	80 e2       	ldi	r24, 0x20	; 32
    24fa:	01 c0       	rjmp	.+2      	; 0x24fe <fgetc+0x5c>
    24fc:	80 e1       	ldi	r24, 0x10	; 16
    24fe:	82 2b       	or	r24, r18
    2500:	8b 83       	std	Y+3, r24	; 0x03
    2502:	08 c0       	rjmp	.+16     	; 0x2514 <fgetc+0x72>
    2504:	2e 81       	ldd	r18, Y+6	; 0x06
    2506:	3f 81       	ldd	r19, Y+7	; 0x07
    2508:	2f 5f       	subi	r18, 0xFF	; 255
    250a:	3f 4f       	sbci	r19, 0xFF	; 255
    250c:	2e 83       	std	Y+6, r18	; 0x06
    250e:	3f 83       	std	Y+7, r19	; 0x07
    2510:	99 27       	eor	r25, r25
    2512:	02 c0       	rjmp	.+4      	; 0x2518 <fgetc+0x76>
    2514:	8f ef       	ldi	r24, 0xFF	; 255
    2516:	9f ef       	ldi	r25, 0xFF	; 255
    2518:	df 91       	pop	r29
    251a:	cf 91       	pop	r28
    251c:	08 95       	ret

0000251e <ungetc>:
    251e:	fb 01       	movw	r30, r22
    2520:	23 81       	ldd	r18, Z+3	; 0x03
    2522:	20 ff       	sbrs	r18, 0
    2524:	12 c0       	rjmp	.+36     	; 0x254a <ungetc+0x2c>
    2526:	26 fd       	sbrc	r18, 6
    2528:	10 c0       	rjmp	.+32     	; 0x254a <ungetc+0x2c>
    252a:	8f 3f       	cpi	r24, 0xFF	; 255
    252c:	3f ef       	ldi	r19, 0xFF	; 255
    252e:	93 07       	cpc	r25, r19
    2530:	61 f0       	breq	.+24     	; 0x254a <ungetc+0x2c>
    2532:	82 83       	std	Z+2, r24	; 0x02
    2534:	2f 7d       	andi	r18, 0xDF	; 223
    2536:	20 64       	ori	r18, 0x40	; 64
    2538:	23 83       	std	Z+3, r18	; 0x03
    253a:	26 81       	ldd	r18, Z+6	; 0x06
    253c:	37 81       	ldd	r19, Z+7	; 0x07
    253e:	21 50       	subi	r18, 0x01	; 1
    2540:	31 09       	sbc	r19, r1
    2542:	26 83       	std	Z+6, r18	; 0x06
    2544:	37 83       	std	Z+7, r19	; 0x07
    2546:	99 27       	eor	r25, r25
    2548:	08 95       	ret
    254a:	8f ef       	ldi	r24, 0xFF	; 255
    254c:	9f ef       	ldi	r25, 0xFF	; 255
    254e:	08 95       	ret

00002550 <__ultoa_invert>:
    2550:	fa 01       	movw	r30, r20
    2552:	aa 27       	eor	r26, r26
    2554:	28 30       	cpi	r18, 0x08	; 8
    2556:	51 f1       	breq	.+84     	; 0x25ac <__ultoa_invert+0x5c>
    2558:	20 31       	cpi	r18, 0x10	; 16
    255a:	81 f1       	breq	.+96     	; 0x25bc <__ultoa_invert+0x6c>
    255c:	e8 94       	clt
    255e:	6f 93       	push	r22
    2560:	6e 7f       	andi	r22, 0xFE	; 254
    2562:	6e 5f       	subi	r22, 0xFE	; 254
    2564:	7f 4f       	sbci	r23, 0xFF	; 255
    2566:	8f 4f       	sbci	r24, 0xFF	; 255
    2568:	9f 4f       	sbci	r25, 0xFF	; 255
    256a:	af 4f       	sbci	r26, 0xFF	; 255
    256c:	b1 e0       	ldi	r27, 0x01	; 1
    256e:	3e d0       	rcall	.+124    	; 0x25ec <__ultoa_invert+0x9c>
    2570:	b4 e0       	ldi	r27, 0x04	; 4
    2572:	3c d0       	rcall	.+120    	; 0x25ec <__ultoa_invert+0x9c>
    2574:	67 0f       	add	r22, r23
    2576:	78 1f       	adc	r23, r24
    2578:	89 1f       	adc	r24, r25
    257a:	9a 1f       	adc	r25, r26
    257c:	a1 1d       	adc	r26, r1
    257e:	68 0f       	add	r22, r24
    2580:	79 1f       	adc	r23, r25
    2582:	8a 1f       	adc	r24, r26
    2584:	91 1d       	adc	r25, r1
    2586:	a1 1d       	adc	r26, r1
    2588:	6a 0f       	add	r22, r26
    258a:	71 1d       	adc	r23, r1
    258c:	81 1d       	adc	r24, r1
    258e:	91 1d       	adc	r25, r1
    2590:	a1 1d       	adc	r26, r1
    2592:	20 d0       	rcall	.+64     	; 0x25d4 <__ultoa_invert+0x84>
    2594:	09 f4       	brne	.+2      	; 0x2598 <__ultoa_invert+0x48>
    2596:	68 94       	set
    2598:	3f 91       	pop	r19
    259a:	2a e0       	ldi	r18, 0x0A	; 10
    259c:	26 9f       	mul	r18, r22
    259e:	11 24       	eor	r1, r1
    25a0:	30 19       	sub	r19, r0
    25a2:	30 5d       	subi	r19, 0xD0	; 208
    25a4:	31 93       	st	Z+, r19
    25a6:	de f6       	brtc	.-74     	; 0x255e <__ultoa_invert+0xe>
    25a8:	cf 01       	movw	r24, r30
    25aa:	08 95       	ret
    25ac:	46 2f       	mov	r20, r22
    25ae:	47 70       	andi	r20, 0x07	; 7
    25b0:	40 5d       	subi	r20, 0xD0	; 208
    25b2:	41 93       	st	Z+, r20
    25b4:	b3 e0       	ldi	r27, 0x03	; 3
    25b6:	0f d0       	rcall	.+30     	; 0x25d6 <__ultoa_invert+0x86>
    25b8:	c9 f7       	brne	.-14     	; 0x25ac <__ultoa_invert+0x5c>
    25ba:	f6 cf       	rjmp	.-20     	; 0x25a8 <__ultoa_invert+0x58>
    25bc:	46 2f       	mov	r20, r22
    25be:	4f 70       	andi	r20, 0x0F	; 15
    25c0:	40 5d       	subi	r20, 0xD0	; 208
    25c2:	4a 33       	cpi	r20, 0x3A	; 58
    25c4:	18 f0       	brcs	.+6      	; 0x25cc <__ultoa_invert+0x7c>
    25c6:	49 5d       	subi	r20, 0xD9	; 217
    25c8:	31 fd       	sbrc	r19, 1
    25ca:	40 52       	subi	r20, 0x20	; 32
    25cc:	41 93       	st	Z+, r20
    25ce:	02 d0       	rcall	.+4      	; 0x25d4 <__ultoa_invert+0x84>
    25d0:	a9 f7       	brne	.-22     	; 0x25bc <__ultoa_invert+0x6c>
    25d2:	ea cf       	rjmp	.-44     	; 0x25a8 <__ultoa_invert+0x58>
    25d4:	b4 e0       	ldi	r27, 0x04	; 4
    25d6:	a6 95       	lsr	r26
    25d8:	97 95       	ror	r25
    25da:	87 95       	ror	r24
    25dc:	77 95       	ror	r23
    25de:	67 95       	ror	r22
    25e0:	ba 95       	dec	r27
    25e2:	c9 f7       	brne	.-14     	; 0x25d6 <__ultoa_invert+0x86>
    25e4:	00 97       	sbiw	r24, 0x00	; 0
    25e6:	61 05       	cpc	r22, r1
    25e8:	71 05       	cpc	r23, r1
    25ea:	08 95       	ret
    25ec:	9b 01       	movw	r18, r22
    25ee:	ac 01       	movw	r20, r24
    25f0:	0a 2e       	mov	r0, r26
    25f2:	06 94       	lsr	r0
    25f4:	57 95       	ror	r21
    25f6:	47 95       	ror	r20
    25f8:	37 95       	ror	r19
    25fa:	27 95       	ror	r18
    25fc:	ba 95       	dec	r27
    25fe:	c9 f7       	brne	.-14     	; 0x25f2 <__ultoa_invert+0xa2>
    2600:	62 0f       	add	r22, r18
    2602:	73 1f       	adc	r23, r19
    2604:	84 1f       	adc	r24, r20
    2606:	95 1f       	adc	r25, r21
    2608:	a0 1d       	adc	r26, r0
    260a:	08 95       	ret

0000260c <__ctype_isfalse>:
    260c:	99 27       	eor	r25, r25
    260e:	88 27       	eor	r24, r24

00002610 <__ctype_istrue>:
    2610:	08 95       	ret

00002612 <_exit>:
    2612:	f8 94       	cli

00002614 <__stop_program>:
    2614:	ff cf       	rjmp	.-2      	; 0x2614 <__stop_program>
